
build/debug/MotorSurucuC8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c44  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007d54  08007d54  00008d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e00  08007e00  00008e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e08  08007e08  00008e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e0c  08007e0c  00008e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08007e10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017a0  200001dc  08007fec  000091dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000197c  08007fec  0000997c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000026  00000000  00000000  00009205  2**0
                  CONTENTS, READONLY
 11 .debug_info   000235e3  00000000  00000000  0000922b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000069d2  00000000  00000000  0002c80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000d40f  00000000  00000000  000331e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  000405f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117c  00000000  00000000  00041b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001534b  00000000  00000000  00042d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006189  00000000  00000000  0005805f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003514  00000000  00000000  0005e1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000175  00000000  00000000  000616fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4803      	ldr	r0, [pc, #12]	@ (8000120 <deregister_tm_clones+0x10>)
 8000112:	4b04      	ldr	r3, [pc, #16]	@ (8000124 <deregister_tm_clones+0x14>)
 8000114:	4283      	cmp	r3, r0
 8000116:	d002      	beq.n	800011e <deregister_tm_clones+0xe>
 8000118:	4b03      	ldr	r3, [pc, #12]	@ (8000128 <deregister_tm_clones+0x18>)
 800011a:	b103      	cbz	r3, 800011e <deregister_tm_clones+0xe>
 800011c:	4718      	bx	r3
 800011e:	4770      	bx	lr
 8000120:	200001dc 	.word	0x200001dc
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000

0800012c <register_tm_clones>:
 800012c:	4805      	ldr	r0, [pc, #20]	@ (8000144 <register_tm_clones+0x18>)
 800012e:	4b06      	ldr	r3, [pc, #24]	@ (8000148 <register_tm_clones+0x1c>)
 8000130:	1a1b      	subs	r3, r3, r0
 8000132:	0fd9      	lsrs	r1, r3, #31
 8000134:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000138:	1049      	asrs	r1, r1, #1
 800013a:	d002      	beq.n	8000142 <register_tm_clones+0x16>
 800013c:	4b03      	ldr	r3, [pc, #12]	@ (800014c <register_tm_clones+0x20>)
 800013e:	b103      	cbz	r3, 8000142 <register_tm_clones+0x16>
 8000140:	4718      	bx	r3
 8000142:	4770      	bx	lr
 8000144:	200001dc 	.word	0x200001dc
 8000148:	200001dc 	.word	0x200001dc
 800014c:	00000000 	.word	0x00000000

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c06      	ldr	r4, [pc, #24]	@ (800016c <__do_global_dtors_aux+0x1c>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b943      	cbnz	r3, 800016a <__do_global_dtors_aux+0x1a>
 8000158:	f7ff ffda 	bl	8000110 <deregister_tm_clones>
 800015c:	4b04      	ldr	r3, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	b113      	cbz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000160:	4804      	ldr	r0, [pc, #16]	@ (8000174 <__do_global_dtors_aux+0x24>)
 8000162:	f3af 8000 	nop.w
 8000166:	2301      	movs	r3, #1
 8000168:	7023      	strb	r3, [r4, #0]
 800016a:	bd10      	pop	{r4, pc}
 800016c:	200001dc 	.word	0x200001dc
 8000170:	00000000 	.word	0x00000000
 8000174:	08007d3c 	.word	0x08007d3c

08000178 <frame_dummy>:
 8000178:	b508      	push	{r3, lr}
 800017a:	4b04      	ldr	r3, [pc, #16]	@ (800018c <frame_dummy+0x14>)
 800017c:	b11b      	cbz	r3, 8000186 <frame_dummy+0xe>
 800017e:	4904      	ldr	r1, [pc, #16]	@ (8000190 <frame_dummy+0x18>)
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <frame_dummy+0x1c>)
 8000182:	f3af 8000 	nop.w
 8000186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800018a:	e7cf      	b.n	800012c <register_tm_clones>
 800018c:	00000000 	.word	0x00000000
 8000190:	200001e0 	.word	0x200001e0
 8000194:	08007d3c 	.word	0x08007d3c

08000198 <__errno>:
 8000198:	4b01      	ldr	r3, [pc, #4]	@ (80001a0 <__errno+0x8>)
 800019a:	6818      	ldr	r0, [r3, #0]
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000000 	.word	0x20000000

080001a4 <__libc_init_array>:
 80001a4:	b570      	push	{r4, r5, r6, lr}
 80001a6:	4b0f      	ldr	r3, [pc, #60]	@ (80001e4 <__libc_init_array+0x40>)
 80001a8:	4d0f      	ldr	r5, [pc, #60]	@ (80001e8 <__libc_init_array+0x44>)
 80001aa:	42ab      	cmp	r3, r5
 80001ac:	eba3 0605 	sub.w	r6, r3, r5
 80001b0:	d007      	beq.n	80001c2 <__libc_init_array+0x1e>
 80001b2:	2400      	movs	r4, #0
 80001b4:	10b6      	asrs	r6, r6, #2
 80001b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80001ba:	3401      	adds	r4, #1
 80001bc:	4798      	blx	r3
 80001be:	42a6      	cmp	r6, r4
 80001c0:	d8f9      	bhi.n	80001b6 <__libc_init_array+0x12>
 80001c2:	f007 fdbb 	bl	8007d3c <_init>
 80001c6:	4d09      	ldr	r5, [pc, #36]	@ (80001ec <__libc_init_array+0x48>)
 80001c8:	4b09      	ldr	r3, [pc, #36]	@ (80001f0 <__libc_init_array+0x4c>)
 80001ca:	1b5e      	subs	r6, r3, r5
 80001cc:	42ab      	cmp	r3, r5
 80001ce:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80001d2:	d006      	beq.n	80001e2 <__libc_init_array+0x3e>
 80001d4:	2400      	movs	r4, #0
 80001d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80001da:	3401      	adds	r4, #1
 80001dc:	4798      	blx	r3
 80001de:	42a6      	cmp	r6, r4
 80001e0:	d8f9      	bhi.n	80001d6 <__libc_init_array+0x32>
 80001e2:	bd70      	pop	{r4, r5, r6, pc}
 80001e4:	08007e08 	.word	0x08007e08
 80001e8:	08007e08 	.word	0x08007e08
 80001ec:	08007e08 	.word	0x08007e08
 80001f0:	08007e0c 	.word	0x08007e0c

080001f4 <memset>:
 80001f4:	b570      	push	{r4, r5, r6, lr}
 80001f6:	0786      	lsls	r6, r0, #30
 80001f8:	d047      	beq.n	800028a <memset+0x96>
 80001fa:	1e54      	subs	r4, r2, #1
 80001fc:	2a00      	cmp	r2, #0
 80001fe:	d03e      	beq.n	800027e <memset+0x8a>
 8000200:	4603      	mov	r3, r0
 8000202:	b2ca      	uxtb	r2, r1
 8000204:	e001      	b.n	800020a <memset+0x16>
 8000206:	3c01      	subs	r4, #1
 8000208:	d339      	bcc.n	800027e <memset+0x8a>
 800020a:	f803 2b01 	strb.w	r2, [r3], #1
 800020e:	079d      	lsls	r5, r3, #30
 8000210:	d1f9      	bne.n	8000206 <memset+0x12>
 8000212:	2c03      	cmp	r4, #3
 8000214:	d92c      	bls.n	8000270 <memset+0x7c>
 8000216:	b2cd      	uxtb	r5, r1
 8000218:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800021c:	2c0f      	cmp	r4, #15
 800021e:	461a      	mov	r2, r3
 8000220:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000224:	d934      	bls.n	8000290 <memset+0x9c>
 8000226:	f1a4 0c10 	sub.w	ip, r4, #16
 800022a:	f02c 060f 	bic.w	r6, ip, #15
 800022e:	f103 0e10 	add.w	lr, r3, #16
 8000232:	44b6      	add	lr, r6
 8000234:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000238:	e9c2 5500 	strd	r5, r5, [r2]
 800023c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000240:	3210      	adds	r2, #16
 8000242:	4572      	cmp	r2, lr
 8000244:	d1f8      	bne.n	8000238 <memset+0x44>
 8000246:	f10c 0201 	add.w	r2, ip, #1
 800024a:	f014 0f0c 	tst.w	r4, #12
 800024e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000252:	f004 0c0f 	and.w	ip, r4, #15
 8000256:	d013      	beq.n	8000280 <memset+0x8c>
 8000258:	f1ac 0304 	sub.w	r3, ip, #4
 800025c:	f023 0303 	bic.w	r3, r3, #3
 8000260:	3304      	adds	r3, #4
 8000262:	4413      	add	r3, r2
 8000264:	f842 5b04 	str.w	r5, [r2], #4
 8000268:	4293      	cmp	r3, r2
 800026a:	d1fb      	bne.n	8000264 <memset+0x70>
 800026c:	f00c 0403 	and.w	r4, ip, #3
 8000270:	b12c      	cbz	r4, 800027e <memset+0x8a>
 8000272:	b2c9      	uxtb	r1, r1
 8000274:	441c      	add	r4, r3
 8000276:	f803 1b01 	strb.w	r1, [r3], #1
 800027a:	42a3      	cmp	r3, r4
 800027c:	d1fb      	bne.n	8000276 <memset+0x82>
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	4664      	mov	r4, ip
 8000282:	4613      	mov	r3, r2
 8000284:	2c00      	cmp	r4, #0
 8000286:	d1f4      	bne.n	8000272 <memset+0x7e>
 8000288:	e7f9      	b.n	800027e <memset+0x8a>
 800028a:	4603      	mov	r3, r0
 800028c:	4614      	mov	r4, r2
 800028e:	e7c0      	b.n	8000212 <memset+0x1e>
 8000290:	46a4      	mov	ip, r4
 8000292:	e7e1      	b.n	8000258 <memset+0x64>

08000294 <_sniprintf_r>:
 8000294:	b408      	push	{r3}
 8000296:	b510      	push	{r4, lr}
 8000298:	2a00      	cmp	r2, #0
 800029a:	4604      	mov	r4, r0
 800029c:	b09d      	sub	sp, #116	@ 0x74
 800029e:	db34      	blt.n	800030a <_sniprintf_r+0x76>
 80002a0:	f44f 7c02 	mov.w	ip, #520	@ 0x208
 80002a4:	f04f 0300 	mov.w	r3, #0
 80002a8:	f8ad c014 	strh.w	ip, [sp, #20]
 80002ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80002ae:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80002b2:	9102      	str	r1, [sp, #8]
 80002b4:	9106      	str	r1, [sp, #24]
 80002b6:	ab20      	add	r3, sp, #128	@ 0x80
 80002b8:	d015      	beq.n	80002e6 <_sniprintf_r+0x52>
 80002ba:	3a01      	subs	r2, #1
 80002bc:	9204      	str	r2, [sp, #16]
 80002be:	9207      	str	r2, [sp, #28]
 80002c0:	a902      	add	r1, sp, #8
 80002c2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	f8ad c016 	strh.w	ip, [sp, #22]
 80002ca:	f000 f951 	bl	8000570 <_svfiprintf_r>
 80002ce:	1c42      	adds	r2, r0, #1
 80002d0:	da01      	bge.n	80002d6 <_sniprintf_r+0x42>
 80002d2:	238b      	movs	r3, #139	@ 0x8b
 80002d4:	6023      	str	r3, [r4, #0]
 80002d6:	2200      	movs	r2, #0
 80002d8:	9b02      	ldr	r3, [sp, #8]
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	b01d      	add	sp, #116	@ 0x74
 80002de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002e2:	b001      	add	sp, #4
 80002e4:	4770      	bx	lr
 80002e6:	9204      	str	r2, [sp, #16]
 80002e8:	9207      	str	r2, [sp, #28]
 80002ea:	a902      	add	r1, sp, #8
 80002ec:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	f8ad c016 	strh.w	ip, [sp, #22]
 80002f4:	f000 f93c 	bl	8000570 <_svfiprintf_r>
 80002f8:	1c43      	adds	r3, r0, #1
 80002fa:	da01      	bge.n	8000300 <_sniprintf_r+0x6c>
 80002fc:	238b      	movs	r3, #139	@ 0x8b
 80002fe:	6023      	str	r3, [r4, #0]
 8000300:	b01d      	add	sp, #116	@ 0x74
 8000302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000306:	b001      	add	sp, #4
 8000308:	4770      	bx	lr
 800030a:	238b      	movs	r3, #139	@ 0x8b
 800030c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000310:	6023      	str	r3, [r4, #0]
 8000312:	e7f5      	b.n	8000300 <_sniprintf_r+0x6c>

08000314 <sniprintf>:
 8000314:	b40c      	push	{r2, r3}
 8000316:	b510      	push	{r4, lr}
 8000318:	4b20      	ldr	r3, [pc, #128]	@ (800039c <sniprintf+0x88>)
 800031a:	2900      	cmp	r1, #0
 800031c:	681c      	ldr	r4, [r3, #0]
 800031e:	b09c      	sub	sp, #112	@ 0x70
 8000320:	db36      	blt.n	8000390 <sniprintf+0x7c>
 8000322:	f04f 0300 	mov.w	r3, #0
 8000326:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800032a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800032c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8000330:	9002      	str	r0, [sp, #8]
 8000332:	9006      	str	r0, [sp, #24]
 8000334:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000338:	ab1f      	add	r3, sp, #124	@ 0x7c
 800033a:	d016      	beq.n	800036a <sniprintf+0x56>
 800033c:	3901      	subs	r1, #1
 800033e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8000340:	9104      	str	r1, [sp, #16]
 8000342:	9107      	str	r1, [sp, #28]
 8000344:	4620      	mov	r0, r4
 8000346:	a902      	add	r1, sp, #8
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	f8ad c016 	strh.w	ip, [sp, #22]
 800034e:	f000 f90f 	bl	8000570 <_svfiprintf_r>
 8000352:	1c42      	adds	r2, r0, #1
 8000354:	da01      	bge.n	800035a <sniprintf+0x46>
 8000356:	238b      	movs	r3, #139	@ 0x8b
 8000358:	6023      	str	r3, [r4, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	9b02      	ldr	r3, [sp, #8]
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	b01c      	add	sp, #112	@ 0x70
 8000362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000366:	b002      	add	sp, #8
 8000368:	4770      	bx	lr
 800036a:	9104      	str	r1, [sp, #16]
 800036c:	9107      	str	r1, [sp, #28]
 800036e:	4620      	mov	r0, r4
 8000370:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8000372:	a902      	add	r1, sp, #8
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	f8ad c016 	strh.w	ip, [sp, #22]
 800037a:	f000 f8f9 	bl	8000570 <_svfiprintf_r>
 800037e:	1c43      	adds	r3, r0, #1
 8000380:	da01      	bge.n	8000386 <sniprintf+0x72>
 8000382:	238b      	movs	r3, #139	@ 0x8b
 8000384:	6023      	str	r3, [r4, #0]
 8000386:	b01c      	add	sp, #112	@ 0x70
 8000388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038c:	b002      	add	sp, #8
 800038e:	4770      	bx	lr
 8000390:	238b      	movs	r3, #139	@ 0x8b
 8000392:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000396:	6023      	str	r3, [r4, #0]
 8000398:	e7f5      	b.n	8000386 <sniprintf+0x72>
 800039a:	bf00      	nop
 800039c:	20000000 	.word	0x20000000

080003a0 <__ssputs_r>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	461d      	mov	r5, r3
 80003a6:	688f      	ldr	r7, [r1, #8]
 80003a8:	460c      	mov	r4, r1
 80003aa:	42af      	cmp	r7, r5
 80003ac:	4616      	mov	r6, r2
 80003ae:	680b      	ldr	r3, [r1, #0]
 80003b0:	d836      	bhi.n	8000420 <__ssputs_r+0x80>
 80003b2:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 80003b6:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 80003ba:	d10e      	bne.n	80003da <__ssputs_r+0x3a>
 80003bc:	463d      	mov	r5, r7
 80003be:	4618      	mov	r0, r3
 80003c0:	4631      	mov	r1, r6
 80003c2:	462a      	mov	r2, r5
 80003c4:	f000 fdbc 	bl	8000f40 <memmove>
 80003c8:	2000      	movs	r0, #0
 80003ca:	68a3      	ldr	r3, [r4, #8]
 80003cc:	1bdf      	subs	r7, r3, r7
 80003ce:	6823      	ldr	r3, [r4, #0]
 80003d0:	60a7      	str	r7, [r4, #8]
 80003d2:	442b      	add	r3, r5
 80003d4:	6023      	str	r3, [r4, #0]
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	694a      	ldr	r2, [r1, #20]
 80003dc:	6909      	ldr	r1, [r1, #16]
 80003de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80003e2:	1a5f      	subs	r7, r3, r1
 80003e4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80003e8:	1c6b      	adds	r3, r5, #1
 80003ea:	1052      	asrs	r2, r2, #1
 80003ec:	443b      	add	r3, r7
 80003ee:	4293      	cmp	r3, r2
 80003f0:	bf92      	itee	ls
 80003f2:	4691      	movls	r9, r2
 80003f4:	4699      	movhi	r9, r3
 80003f6:	461a      	movhi	r2, r3
 80003f8:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 80003fc:	4680      	mov	r8, r0
 80003fe:	d011      	beq.n	8000424 <__ssputs_r+0x84>
 8000400:	4611      	mov	r1, r2
 8000402:	f000 fa3f 	bl	8000884 <_malloc_r>
 8000406:	4682      	mov	sl, r0
 8000408:	b300      	cbz	r0, 800044c <__ssputs_r+0xac>
 800040a:	463a      	mov	r2, r7
 800040c:	6921      	ldr	r1, [r4, #16]
 800040e:	f000 fab9 	bl	8000984 <memcpy>
 8000412:	89a3      	ldrh	r3, [r4, #12]
 8000414:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800041c:	81a3      	strh	r3, [r4, #12]
 800041e:	e005      	b.n	800042c <__ssputs_r+0x8c>
 8000420:	462f      	mov	r7, r5
 8000422:	e7cc      	b.n	80003be <__ssputs_r+0x1e>
 8000424:	f000 fb82 	bl	8000b2c <_realloc_r>
 8000428:	4682      	mov	sl, r0
 800042a:	b158      	cbz	r0, 8000444 <__ssputs_r+0xa4>
 800042c:	eb0a 0307 	add.w	r3, sl, r7
 8000430:	eba9 0707 	sub.w	r7, r9, r7
 8000434:	60a7      	str	r7, [r4, #8]
 8000436:	f8c4 a010 	str.w	sl, [r4, #16]
 800043a:	462f      	mov	r7, r5
 800043c:	f8c4 9014 	str.w	r9, [r4, #20]
 8000440:	6023      	str	r3, [r4, #0]
 8000442:	e7bc      	b.n	80003be <__ssputs_r+0x1e>
 8000444:	4640      	mov	r0, r8
 8000446:	6921      	ldr	r1, [r4, #16]
 8000448:	f000 fb12 	bl	8000a70 <_free_r>
 800044c:	220c      	movs	r2, #12
 800044e:	89a3      	ldrh	r3, [r4, #12]
 8000450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000458:	f8c8 2000 	str.w	r2, [r8]
 800045c:	81a3      	strh	r3, [r4, #12]
 800045e:	e7ba      	b.n	80003d6 <__ssputs_r+0x36>

08000460 <__ssprint_r>:
 8000460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000464:	6893      	ldr	r3, [r2, #8]
 8000466:	b083      	sub	sp, #12
 8000468:	4692      	mov	sl, r2
 800046a:	6817      	ldr	r7, [r2, #0]
 800046c:	9001      	str	r0, [sp, #4]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d076      	beq.n	8000560 <__ssprint_r+0x100>
 8000472:	f04f 0b00 	mov.w	fp, #0
 8000476:	460c      	mov	r4, r1
 8000478:	465d      	mov	r5, fp
 800047a:	688b      	ldr	r3, [r1, #8]
 800047c:	680a      	ldr	r2, [r1, #0]
 800047e:	e048      	b.n	8000512 <__ssprint_r+0xb2>
 8000480:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000484:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8000488:	d02f      	beq.n	80004ea <__ssprint_r+0x8a>
 800048a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 800048e:	eba2 0800 	sub.w	r8, r2, r0
 8000492:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000496:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800049a:	f108 0101 	add.w	r1, r8, #1
 800049e:	1052      	asrs	r2, r2, #1
 80004a0:	4429      	add	r1, r5
 80004a2:	4291      	cmp	r1, r2
 80004a4:	bf92      	itee	ls
 80004a6:	4691      	movls	r9, r2
 80004a8:	4689      	movhi	r9, r1
 80004aa:	460a      	movhi	r2, r1
 80004ac:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 80004b0:	d039      	beq.n	8000526 <__ssprint_r+0xc6>
 80004b2:	4611      	mov	r1, r2
 80004b4:	9801      	ldr	r0, [sp, #4]
 80004b6:	f000 f9e5 	bl	8000884 <_malloc_r>
 80004ba:	4606      	mov	r6, r0
 80004bc:	2800      	cmp	r0, #0
 80004be:	d03d      	beq.n	800053c <__ssprint_r+0xdc>
 80004c0:	4642      	mov	r2, r8
 80004c2:	6921      	ldr	r1, [r4, #16]
 80004c4:	f000 fa5e 	bl	8000984 <memcpy>
 80004c8:	89a2      	ldrh	r2, [r4, #12]
 80004ca:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80004ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80004d2:	81a2      	strh	r2, [r4, #12]
 80004d4:	eb06 0008 	add.w	r0, r6, r8
 80004d8:	eba9 0208 	sub.w	r2, r9, r8
 80004dc:	6126      	str	r6, [r4, #16]
 80004de:	46a8      	mov	r8, r5
 80004e0:	462e      	mov	r6, r5
 80004e2:	60a2      	str	r2, [r4, #8]
 80004e4:	6020      	str	r0, [r4, #0]
 80004e6:	f8c4 9014 	str.w	r9, [r4, #20]
 80004ea:	4632      	mov	r2, r6
 80004ec:	4659      	mov	r1, fp
 80004ee:	f000 fd27 	bl	8000f40 <memmove>
 80004f2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80004f6:	68a3      	ldr	r3, [r4, #8]
 80004f8:	6822      	ldr	r2, [r4, #0]
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	4432      	add	r2, r6
 8000500:	1b49      	subs	r1, r1, r5
 8000502:	60a3      	str	r3, [r4, #8]
 8000504:	6022      	str	r2, [r4, #0]
 8000506:	f8ca 1008 	str.w	r1, [sl, #8]
 800050a:	b349      	cbz	r1, 8000560 <__ssprint_r+0x100>
 800050c:	e9d7 b500 	ldrd	fp, r5, [r7]
 8000510:	3708      	adds	r7, #8
 8000512:	4698      	mov	r8, r3
 8000514:	4610      	mov	r0, r2
 8000516:	2d00      	cmp	r5, #0
 8000518:	d0f8      	beq.n	800050c <__ssprint_r+0xac>
 800051a:	429d      	cmp	r5, r3
 800051c:	461e      	mov	r6, r3
 800051e:	d2af      	bcs.n	8000480 <__ssprint_r+0x20>
 8000520:	46a8      	mov	r8, r5
 8000522:	462e      	mov	r6, r5
 8000524:	e7e1      	b.n	80004ea <__ssprint_r+0x8a>
 8000526:	4601      	mov	r1, r0
 8000528:	9801      	ldr	r0, [sp, #4]
 800052a:	f000 faff 	bl	8000b2c <_realloc_r>
 800052e:	4606      	mov	r6, r0
 8000530:	2800      	cmp	r0, #0
 8000532:	d1cf      	bne.n	80004d4 <__ssprint_r+0x74>
 8000534:	9801      	ldr	r0, [sp, #4]
 8000536:	6921      	ldr	r1, [r4, #16]
 8000538:	f000 fa9a 	bl	8000a70 <_free_r>
 800053c:	210c      	movs	r1, #12
 800053e:	89a3      	ldrh	r3, [r4, #12]
 8000540:	9d01      	ldr	r5, [sp, #4]
 8000542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000546:	6029      	str	r1, [r5, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	81a3      	strh	r3, [r4, #12]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000550:	2300      	movs	r3, #0
 8000552:	f8ca 2008 	str.w	r2, [sl, #8]
 8000556:	f8ca 3004 	str.w	r3, [sl, #4]
 800055a:	b003      	add	sp, #12
 800055c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000560:	2000      	movs	r0, #0
 8000562:	2300      	movs	r3, #0
 8000564:	f8ca 3004 	str.w	r3, [sl, #4]
 8000568:	b003      	add	sp, #12
 800056a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800056e:	bf00      	nop

08000570 <_svfiprintf_r>:
 8000570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000574:	461c      	mov	r4, r3
 8000576:	898b      	ldrh	r3, [r1, #12]
 8000578:	4689      	mov	r9, r1
 800057a:	061d      	lsls	r5, r3, #24
 800057c:	4682      	mov	sl, r0
 800057e:	4693      	mov	fp, r2
 8000580:	b09d      	sub	sp, #116	@ 0x74
 8000582:	d503      	bpl.n	800058c <_svfiprintf_r+0x1c>
 8000584:	690b      	ldr	r3, [r1, #16]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 80ee 	beq.w	8000768 <_svfiprintf_r+0x1f8>
 800058c:	2300      	movs	r3, #0
 800058e:	f243 0220 	movw	r2, #12320	@ 0x3020
 8000592:	9309      	str	r3, [sp, #36]	@ 0x24
 8000594:	f89b 3000 	ldrb.w	r3, [fp]
 8000598:	2701      	movs	r7, #1
 800059a:	4e7c      	ldr	r6, [pc, #496]	@ (800078c <_svfiprintf_r+0x21c>)
 800059c:	9403      	str	r4, [sp, #12]
 800059e:	f8ad 2029 	strh.w	r2, [sp, #41]	@ 0x29
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d071      	beq.n	800068a <_svfiprintf_r+0x11a>
 80005a6:	465d      	mov	r5, fp
 80005a8:	e003      	b.n	80005b2 <_svfiprintf_r+0x42>
 80005aa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d073      	beq.n	800069a <_svfiprintf_r+0x12a>
 80005b2:	2b25      	cmp	r3, #37	@ 0x25
 80005b4:	d1f9      	bne.n	80005aa <_svfiprintf_r+0x3a>
 80005b6:	ebb5 040b 	subs.w	r4, r5, fp
 80005ba:	d171      	bne.n	80006a0 <_svfiprintf_r+0x130>
 80005bc:	782a      	ldrb	r2, [r5, #0]
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d063      	beq.n	800068a <_svfiprintf_r+0x11a>
 80005c2:	2300      	movs	r3, #0
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005c8:	3501      	adds	r5, #1
 80005ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80005ce:	9304      	str	r3, [sp, #16]
 80005d0:	9307      	str	r3, [sp, #28]
 80005d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80005d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80005d8:	e006      	b.n	80005e8 <_svfiprintf_r+0x78>
 80005da:	4625      	mov	r5, r4
 80005dc:	9b04      	ldr	r3, [sp, #16]
 80005de:	1b80      	subs	r0, r0, r6
 80005e0:	fa07 f000 	lsl.w	r0, r7, r0
 80005e4:	4303      	orrs	r3, r0
 80005e6:	9304      	str	r3, [sp, #16]
 80005e8:	462c      	mov	r4, r5
 80005ea:	2205      	movs	r2, #5
 80005ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80005f0:	4630      	mov	r0, r6
 80005f2:	f000 f8d5 	bl	80007a0 <memchr>
 80005f6:	46a3      	mov	fp, r4
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d1ee      	bne.n	80005da <_svfiprintf_r+0x6a>
 80005fc:	9b04      	ldr	r3, [sp, #16]
 80005fe:	06d9      	lsls	r1, r3, #27
 8000600:	bf44      	itt	mi
 8000602:	2220      	movmi	r2, #32
 8000604:	f88d 2053 	strbmi.w	r2, [sp, #83]	@ 0x53
 8000608:	071a      	lsls	r2, r3, #28
 800060a:	bf48      	it	mi
 800060c:	222b      	movmi	r2, #43	@ 0x2b
 800060e:	7829      	ldrb	r1, [r5, #0]
 8000610:	bf48      	it	mi
 8000612:	f88d 2053 	strbmi.w	r2, [sp, #83]	@ 0x53
 8000616:	292a      	cmp	r1, #42	@ 0x2a
 8000618:	d14f      	bne.n	80006ba <_svfiprintf_r+0x14a>
 800061a:	9a03      	ldr	r2, [sp, #12]
 800061c:	6811      	ldr	r1, [r2, #0]
 800061e:	3204      	adds	r2, #4
 8000620:	2900      	cmp	r1, #0
 8000622:	9203      	str	r2, [sp, #12]
 8000624:	db7b      	blt.n	800071e <_svfiprintf_r+0x1ae>
 8000626:	9107      	str	r1, [sp, #28]
 8000628:	7869      	ldrb	r1, [r5, #1]
 800062a:	292e      	cmp	r1, #46	@ 0x2e
 800062c:	d05b      	beq.n	80006e6 <_svfiprintf_r+0x176>
 800062e:	4c58      	ldr	r4, [pc, #352]	@ (8000790 <_svfiprintf_r+0x220>)
 8000630:	2203      	movs	r2, #3
 8000632:	4620      	mov	r0, r4
 8000634:	f000 f8b4 	bl	80007a0 <memchr>
 8000638:	b138      	cbz	r0, 800064a <_svfiprintf_r+0xda>
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	9b04      	ldr	r3, [sp, #16]
 800063e:	1b00      	subs	r0, r0, r4
 8000640:	4082      	lsls	r2, r0
 8000642:	4313      	orrs	r3, r2
 8000644:	f10b 0b01 	add.w	fp, fp, #1
 8000648:	9304      	str	r3, [sp, #16]
 800064a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800064e:	2206      	movs	r2, #6
 8000650:	4850      	ldr	r0, [pc, #320]	@ (8000794 <_svfiprintf_r+0x224>)
 8000652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000656:	f000 f8a3 	bl	80007a0 <memchr>
 800065a:	2800      	cmp	r0, #0
 800065c:	d065      	beq.n	800072a <_svfiprintf_r+0x1ba>
 800065e:	4b4e      	ldr	r3, [pc, #312]	@ (8000798 <_svfiprintf_r+0x228>)
 8000660:	2b00      	cmp	r3, #0
 8000662:	d055      	beq.n	8000710 <_svfiprintf_r+0x1a0>
 8000664:	a903      	add	r1, sp, #12
 8000666:	9100      	str	r1, [sp, #0]
 8000668:	464a      	mov	r2, r9
 800066a:	4650      	mov	r0, sl
 800066c:	4b4b      	ldr	r3, [pc, #300]	@ (800079c <_svfiprintf_r+0x22c>)
 800066e:	a904      	add	r1, sp, #16
 8000670:	f3af 8000 	nop.w
 8000674:	4680      	mov	r8, r0
 8000676:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800067a:	d006      	beq.n	800068a <_svfiprintf_r+0x11a>
 800067c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800067e:	4443      	add	r3, r8
 8000680:	9309      	str	r3, [sp, #36]	@ 0x24
 8000682:	f89b 3000 	ldrb.w	r3, [fp]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d18d      	bne.n	80005a6 <_svfiprintf_r+0x36>
 800068a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800068e:	065b      	lsls	r3, r3, #25
 8000690:	d479      	bmi.n	8000786 <_svfiprintf_r+0x216>
 8000692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000694:	b01d      	add	sp, #116	@ 0x74
 8000696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800069a:	ebb5 040b 	subs.w	r4, r5, fp
 800069e:	d0f4      	beq.n	800068a <_svfiprintf_r+0x11a>
 80006a0:	4623      	mov	r3, r4
 80006a2:	465a      	mov	r2, fp
 80006a4:	4649      	mov	r1, r9
 80006a6:	4650      	mov	r0, sl
 80006a8:	f7ff fe7a 	bl	80003a0 <__ssputs_r>
 80006ac:	3001      	adds	r0, #1
 80006ae:	d0ec      	beq.n	800068a <_svfiprintf_r+0x11a>
 80006b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80006b2:	782a      	ldrb	r2, [r5, #0]
 80006b4:	4423      	add	r3, r4
 80006b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80006b8:	e781      	b.n	80005be <_svfiprintf_r+0x4e>
 80006ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80006be:	2a09      	cmp	r2, #9
 80006c0:	bf88      	it	hi
 80006c2:	46ab      	movhi	fp, r5
 80006c4:	d8b1      	bhi.n	800062a <_svfiprintf_r+0xba>
 80006c6:	9b07      	ldr	r3, [sp, #28]
 80006c8:	e000      	b.n	80006cc <_svfiprintf_r+0x15c>
 80006ca:	3401      	adds	r4, #1
 80006cc:	7821      	ldrb	r1, [r4, #0]
 80006ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80006d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80006da:	2a09      	cmp	r2, #9
 80006dc:	d9f5      	bls.n	80006ca <_svfiprintf_r+0x15a>
 80006de:	292e      	cmp	r1, #46	@ 0x2e
 80006e0:	46a3      	mov	fp, r4
 80006e2:	9307      	str	r3, [sp, #28]
 80006e4:	d1a3      	bne.n	800062e <_svfiprintf_r+0xbe>
 80006e6:	f89b 1001 	ldrb.w	r1, [fp, #1]
 80006ea:	292a      	cmp	r1, #42	@ 0x2a
 80006ec:	d127      	bne.n	800073e <_svfiprintf_r+0x1ce>
 80006ee:	9b03      	ldr	r3, [sp, #12]
 80006f0:	f10b 0002 	add.w	r0, fp, #2
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	3304      	adds	r3, #4
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	9303      	str	r3, [sp, #12]
 80006fc:	bfb8      	it	lt
 80006fe:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
 8000702:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8000706:	9205      	str	r2, [sp, #20]
 8000708:	4683      	mov	fp, r0
 800070a:	bfb8      	it	lt
 800070c:	9305      	strlt	r3, [sp, #20]
 800070e:	e78e      	b.n	800062e <_svfiprintf_r+0xbe>
 8000710:	9b03      	ldr	r3, [sp, #12]
 8000712:	3307      	adds	r3, #7
 8000714:	f023 0307 	bic.w	r3, r3, #7
 8000718:	3308      	adds	r3, #8
 800071a:	9303      	str	r3, [sp, #12]
 800071c:	e7ae      	b.n	800067c <_svfiprintf_r+0x10c>
 800071e:	4249      	negs	r1, r1
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	9107      	str	r1, [sp, #28]
 8000726:	9304      	str	r3, [sp, #16]
 8000728:	e77e      	b.n	8000628 <_svfiprintf_r+0xb8>
 800072a:	a903      	add	r1, sp, #12
 800072c:	9100      	str	r1, [sp, #0]
 800072e:	464a      	mov	r2, r9
 8000730:	4650      	mov	r0, sl
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <_svfiprintf_r+0x22c>)
 8000734:	a904      	add	r1, sp, #16
 8000736:	f000 fabd 	bl	8000cb4 <_printf_i>
 800073a:	4680      	mov	r8, r0
 800073c:	e79b      	b.n	8000676 <_svfiprintf_r+0x106>
 800073e:	2300      	movs	r3, #0
 8000740:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000744:	2a09      	cmp	r2, #9
 8000746:	f10b 0b01 	add.w	fp, fp, #1
 800074a:	9305      	str	r3, [sp, #20]
 800074c:	f63f af6f 	bhi.w	800062e <_svfiprintf_r+0xbe>
 8000750:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8000754:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000758:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800075c:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000760:	2a09      	cmp	r2, #9
 8000762:	d9f5      	bls.n	8000750 <_svfiprintf_r+0x1e0>
 8000764:	9305      	str	r3, [sp, #20]
 8000766:	e762      	b.n	800062e <_svfiprintf_r+0xbe>
 8000768:	2140      	movs	r1, #64	@ 0x40
 800076a:	f000 f88b 	bl	8000884 <_malloc_r>
 800076e:	f8c9 0000 	str.w	r0, [r9]
 8000772:	f8c9 0010 	str.w	r0, [r9, #16]
 8000776:	b118      	cbz	r0, 8000780 <_svfiprintf_r+0x210>
 8000778:	2340      	movs	r3, #64	@ 0x40
 800077a:	f8c9 3014 	str.w	r3, [r9, #20]
 800077e:	e705      	b.n	800058c <_svfiprintf_r+0x1c>
 8000780:	230c      	movs	r3, #12
 8000782:	f8ca 3000 	str.w	r3, [sl]
 8000786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800078a:	e783      	b.n	8000694 <_svfiprintf_r+0x124>
 800078c:	08007da0 	.word	0x08007da0
 8000790:	08007da8 	.word	0x08007da8
 8000794:	08007dac 	.word	0x08007dac
 8000798:	00000000 	.word	0x00000000
 800079c:	080003a1 	.word	0x080003a1

080007a0 <memchr>:
 80007a0:	fa5f fc81 	uxtb.w	ip, r1
 80007a4:	0781      	lsls	r1, r0, #30
 80007a6:	d044      	beq.n	8000832 <memchr+0x92>
 80007a8:	4603      	mov	r3, r0
 80007aa:	1e51      	subs	r1, r2, #1
 80007ac:	b922      	cbnz	r2, 80007b8 <memchr+0x18>
 80007ae:	e009      	b.n	80007c4 <memchr+0x24>
 80007b0:	079a      	lsls	r2, r3, #30
 80007b2:	d009      	beq.n	80007c8 <memchr+0x28>
 80007b4:	3901      	subs	r1, #1
 80007b6:	d305      	bcc.n	80007c4 <memchr+0x24>
 80007b8:	4618      	mov	r0, r3
 80007ba:	7802      	ldrb	r2, [r0, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4562      	cmp	r2, ip
 80007c0:	d1f6      	bne.n	80007b0 <memchr+0x10>
 80007c2:	4770      	bx	lr
 80007c4:	2000      	movs	r0, #0
 80007c6:	4770      	bx	lr
 80007c8:	4618      	mov	r0, r3
 80007ca:	2903      	cmp	r1, #3
 80007cc:	d80c      	bhi.n	80007e8 <memchr+0x48>
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d0f8      	beq.n	80007c4 <memchr+0x24>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4401      	add	r1, r0
 80007d6:	e001      	b.n	80007dc <memchr+0x3c>
 80007d8:	428b      	cmp	r3, r1
 80007da:	d0f3      	beq.n	80007c4 <memchr+0x24>
 80007dc:	4618      	mov	r0, r3
 80007de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80007e2:	4562      	cmp	r2, ip
 80007e4:	d1f8      	bne.n	80007d8 <memchr+0x38>
 80007e6:	4770      	bx	lr
 80007e8:	b510      	push	{r4, lr}
 80007ea:	eb0c 240c 	add.w	r4, ip, ip, lsl #8
 80007ee:	4602      	mov	r2, r0
 80007f0:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 80007f4:	e002      	b.n	80007fc <memchr+0x5c>
 80007f6:	3904      	subs	r1, #4
 80007f8:	2903      	cmp	r1, #3
 80007fa:	d915      	bls.n	8000828 <memchr+0x88>
 80007fc:	4610      	mov	r0, r2
 80007fe:	f852 3b04 	ldr.w	r3, [r2], #4
 8000802:	4063      	eors	r3, r4
 8000804:	f1a3 3e01 	sub.w	lr, r3, #16843009	@ 0x1010101
 8000808:	ea2e 0303 	bic.w	r3, lr, r3
 800080c:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
 8000810:	d0f1      	beq.n	80007f6 <memchr+0x56>
 8000812:	4603      	mov	r3, r0
 8000814:	4401      	add	r1, r0
 8000816:	e001      	b.n	800081c <memchr+0x7c>
 8000818:	428b      	cmp	r3, r1
 800081a:	d008      	beq.n	800082e <memchr+0x8e>
 800081c:	4618      	mov	r0, r3
 800081e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000822:	4562      	cmp	r2, ip
 8000824:	d1f8      	bne.n	8000818 <memchr+0x78>
 8000826:	bd10      	pop	{r4, pc}
 8000828:	4610      	mov	r0, r2
 800082a:	2900      	cmp	r1, #0
 800082c:	d1f1      	bne.n	8000812 <memchr+0x72>
 800082e:	2000      	movs	r0, #0
 8000830:	bd10      	pop	{r4, pc}
 8000832:	4611      	mov	r1, r2
 8000834:	e7c9      	b.n	80007ca <memchr+0x2a>
 8000836:	bf00      	nop

08000838 <sbrk_aligned>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	4e11      	ldr	r6, [pc, #68]	@ (8000880 <sbrk_aligned+0x48>)
 800083c:	4605      	mov	r5, r0
 800083e:	6833      	ldr	r3, [r6, #0]
 8000840:	460c      	mov	r4, r1
 8000842:	b1bb      	cbz	r3, 8000874 <sbrk_aligned+0x3c>
 8000844:	4621      	mov	r1, r4
 8000846:	4628      	mov	r0, r5
 8000848:	f000 fbf8 	bl	800103c <_sbrk_r>
 800084c:	1c43      	adds	r3, r0, #1
 800084e:	4601      	mov	r1, r0
 8000850:	d00c      	beq.n	800086c <sbrk_aligned+0x34>
 8000852:	1cc4      	adds	r4, r0, #3
 8000854:	f024 0403 	bic.w	r4, r4, #3
 8000858:	42a0      	cmp	r0, r4
 800085a:	d005      	beq.n	8000868 <sbrk_aligned+0x30>
 800085c:	4628      	mov	r0, r5
 800085e:	1a61      	subs	r1, r4, r1
 8000860:	f000 fbec 	bl	800103c <_sbrk_r>
 8000864:	3001      	adds	r0, #1
 8000866:	d001      	beq.n	800086c <sbrk_aligned+0x34>
 8000868:	4620      	mov	r0, r4
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000870:	4620      	mov	r0, r4
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	4619      	mov	r1, r3
 8000876:	f000 fbe1 	bl	800103c <_sbrk_r>
 800087a:	6030      	str	r0, [r6, #0]
 800087c:	e7e2      	b.n	8000844 <sbrk_aligned+0xc>
 800087e:	bf00      	nop
 8000880:	20000334 	.word	0x20000334

08000884 <_malloc_r>:
 8000884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000888:	1ccd      	adds	r5, r1, #3
 800088a:	f025 0503 	bic.w	r5, r5, #3
 800088e:	3508      	adds	r5, #8
 8000890:	2d0c      	cmp	r5, #12
 8000892:	bf38      	it	cc
 8000894:	250c      	movcc	r5, #12
 8000896:	2d00      	cmp	r5, #0
 8000898:	4606      	mov	r6, r0
 800089a:	db18      	blt.n	80008ce <_malloc_r+0x4a>
 800089c:	42a9      	cmp	r1, r5
 800089e:	d816      	bhi.n	80008ce <_malloc_r+0x4a>
 80008a0:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8000980 <_malloc_r+0xfc>
 80008a4:	f000 fb48 	bl	8000f38 <__malloc_lock>
 80008a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80008ac:	b1a2      	cbz	r2, 80008d8 <_malloc_r+0x54>
 80008ae:	4614      	mov	r4, r2
 80008b0:	e003      	b.n	80008ba <_malloc_r+0x36>
 80008b2:	6863      	ldr	r3, [r4, #4]
 80008b4:	4622      	mov	r2, r4
 80008b6:	b17b      	cbz	r3, 80008d8 <_malloc_r+0x54>
 80008b8:	461c      	mov	r4, r3
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	1b5b      	subs	r3, r3, r5
 80008be:	d4f8      	bmi.n	80008b2 <_malloc_r+0x2e>
 80008c0:	2b0b      	cmp	r3, #11
 80008c2:	d81f      	bhi.n	8000904 <_malloc_r+0x80>
 80008c4:	4294      	cmp	r4, r2
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	d054      	beq.n	8000974 <_malloc_r+0xf0>
 80008ca:	6053      	str	r3, [r2, #4]
 80008cc:	e00c      	b.n	80008e8 <_malloc_r+0x64>
 80008ce:	230c      	movs	r3, #12
 80008d0:	6033      	str	r3, [r6, #0]
 80008d2:	2000      	movs	r0, #0
 80008d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008d8:	4629      	mov	r1, r5
 80008da:	4630      	mov	r0, r6
 80008dc:	f7ff ffac 	bl	8000838 <sbrk_aligned>
 80008e0:	1c43      	adds	r3, r0, #1
 80008e2:	4604      	mov	r4, r0
 80008e4:	d019      	beq.n	800091a <_malloc_r+0x96>
 80008e6:	6005      	str	r5, [r0, #0]
 80008e8:	4630      	mov	r0, r6
 80008ea:	f000 fb27 	bl	8000f3c <__malloc_unlock>
 80008ee:	f104 000b 	add.w	r0, r4, #11
 80008f2:	1d23      	adds	r3, r4, #4
 80008f4:	f020 0007 	bic.w	r0, r0, #7
 80008f8:	1ac2      	subs	r2, r0, r3
 80008fa:	bf1c      	itt	ne
 80008fc:	1a1b      	subne	r3, r3, r0
 80008fe:	50a3      	strne	r3, [r4, r2]
 8000900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000904:	1961      	adds	r1, r4, r5
 8000906:	4294      	cmp	r4, r2
 8000908:	6025      	str	r5, [r4, #0]
 800090a:	bf14      	ite	ne
 800090c:	6051      	strne	r1, [r2, #4]
 800090e:	f8c8 1004 	streq.w	r1, [r8, #4]
 8000912:	5163      	str	r3, [r4, r5]
 8000914:	6863      	ldr	r3, [r4, #4]
 8000916:	604b      	str	r3, [r1, #4]
 8000918:	e7e6      	b.n	80008e8 <_malloc_r+0x64>
 800091a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800091e:	b31f      	cbz	r7, 8000968 <_malloc_r+0xe4>
 8000920:	463c      	mov	r4, r7
 8000922:	687f      	ldr	r7, [r7, #4]
 8000924:	2f00      	cmp	r7, #0
 8000926:	d1fb      	bne.n	8000920 <_malloc_r+0x9c>
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	4639      	mov	r1, r7
 800092c:	4630      	mov	r0, r6
 800092e:	eb04 0903 	add.w	r9, r4, r3
 8000932:	f000 fb83 	bl	800103c <_sbrk_r>
 8000936:	4581      	cmp	r9, r0
 8000938:	d116      	bne.n	8000968 <_malloc_r+0xe4>
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	4630      	mov	r0, r6
 800093e:	1aed      	subs	r5, r5, r3
 8000940:	4629      	mov	r1, r5
 8000942:	f7ff ff79 	bl	8000838 <sbrk_aligned>
 8000946:	3001      	adds	r0, #1
 8000948:	d00e      	beq.n	8000968 <_malloc_r+0xe4>
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000950:	442b      	add	r3, r5
 8000952:	6023      	str	r3, [r4, #0]
 8000954:	6853      	ldr	r3, [r2, #4]
 8000956:	b183      	cbz	r3, 800097a <_malloc_r+0xf6>
 8000958:	42a3      	cmp	r3, r4
 800095a:	d003      	beq.n	8000964 <_malloc_r+0xe0>
 800095c:	461a      	mov	r2, r3
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	429c      	cmp	r4, r3
 8000962:	d1fb      	bne.n	800095c <_malloc_r+0xd8>
 8000964:	2300      	movs	r3, #0
 8000966:	e7b0      	b.n	80008ca <_malloc_r+0x46>
 8000968:	230c      	movs	r3, #12
 800096a:	4630      	mov	r0, r6
 800096c:	6033      	str	r3, [r6, #0]
 800096e:	f000 fae5 	bl	8000f3c <__malloc_unlock>
 8000972:	e7ae      	b.n	80008d2 <_malloc_r+0x4e>
 8000974:	f8c8 3004 	str.w	r3, [r8, #4]
 8000978:	e7b6      	b.n	80008e8 <_malloc_r+0x64>
 800097a:	f8c8 7004 	str.w	r7, [r8, #4]
 800097e:	e7b3      	b.n	80008e8 <_malloc_r+0x64>
 8000980:	20000334 	.word	0x20000334

08000984 <memcpy>:
 8000984:	4684      	mov	ip, r0
 8000986:	ea41 0300 	orr.w	r3, r1, r0
 800098a:	f013 0303 	ands.w	r3, r3, #3
 800098e:	d149      	bne.n	8000a24 <memcpy+0xa0>
 8000990:	3a40      	subs	r2, #64	@ 0x40
 8000992:	d323      	bcc.n	80009dc <memcpy+0x58>
 8000994:	680b      	ldr	r3, [r1, #0]
 8000996:	6003      	str	r3, [r0, #0]
 8000998:	684b      	ldr	r3, [r1, #4]
 800099a:	6043      	str	r3, [r0, #4]
 800099c:	688b      	ldr	r3, [r1, #8]
 800099e:	6083      	str	r3, [r0, #8]
 80009a0:	68cb      	ldr	r3, [r1, #12]
 80009a2:	60c3      	str	r3, [r0, #12]
 80009a4:	690b      	ldr	r3, [r1, #16]
 80009a6:	6103      	str	r3, [r0, #16]
 80009a8:	694b      	ldr	r3, [r1, #20]
 80009aa:	6143      	str	r3, [r0, #20]
 80009ac:	698b      	ldr	r3, [r1, #24]
 80009ae:	6183      	str	r3, [r0, #24]
 80009b0:	69cb      	ldr	r3, [r1, #28]
 80009b2:	61c3      	str	r3, [r0, #28]
 80009b4:	6a0b      	ldr	r3, [r1, #32]
 80009b6:	6203      	str	r3, [r0, #32]
 80009b8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80009ba:	6243      	str	r3, [r0, #36]	@ 0x24
 80009bc:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80009be:	6283      	str	r3, [r0, #40]	@ 0x28
 80009c0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80009c2:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80009c4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80009c6:	6303      	str	r3, [r0, #48]	@ 0x30
 80009c8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80009ca:	6343      	str	r3, [r0, #52]	@ 0x34
 80009cc:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80009ce:	6383      	str	r3, [r0, #56]	@ 0x38
 80009d0:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80009d2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80009d4:	3040      	adds	r0, #64	@ 0x40
 80009d6:	3140      	adds	r1, #64	@ 0x40
 80009d8:	3a40      	subs	r2, #64	@ 0x40
 80009da:	d2db      	bcs.n	8000994 <memcpy+0x10>
 80009dc:	3230      	adds	r2, #48	@ 0x30
 80009de:	d30b      	bcc.n	80009f8 <memcpy+0x74>
 80009e0:	680b      	ldr	r3, [r1, #0]
 80009e2:	6003      	str	r3, [r0, #0]
 80009e4:	684b      	ldr	r3, [r1, #4]
 80009e6:	6043      	str	r3, [r0, #4]
 80009e8:	688b      	ldr	r3, [r1, #8]
 80009ea:	6083      	str	r3, [r0, #8]
 80009ec:	68cb      	ldr	r3, [r1, #12]
 80009ee:	60c3      	str	r3, [r0, #12]
 80009f0:	3010      	adds	r0, #16
 80009f2:	3110      	adds	r1, #16
 80009f4:	3a10      	subs	r2, #16
 80009f6:	d2f3      	bcs.n	80009e0 <memcpy+0x5c>
 80009f8:	320c      	adds	r2, #12
 80009fa:	d305      	bcc.n	8000a08 <memcpy+0x84>
 80009fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000a00:	f840 3b04 	str.w	r3, [r0], #4
 8000a04:	3a04      	subs	r2, #4
 8000a06:	d2f9      	bcs.n	80009fc <memcpy+0x78>
 8000a08:	3204      	adds	r2, #4
 8000a0a:	d008      	beq.n	8000a1e <memcpy+0x9a>
 8000a0c:	07d2      	lsls	r2, r2, #31
 8000a0e:	bf1c      	itt	ne
 8000a10:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000a14:	f800 3b01 	strbne.w	r3, [r0], #1
 8000a18:	d301      	bcc.n	8000a1e <memcpy+0x9a>
 8000a1a:	880b      	ldrh	r3, [r1, #0]
 8000a1c:	8003      	strh	r3, [r0, #0]
 8000a1e:	4660      	mov	r0, ip
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2a08      	cmp	r2, #8
 8000a26:	d313      	bcc.n	8000a50 <memcpy+0xcc>
 8000a28:	078b      	lsls	r3, r1, #30
 8000a2a:	d0b1      	beq.n	8000990 <memcpy+0xc>
 8000a2c:	f010 0303 	ands.w	r3, r0, #3
 8000a30:	d0ae      	beq.n	8000990 <memcpy+0xc>
 8000a32:	f1c3 0304 	rsb	r3, r3, #4
 8000a36:	1ad2      	subs	r2, r2, r3
 8000a38:	07db      	lsls	r3, r3, #31
 8000a3a:	bf1c      	itt	ne
 8000a3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000a40:	f800 3b01 	strbne.w	r3, [r0], #1
 8000a44:	d3a4      	bcc.n	8000990 <memcpy+0xc>
 8000a46:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000a4a:	f820 3b02 	strh.w	r3, [r0], #2
 8000a4e:	e79f      	b.n	8000990 <memcpy+0xc>
 8000a50:	3a04      	subs	r2, #4
 8000a52:	d3d9      	bcc.n	8000a08 <memcpy+0x84>
 8000a54:	3a01      	subs	r2, #1
 8000a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a5a:	f800 3b01 	strb.w	r3, [r0], #1
 8000a5e:	d2f9      	bcs.n	8000a54 <memcpy+0xd0>
 8000a60:	780b      	ldrb	r3, [r1, #0]
 8000a62:	7003      	strb	r3, [r0, #0]
 8000a64:	784b      	ldrb	r3, [r1, #1]
 8000a66:	7043      	strb	r3, [r0, #1]
 8000a68:	788b      	ldrb	r3, [r1, #2]
 8000a6a:	7083      	strb	r3, [r0, #2]
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	4770      	bx	lr

08000a70 <_free_r>:
 8000a70:	2900      	cmp	r1, #0
 8000a72:	d050      	beq.n	8000b16 <_free_r+0xa6>
 8000a74:	b538      	push	{r3, r4, r5, lr}
 8000a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a7a:	1f0c      	subs	r4, r1, #4
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bfb8      	it	lt
 8000a80:	18e4      	addlt	r4, r4, r3
 8000a82:	4605      	mov	r5, r0
 8000a84:	f000 fa58 	bl	8000f38 <__malloc_lock>
 8000a88:	4a27      	ldr	r2, [pc, #156]	@ (8000b28 <_free_r+0xb8>)
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	b12b      	cbz	r3, 8000a9a <_free_r+0x2a>
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	d90c      	bls.n	8000aac <_free_r+0x3c>
 8000a92:	6821      	ldr	r1, [r4, #0]
 8000a94:	1860      	adds	r0, r4, r1
 8000a96:	4283      	cmp	r3, r0
 8000a98:	d02c      	beq.n	8000af4 <_free_r+0x84>
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	6063      	str	r3, [r4, #4]
 8000a9e:	6014      	str	r4, [r2, #0]
 8000aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000aa4:	f000 ba4a 	b.w	8000f3c <__malloc_unlock>
 8000aa8:	42a3      	cmp	r3, r4
 8000aaa:	d80f      	bhi.n	8000acc <_free_r+0x5c>
 8000aac:	461a      	mov	r2, r3
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f9      	bne.n	8000aa8 <_free_r+0x38>
 8000ab4:	6811      	ldr	r1, [r2, #0]
 8000ab6:	1850      	adds	r0, r2, r1
 8000ab8:	4284      	cmp	r4, r0
 8000aba:	d017      	beq.n	8000aec <_free_r+0x7c>
 8000abc:	d32c      	bcc.n	8000b18 <_free_r+0xa8>
 8000abe:	6063      	str	r3, [r4, #4]
 8000ac0:	6054      	str	r4, [r2, #4]
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ac8:	f000 ba38 	b.w	8000f3c <__malloc_unlock>
 8000acc:	6811      	ldr	r1, [r2, #0]
 8000ace:	1850      	adds	r0, r2, r1
 8000ad0:	42a0      	cmp	r0, r4
 8000ad2:	d014      	beq.n	8000afe <_free_r+0x8e>
 8000ad4:	d820      	bhi.n	8000b18 <_free_r+0xa8>
 8000ad6:	6821      	ldr	r1, [r4, #0]
 8000ad8:	1860      	adds	r0, r4, r1
 8000ada:	4283      	cmp	r3, r0
 8000adc:	d1ef      	bne.n	8000abe <_free_r+0x4e>
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4408      	add	r0, r1
 8000ae4:	e9c4 0300 	strd	r0, r3, [r4]
 8000ae8:	6054      	str	r4, [r2, #4]
 8000aea:	e7ea      	b.n	8000ac2 <_free_r+0x52>
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	440b      	add	r3, r1
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e7e6      	b.n	8000ac2 <_free_r+0x52>
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4408      	add	r0, r1
 8000afa:	6020      	str	r0, [r4, #0]
 8000afc:	e7cd      	b.n	8000a9a <_free_r+0x2a>
 8000afe:	6820      	ldr	r0, [r4, #0]
 8000b00:	4401      	add	r1, r0
 8000b02:	1850      	adds	r0, r2, r1
 8000b04:	4283      	cmp	r3, r0
 8000b06:	6011      	str	r1, [r2, #0]
 8000b08:	d1db      	bne.n	8000ac2 <_free_r+0x52>
 8000b0a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8000b0e:	4401      	add	r1, r0
 8000b10:	e9c2 1400 	strd	r1, r4, [r2]
 8000b14:	e7d5      	b.n	8000ac2 <_free_r+0x52>
 8000b16:	4770      	bx	lr
 8000b18:	230c      	movs	r3, #12
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	602b      	str	r3, [r5, #0]
 8000b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b22:	f000 ba0b 	b.w	8000f3c <__malloc_unlock>
 8000b26:	bf00      	nop
 8000b28:	20000338 	.word	0x20000338

08000b2c <_realloc_r>:
 8000b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b30:	4614      	mov	r4, r2
 8000b32:	b341      	cbz	r1, 8000b86 <_realloc_r+0x5a>
 8000b34:	b30a      	cbz	r2, 8000b7a <_realloc_r+0x4e>
 8000b36:	4606      	mov	r6, r0
 8000b38:	460d      	mov	r5, r1
 8000b3a:	f000 fa91 	bl	8001060 <_malloc_usable_size_r>
 8000b3e:	4284      	cmp	r4, r0
 8000b40:	4607      	mov	r7, r0
 8000b42:	d802      	bhi.n	8000b4a <_realloc_r+0x1e>
 8000b44:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000b48:	d813      	bhi.n	8000b72 <_realloc_r+0x46>
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4630      	mov	r0, r6
 8000b4e:	f7ff fe99 	bl	8000884 <_malloc_r>
 8000b52:	4680      	mov	r8, r0
 8000b54:	b150      	cbz	r0, 8000b6c <_realloc_r+0x40>
 8000b56:	42bc      	cmp	r4, r7
 8000b58:	4622      	mov	r2, r4
 8000b5a:	4629      	mov	r1, r5
 8000b5c:	bf28      	it	cs
 8000b5e:	463a      	movcs	r2, r7
 8000b60:	f7ff ff10 	bl	8000984 <memcpy>
 8000b64:	4629      	mov	r1, r5
 8000b66:	4630      	mov	r0, r6
 8000b68:	f7ff ff82 	bl	8000a70 <_free_r>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b72:	46a8      	mov	r8, r5
 8000b74:	4640      	mov	r0, r8
 8000b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b7a:	46a0      	mov	r8, r4
 8000b7c:	f7ff ff78 	bl	8000a70 <_free_r>
 8000b80:	4640      	mov	r0, r8
 8000b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b86:	4611      	mov	r1, r2
 8000b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8c:	f7ff be7a 	b.w	8000884 <_malloc_r>

08000b90 <_printf_common>:
 8000b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b94:	4692      	mov	sl, r2
 8000b96:	461f      	mov	r7, r3
 8000b98:	690a      	ldr	r2, [r1, #16]
 8000b9a:	688b      	ldr	r3, [r1, #8]
 8000b9c:	460c      	mov	r4, r1
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	bfb8      	it	lt
 8000ba2:	461a      	movlt	r2, r3
 8000ba4:	f8ca 2000 	str.w	r2, [sl]
 8000ba8:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 8000bac:	4606      	mov	r6, r0
 8000bae:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8000bb2:	b113      	cbz	r3, 8000bba <_printf_common+0x2a>
 8000bb4:	3201      	adds	r2, #1
 8000bb6:	f8ca 2000 	str.w	r2, [sl]
 8000bba:	6822      	ldr	r2, [r4, #0]
 8000bbc:	0691      	lsls	r1, r2, #26
 8000bbe:	d55f      	bpl.n	8000c80 <_printf_common+0xf0>
 8000bc0:	f8da 3000 	ldr.w	r3, [sl]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	f8ca 3000 	str.w	r3, [sl]
 8000bca:	6822      	ldr	r2, [r4, #0]
 8000bcc:	f012 0f06 	tst.w	r2, #6
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	d11d      	bne.n	8000c10 <_printf_common+0x80>
 8000bd4:	68e1      	ldr	r1, [r4, #12]
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	bfd8      	it	le
 8000bda:	4611      	movle	r1, r2
 8000bdc:	dd18      	ble.n	8000c10 <_printf_common+0x80>
 8000bde:	f04f 0800 	mov.w	r8, #0
 8000be2:	f104 0b19 	add.w	fp, r4, #25
 8000be6:	e005      	b.n	8000bf4 <_printf_common+0x64>
 8000be8:	68e5      	ldr	r5, [r4, #12]
 8000bea:	f8da 3000 	ldr.w	r3, [sl]
 8000bee:	1aed      	subs	r5, r5, r3
 8000bf0:	4545      	cmp	r5, r8
 8000bf2:	dd0c      	ble.n	8000c0e <_printf_common+0x7e>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	465a      	mov	r2, fp
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	47c8      	blx	r9
 8000bfe:	3001      	adds	r0, #1
 8000c00:	f108 0801 	add.w	r8, r8, #1
 8000c04:	d1f0      	bne.n	8000be8 <_printf_common+0x58>
 8000c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c0e:	6821      	ldr	r1, [r4, #0]
 8000c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c14:	3b00      	subs	r3, #0
 8000c16:	bf18      	it	ne
 8000c18:	2301      	movne	r3, #1
 8000c1a:	068a      	lsls	r2, r1, #26
 8000c1c:	d50a      	bpl.n	8000c34 <_printf_common+0xa4>
 8000c1e:	2130      	movs	r1, #48	@ 0x30
 8000c20:	18e2      	adds	r2, r4, r3
 8000c22:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c26:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	4422      	add	r2, r4
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c34:	4639      	mov	r1, r7
 8000c36:	4630      	mov	r0, r6
 8000c38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c3c:	47c8      	blx	r9
 8000c3e:	3001      	adds	r0, #1
 8000c40:	d0e1      	beq.n	8000c06 <_printf_common+0x76>
 8000c42:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	f8da 5000 	ldr.w	r5, [sl]
 8000c4c:	f003 0306 	and.w	r3, r3, #6
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	6921      	ldr	r1, [r4, #16]
 8000c54:	d01b      	beq.n	8000c8e <_printf_common+0xfe>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	dd20      	ble.n	8000c9c <_printf_common+0x10c>
 8000c5a:	f04f 0800 	mov.w	r8, #0
 8000c5e:	1a52      	subs	r2, r2, r1
 8000c60:	4490      	add	r8, r2
 8000c62:	2500      	movs	r5, #0
 8000c64:	341a      	adds	r4, #26
 8000c66:	e001      	b.n	8000c6c <_printf_common+0xdc>
 8000c68:	4545      	cmp	r5, r8
 8000c6a:	da17      	bge.n	8000c9c <_printf_common+0x10c>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	4622      	mov	r2, r4
 8000c70:	4639      	mov	r1, r7
 8000c72:	4630      	mov	r0, r6
 8000c74:	47c8      	blx	r9
 8000c76:	3001      	adds	r0, #1
 8000c78:	f105 0501 	add.w	r5, r5, #1
 8000c7c:	d1f4      	bne.n	8000c68 <_printf_common+0xd8>
 8000c7e:	e7c2      	b.n	8000c06 <_printf_common+0x76>
 8000c80:	f012 0f06 	tst.w	r2, #6
 8000c84:	d00d      	beq.n	8000ca2 <_printf_common+0x112>
 8000c86:	3b00      	subs	r3, #0
 8000c88:	bf18      	it	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	e7d2      	b.n	8000c34 <_printf_common+0xa4>
 8000c8e:	1b40      	subs	r0, r0, r5
 8000c90:	428a      	cmp	r2, r1
 8000c92:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8000c96:	dce2      	bgt.n	8000c5e <_printf_common+0xce>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	dce2      	bgt.n	8000c62 <_printf_common+0xd2>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca2:	68e1      	ldr	r1, [r4, #12]
 8000ca4:	f8da 3000 	ldr.w	r3, [sl]
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	bfd8      	it	le
 8000cac:	4611      	movle	r1, r2
 8000cae:	dc96      	bgt.n	8000bde <_printf_common+0x4e>
 8000cb0:	e7ae      	b.n	8000c10 <_printf_common+0x80>
 8000cb2:	bf00      	nop

08000cb4 <_printf_i>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	4617      	mov	r7, r2
 8000cba:	7e0a      	ldrb	r2, [r1, #24]
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4698      	mov	r8, r3
 8000cc4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000cc6:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	d035      	beq.n	8000d3a <_printf_i+0x86>
 8000cce:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8000cd2:	b2d9      	uxtb	r1, r3
 8000cd4:	2920      	cmp	r1, #32
 8000cd6:	d869      	bhi.n	8000dac <_printf_i+0xf8>
 8000cd8:	2b20      	cmp	r3, #32
 8000cda:	d867      	bhi.n	8000dac <_printf_i+0xf8>
 8000cdc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ce0:	006600e6 	.word	0x006600e6
 8000ce4:	00660066 	.word	0x00660066
 8000ce8:	00660066 	.word	0x00660066
 8000cec:	00660066 	.word	0x00660066
 8000cf0:	00660066 	.word	0x00660066
 8000cf4:	00ac0066 	.word	0x00ac0066
 8000cf8:	00660070 	.word	0x00660070
 8000cfc:	00660066 	.word	0x00660066
 8000d00:	00700066 	.word	0x00700066
 8000d04:	00660066 	.word	0x00660066
 8000d08:	00660066 	.word	0x00660066
 8000d0c:	00830021 	.word	0x00830021
 8000d10:	006600c6 	.word	0x006600c6
 8000d14:	00b60066 	.word	0x00b60066
 8000d18:	00830066 	.word	0x00830066
 8000d1c:	00660066 	.word	0x00660066
 8000d20:	00ec      	.short	0x00ec
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	6822      	ldr	r2, [r4, #0]
 8000d26:	1d18      	adds	r0, r3, #4
 8000d28:	6961      	ldr	r1, [r4, #20]
 8000d2a:	6028      	str	r0, [r5, #0]
 8000d2c:	0610      	lsls	r0, r2, #24
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	d402      	bmi.n	8000d38 <_printf_i+0x84>
 8000d32:	0652      	lsls	r2, r2, #25
 8000d34:	f100 80e0 	bmi.w	8000ef8 <_printf_i+0x244>
 8000d38:	6019      	str	r1, [r3, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	46e1      	mov	r9, ip
 8000d3e:	6123      	str	r3, [r4, #16]
 8000d40:	463b      	mov	r3, r7
 8000d42:	4621      	mov	r1, r4
 8000d44:	4630      	mov	r0, r6
 8000d46:	f8cd 8000 	str.w	r8, [sp]
 8000d4a:	aa03      	add	r2, sp, #12
 8000d4c:	f7ff ff20 	bl	8000b90 <_printf_common>
 8000d50:	3001      	adds	r0, #1
 8000d52:	d020      	beq.n	8000d96 <_printf_i+0xe2>
 8000d54:	464a      	mov	r2, r9
 8000d56:	4639      	mov	r1, r7
 8000d58:	4630      	mov	r0, r6
 8000d5a:	6923      	ldr	r3, [r4, #16]
 8000d5c:	47c0      	blx	r8
 8000d5e:	3001      	adds	r0, #1
 8000d60:	d019      	beq.n	8000d96 <_printf_i+0xe2>
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	68e0      	ldr	r0, [r4, #12]
 8000d66:	079b      	lsls	r3, r3, #30
 8000d68:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8000d6c:	d518      	bpl.n	8000da0 <_printf_i+0xec>
 8000d6e:	4548      	cmp	r0, r9
 8000d70:	dd16      	ble.n	8000da0 <_printf_i+0xec>
 8000d72:	2500      	movs	r5, #0
 8000d74:	f104 0a19 	add.w	sl, r4, #25
 8000d78:	e004      	b.n	8000d84 <_printf_i+0xd0>
 8000d7a:	68e0      	ldr	r0, [r4, #12]
 8000d7c:	eba0 0309 	sub.w	r3, r0, r9
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	dd0d      	ble.n	8000da0 <_printf_i+0xec>
 8000d84:	2301      	movs	r3, #1
 8000d86:	4652      	mov	r2, sl
 8000d88:	4639      	mov	r1, r7
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	47c0      	blx	r8
 8000d8e:	3001      	adds	r0, #1
 8000d90:	f105 0501 	add.w	r5, r5, #1
 8000d94:	d1f1      	bne.n	8000d7a <_printf_i+0xc6>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d9a:	b004      	add	sp, #16
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	4548      	cmp	r0, r9
 8000da2:	bfb8      	it	lt
 8000da4:	4648      	movlt	r0, r9
 8000da6:	b004      	add	sp, #16
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	2001      	movs	r0, #1
 8000dae:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8000db2:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8000db6:	2300      	movs	r3, #0
 8000db8:	6120      	str	r0, [r4, #16]
 8000dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dbe:	e7bf      	b.n	8000d40 <_printf_i+0x8c>
 8000dc0:	682a      	ldr	r2, [r5, #0]
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	1d11      	adds	r1, r2, #4
 8000dc6:	0618      	lsls	r0, r3, #24
 8000dc8:	6029      	str	r1, [r5, #0]
 8000dca:	d402      	bmi.n	8000dd2 <_printf_i+0x11e>
 8000dcc:	0659      	lsls	r1, r3, #25
 8000dce:	f100 8095 	bmi.w	8000efc <_printf_i+0x248>
 8000dd2:	6810      	ldr	r0, [r2, #0]
 8000dd4:	4601      	mov	r1, r0
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	6862      	ldr	r2, [r4, #4]
 8000dda:	f2c0 8093 	blt.w	8000f04 <_printf_i+0x250>
 8000dde:	f04f 0e0a 	mov.w	lr, #10
 8000de2:	4853      	ldr	r0, [pc, #332]	@ (8000f30 <_printf_i+0x27c>)
 8000de4:	e015      	b.n	8000e12 <_printf_i+0x15e>
 8000de6:	6820      	ldr	r0, [r4, #0]
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8000dee:	f853 1b04 	ldr.w	r1, [r3], #4
 8000df2:	d102      	bne.n	8000dfa <_printf_i+0x146>
 8000df4:	0640      	lsls	r0, r0, #25
 8000df6:	bf48      	it	mi
 8000df8:	b289      	uxthmi	r1, r1
 8000dfa:	2a6f      	cmp	r2, #111	@ 0x6f
 8000dfc:	bf14      	ite	ne
 8000dfe:	f04f 0e0a 	movne.w	lr, #10
 8000e02:	f04f 0e08 	moveq.w	lr, #8
 8000e06:	484a      	ldr	r0, [pc, #296]	@ (8000f30 <_printf_i+0x27c>)
 8000e08:	602b      	str	r3, [r5, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	6862      	ldr	r2, [r4, #4]
 8000e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	60a2      	str	r2, [r4, #8]
 8000e16:	db51      	blt.n	8000ebc <_printf_i+0x208>
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	f023 0304 	bic.w	r3, r3, #4
 8000e1e:	6023      	str	r3, [r4, #0]
 8000e20:	2900      	cmp	r1, #0
 8000e22:	d14b      	bne.n	8000ebc <_printf_i+0x208>
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	d17b      	bne.n	8000f20 <_printf_i+0x26c>
 8000e28:	46e1      	mov	r9, ip
 8000e2a:	f1be 0f08 	cmp.w	lr, #8
 8000e2e:	d056      	beq.n	8000ede <_printf_i+0x22a>
 8000e30:	ebac 0309 	sub.w	r3, ip, r9
 8000e34:	6123      	str	r3, [r4, #16]
 8000e36:	e783      	b.n	8000d40 <_printf_i+0x8c>
 8000e38:	682a      	ldr	r2, [r5, #0]
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	6811      	ldr	r1, [r2, #0]
 8000e3e:	3204      	adds	r2, #4
 8000e40:	602a      	str	r2, [r5, #0]
 8000e42:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8000e46:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
 8000e4a:	e7b4      	b.n	8000db6 <_printf_i+0x102>
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	1d1a      	adds	r2, r3, #4
 8000e52:	602a      	str	r2, [r5, #0]
 8000e54:	f8d3 9000 	ldr.w	r9, [r3]
 8000e58:	6862      	ldr	r2, [r4, #4]
 8000e5a:	4648      	mov	r0, r9
 8000e5c:	f7ff fca0 	bl	80007a0 <memchr>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d063      	beq.n	8000f2c <_printf_i+0x278>
 8000e64:	eba0 0009 	sub.w	r0, r0, r9
 8000e68:	6060      	str	r0, [r4, #4]
 8000e6a:	e7a4      	b.n	8000db6 <_printf_i+0x102>
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	6023      	str	r3, [r4, #0]
 8000e74:	2278      	movs	r2, #120	@ 0x78
 8000e76:	482f      	ldr	r0, [pc, #188]	@ (8000f34 <_printf_i+0x280>)
 8000e78:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8000e7c:	682a      	ldr	r2, [r5, #0]
 8000e7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e82:	f852 1b04 	ldr.w	r1, [r2], #4
 8000e86:	d103      	bne.n	8000e90 <_printf_i+0x1dc>
 8000e88:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000e8c:	bf18      	it	ne
 8000e8e:	b289      	uxthne	r1, r1
 8000e90:	602a      	str	r2, [r5, #0]
 8000e92:	07da      	lsls	r2, r3, #31
 8000e94:	bf44      	itt	mi
 8000e96:	f043 0320 	orrmi.w	r3, r3, #32
 8000e9a:	6023      	strmi	r3, [r4, #0]
 8000e9c:	b919      	cbnz	r1, 8000ea6 <_printf_i+0x1f2>
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f023 0320 	bic.w	r3, r3, #32
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	f04f 0e10 	mov.w	lr, #16
 8000eaa:	e7ae      	b.n	8000e0a <_printf_i+0x156>
 8000eac:	2358      	movs	r3, #88	@ 0x58
 8000eae:	4820      	ldr	r0, [pc, #128]	@ (8000f30 <_printf_i+0x27c>)
 8000eb0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	e7e1      	b.n	8000e7c <_printf_i+0x1c8>
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	e7db      	b.n	8000e74 <_printf_i+0x1c0>
 8000ebc:	4675      	mov	r5, lr
 8000ebe:	46e1      	mov	r9, ip
 8000ec0:	fbb1 f3f5 	udiv	r3, r1, r5
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	fb05 1a13 	mls	sl, r5, r3, r1
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f810 300a 	ldrb.w	r3, [r0, sl]
 8000ed0:	42aa      	cmp	r2, r5
 8000ed2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8000ed6:	d2f3      	bcs.n	8000ec0 <_printf_i+0x20c>
 8000ed8:	f1be 0f08 	cmp.w	lr, #8
 8000edc:	d1a8      	bne.n	8000e30 <_printf_i+0x17c>
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	07dd      	lsls	r5, r3, #31
 8000ee2:	d5a5      	bpl.n	8000e30 <_printf_i+0x17c>
 8000ee4:	6862      	ldr	r2, [r4, #4]
 8000ee6:	6923      	ldr	r3, [r4, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dca1      	bgt.n	8000e30 <_printf_i+0x17c>
 8000eec:	2330      	movs	r3, #48	@ 0x30
 8000eee:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8000ef2:	f889 3000 	strb.w	r3, [r9]
 8000ef6:	e79b      	b.n	8000e30 <_printf_i+0x17c>
 8000ef8:	8019      	strh	r1, [r3, #0]
 8000efa:	e71e      	b.n	8000d3a <_printf_i+0x86>
 8000efc:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000f00:	4608      	mov	r0, r1
 8000f02:	e768      	b.n	8000dd6 <_printf_i+0x122>
 8000f04:	202d      	movs	r0, #45	@ 0x2d
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	60a2      	str	r2, [r4, #8]
 8000f0a:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8000f0e:	db02      	blt.n	8000f16 <_printf_i+0x262>
 8000f10:	f023 0304 	bic.w	r3, r3, #4
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	250a      	movs	r5, #10
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <_printf_i+0x27c>)
 8000f1a:	46ae      	mov	lr, r5
 8000f1c:	4249      	negs	r1, r1
 8000f1e:	e7ce      	b.n	8000ebe <_printf_i+0x20a>
 8000f20:	7803      	ldrb	r3, [r0, #0]
 8000f22:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8000f26:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f2a:	e77e      	b.n	8000e2a <_printf_i+0x176>
 8000f2c:	6860      	ldr	r0, [r4, #4]
 8000f2e:	e742      	b.n	8000db6 <_printf_i+0x102>
 8000f30:	08007db4 	.word	0x08007db4
 8000f34:	08007dc8 	.word	0x08007dc8

08000f38 <__malloc_lock>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <__malloc_unlock>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <memmove>:
 8000f40:	4288      	cmp	r0, r1
 8000f42:	d90e      	bls.n	8000f62 <memmove+0x22>
 8000f44:	188b      	adds	r3, r1, r2
 8000f46:	4283      	cmp	r3, r0
 8000f48:	d90b      	bls.n	8000f62 <memmove+0x22>
 8000f4a:	eb00 0c02 	add.w	ip, r0, r2
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	d06d      	beq.n	800102e <memmove+0xee>
 8000f52:	4662      	mov	r2, ip
 8000f54:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8000f5e:	d1f9      	bne.n	8000f54 <memmove+0x14>
 8000f60:	4770      	bx	lr
 8000f62:	2a0f      	cmp	r2, #15
 8000f64:	d80f      	bhi.n	8000f86 <memmove+0x46>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	d05e      	beq.n	800102e <memmove+0xee>
 8000f70:	f10c 0c01 	add.w	ip, ip, #1
 8000f74:	3b01      	subs	r3, #1
 8000f76:	448c      	add	ip, r1
 8000f78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f7c:	4561      	cmp	r1, ip
 8000f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f82:	d1f9      	bne.n	8000f78 <memmove+0x38>
 8000f84:	4770      	bx	lr
 8000f86:	ea40 0301 	orr.w	r3, r0, r1
 8000f8a:	079b      	lsls	r3, r3, #30
 8000f8c:	d150      	bne.n	8001030 <memmove+0xf0>
 8000f8e:	f1a2 0310 	sub.w	r3, r2, #16
 8000f92:	b570      	push	{r4, r5, r6, lr}
 8000f94:	f101 0c20 	add.w	ip, r1, #32
 8000f98:	f023 050f 	bic.w	r5, r3, #15
 8000f9c:	f101 0e10 	add.w	lr, r1, #16
 8000fa0:	f100 0410 	add.w	r4, r0, #16
 8000fa4:	44ac      	add	ip, r5
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8000fac:	f10e 0e10 	add.w	lr, lr, #16
 8000fb0:	f844 5c10 	str.w	r5, [r4, #-16]
 8000fb4:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
 8000fb8:	3410      	adds	r4, #16
 8000fba:	f844 5c1c 	str.w	r5, [r4, #-28]
 8000fbe:	f85e 5c18 	ldr.w	r5, [lr, #-24]
 8000fc2:	f844 5c18 	str.w	r5, [r4, #-24]
 8000fc6:	f85e 5c14 	ldr.w	r5, [lr, #-20]
 8000fca:	45e6      	cmp	lr, ip
 8000fcc:	f844 5c14 	str.w	r5, [r4, #-20]
 8000fd0:	d1ea      	bne.n	8000fa8 <memmove+0x68>
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f012 0f0c 	tst.w	r2, #12
 8000fd8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8000fdc:	f002 040f 	and.w	r4, r2, #15
 8000fe0:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8000fe4:	d028      	beq.n	8001038 <memmove+0xf8>
 8000fe6:	468e      	mov	lr, r1
 8000fe8:	3c04      	subs	r4, #4
 8000fea:	f024 0603 	bic.w	r6, r4, #3
 8000fee:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8000ff2:	441e      	add	r6, r3
 8000ff4:	1f1c      	subs	r4, r3, #4
 8000ff6:	f85e 5b04 	ldr.w	r5, [lr], #4
 8000ffa:	f844 5f04 	str.w	r5, [r4, #4]!
 8000ffe:	42b4      	cmp	r4, r6
 8001000:	d1f9      	bne.n	8000ff6 <memmove+0xb6>
 8001002:	f10c 0401 	add.w	r4, ip, #1
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800100e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001012:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8001016:	b14a      	cbz	r2, 800102c <memmove+0xec>
 8001018:	f10c 0c01 	add.w	ip, ip, #1
 800101c:	3b01      	subs	r3, #1
 800101e:	448c      	add	ip, r1
 8001020:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001024:	4561      	cmp	r1, ip
 8001026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800102a:	d1f9      	bne.n	8001020 <memmove+0xe0>
 800102c:	bd70      	pop	{r4, r5, r6, pc}
 800102e:	4770      	bx	lr
 8001030:	4603      	mov	r3, r0
 8001032:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8001036:	e79b      	b.n	8000f70 <memmove+0x30>
 8001038:	4622      	mov	r2, r4
 800103a:	e7ea      	b.n	8001012 <memmove+0xd2>

0800103c <_sbrk_r>:
 800103c:	2200      	movs	r2, #0
 800103e:	b538      	push	{r3, r4, r5, lr}
 8001040:	4d06      	ldr	r5, [pc, #24]	@ (800105c <_sbrk_r+0x20>)
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	602a      	str	r2, [r5, #0]
 8001048:	f005 fbc2 	bl	80067d0 <_sbrk>
 800104c:	1c43      	adds	r3, r0, #1
 800104e:	d000      	beq.n	8001052 <_sbrk_r+0x16>
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0fb      	beq.n	8001050 <_sbrk_r+0x14>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	2000033c 	.word	0x2000033c

08001060 <_malloc_usable_size_r>:
 8001060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001064:	1f18      	subs	r0, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfbc      	itt	lt
 800106a:	580b      	ldrlt	r3, [r1, r0]
 800106c:	18c0      	addlt	r0, r0, r3
 800106e:	4770      	bx	lr

08001070 <__aeabi_drsub>:
 8001070:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8001074:	e002      	b.n	800107c <__adddf3>
 8001076:	bf00      	nop

08001078 <__aeabi_dsub>:
 8001078:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800107c <__adddf3>:
 800107c:	b530      	push	{r4, r5, lr}
 800107e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001082:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001086:	ea94 0f05 	teq	r4, r5
 800108a:	bf08      	it	eq
 800108c:	ea90 0f02 	teqeq	r0, r2
 8001090:	bf1f      	itttt	ne
 8001092:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001096:	ea55 0c02 	orrsne.w	ip, r5, r2
 800109a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800109e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80010a2:	f000 80e2 	beq.w	800126a <__adddf3+0x1ee>
 80010a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80010aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80010ae:	bfb8      	it	lt
 80010b0:	426d      	neglt	r5, r5
 80010b2:	dd0c      	ble.n	80010ce <__adddf3+0x52>
 80010b4:	442c      	add	r4, r5
 80010b6:	ea80 0202 	eor.w	r2, r0, r2
 80010ba:	ea81 0303 	eor.w	r3, r1, r3
 80010be:	ea82 0000 	eor.w	r0, r2, r0
 80010c2:	ea83 0101 	eor.w	r1, r3, r1
 80010c6:	ea80 0202 	eor.w	r2, r0, r2
 80010ca:	ea81 0303 	eor.w	r3, r1, r3
 80010ce:	2d36      	cmp	r5, #54	@ 0x36
 80010d0:	bf88      	it	hi
 80010d2:	bd30      	pophi	{r4, r5, pc}
 80010d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80010d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80010dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80010e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80010e4:	d002      	beq.n	80010ec <__adddf3+0x70>
 80010e6:	4240      	negs	r0, r0
 80010e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80010f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80010f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80010f8:	d002      	beq.n	8001100 <__adddf3+0x84>
 80010fa:	4252      	negs	r2, r2
 80010fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001100:	ea94 0f05 	teq	r4, r5
 8001104:	f000 80a7 	beq.w	8001256 <__adddf3+0x1da>
 8001108:	f1a4 0401 	sub.w	r4, r4, #1
 800110c:	f1d5 0e20 	rsbs	lr, r5, #32
 8001110:	db0d      	blt.n	800112e <__adddf3+0xb2>
 8001112:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001116:	fa22 f205 	lsr.w	r2, r2, r5
 800111a:	1880      	adds	r0, r0, r2
 800111c:	f141 0100 	adc.w	r1, r1, #0
 8001120:	fa03 f20e 	lsl.w	r2, r3, lr
 8001124:	1880      	adds	r0, r0, r2
 8001126:	fa43 f305 	asr.w	r3, r3, r5
 800112a:	4159      	adcs	r1, r3
 800112c:	e00e      	b.n	800114c <__adddf3+0xd0>
 800112e:	f1a5 0520 	sub.w	r5, r5, #32
 8001132:	f10e 0e20 	add.w	lr, lr, #32
 8001136:	2a01      	cmp	r2, #1
 8001138:	fa03 fc0e 	lsl.w	ip, r3, lr
 800113c:	bf28      	it	cs
 800113e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8001142:	fa43 f305 	asr.w	r3, r3, r5
 8001146:	18c0      	adds	r0, r0, r3
 8001148:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800114c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001150:	d507      	bpl.n	8001162 <__adddf3+0xe6>
 8001152:	f04f 0e00 	mov.w	lr, #0
 8001156:	f1dc 0c00 	rsbs	ip, ip, #0
 800115a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800115e:	eb6e 0101 	sbc.w	r1, lr, r1
 8001162:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8001166:	d31b      	bcc.n	80011a0 <__adddf3+0x124>
 8001168:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800116c:	d30c      	bcc.n	8001188 <__adddf3+0x10c>
 800116e:	0849      	lsrs	r1, r1, #1
 8001170:	ea5f 0030 	movs.w	r0, r0, rrx
 8001174:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001178:	f104 0401 	add.w	r4, r4, #1
 800117c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001180:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8001184:	f080 809a 	bcs.w	80012bc <__adddf3+0x240>
 8001188:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800118c:	bf08      	it	eq
 800118e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001192:	f150 0000 	adcs.w	r0, r0, #0
 8001196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800119a:	ea41 0105 	orr.w	r1, r1, r5
 800119e:	bd30      	pop	{r4, r5, pc}
 80011a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80011a4:	4140      	adcs	r0, r0
 80011a6:	eb41 0101 	adc.w	r1, r1, r1
 80011aa:	3c01      	subs	r4, #1
 80011ac:	bf28      	it	cs
 80011ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80011b2:	d2e9      	bcs.n	8001188 <__adddf3+0x10c>
 80011b4:	f091 0f00 	teq	r1, #0
 80011b8:	bf04      	itt	eq
 80011ba:	4601      	moveq	r1, r0
 80011bc:	2000      	moveq	r0, #0
 80011be:	fab1 f381 	clz	r3, r1
 80011c2:	bf08      	it	eq
 80011c4:	3320      	addeq	r3, #32
 80011c6:	f1a3 030b 	sub.w	r3, r3, #11
 80011ca:	f1b3 0220 	subs.w	r2, r3, #32
 80011ce:	da0c      	bge.n	80011ea <__adddf3+0x16e>
 80011d0:	320c      	adds	r2, #12
 80011d2:	dd08      	ble.n	80011e6 <__adddf3+0x16a>
 80011d4:	f102 0c14 	add.w	ip, r2, #20
 80011d8:	f1c2 020c 	rsb	r2, r2, #12
 80011dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80011e0:	fa21 f102 	lsr.w	r1, r1, r2
 80011e4:	e00c      	b.n	8001200 <__adddf3+0x184>
 80011e6:	f102 0214 	add.w	r2, r2, #20
 80011ea:	bfd8      	it	le
 80011ec:	f1c2 0c20 	rsble	ip, r2, #32
 80011f0:	fa01 f102 	lsl.w	r1, r1, r2
 80011f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80011f8:	bfdc      	itt	le
 80011fa:	ea41 010c 	orrle.w	r1, r1, ip
 80011fe:	4090      	lslle	r0, r2
 8001200:	1ae4      	subs	r4, r4, r3
 8001202:	bfa2      	ittt	ge
 8001204:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001208:	4329      	orrge	r1, r5
 800120a:	bd30      	popge	{r4, r5, pc}
 800120c:	ea6f 0404 	mvn.w	r4, r4
 8001210:	3c1f      	subs	r4, #31
 8001212:	da1c      	bge.n	800124e <__adddf3+0x1d2>
 8001214:	340c      	adds	r4, #12
 8001216:	dc0e      	bgt.n	8001236 <__adddf3+0x1ba>
 8001218:	f104 0414 	add.w	r4, r4, #20
 800121c:	f1c4 0220 	rsb	r2, r4, #32
 8001220:	fa20 f004 	lsr.w	r0, r0, r4
 8001224:	fa01 f302 	lsl.w	r3, r1, r2
 8001228:	ea40 0003 	orr.w	r0, r0, r3
 800122c:	fa21 f304 	lsr.w	r3, r1, r4
 8001230:	ea45 0103 	orr.w	r1, r5, r3
 8001234:	bd30      	pop	{r4, r5, pc}
 8001236:	f1c4 040c 	rsb	r4, r4, #12
 800123a:	f1c4 0220 	rsb	r2, r4, #32
 800123e:	fa20 f002 	lsr.w	r0, r0, r2
 8001242:	fa01 f304 	lsl.w	r3, r1, r4
 8001246:	ea40 0003 	orr.w	r0, r0, r3
 800124a:	4629      	mov	r1, r5
 800124c:	bd30      	pop	{r4, r5, pc}
 800124e:	fa21 f004 	lsr.w	r0, r1, r4
 8001252:	4629      	mov	r1, r5
 8001254:	bd30      	pop	{r4, r5, pc}
 8001256:	f094 0f00 	teq	r4, #0
 800125a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800125e:	bf06      	itte	eq
 8001260:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8001264:	3401      	addeq	r4, #1
 8001266:	3d01      	subne	r5, #1
 8001268:	e74e      	b.n	8001108 <__adddf3+0x8c>
 800126a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800126e:	bf18      	it	ne
 8001270:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001274:	d029      	beq.n	80012ca <__adddf3+0x24e>
 8001276:	ea94 0f05 	teq	r4, r5
 800127a:	bf08      	it	eq
 800127c:	ea90 0f02 	teqeq	r0, r2
 8001280:	d005      	beq.n	800128e <__adddf3+0x212>
 8001282:	ea54 0c00 	orrs.w	ip, r4, r0
 8001286:	bf04      	itt	eq
 8001288:	4619      	moveq	r1, r3
 800128a:	4610      	moveq	r0, r2
 800128c:	bd30      	pop	{r4, r5, pc}
 800128e:	ea91 0f03 	teq	r1, r3
 8001292:	bf1e      	ittt	ne
 8001294:	2100      	movne	r1, #0
 8001296:	2000      	movne	r0, #0
 8001298:	bd30      	popne	{r4, r5, pc}
 800129a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800129e:	d105      	bne.n	80012ac <__adddf3+0x230>
 80012a0:	0040      	lsls	r0, r0, #1
 80012a2:	4149      	adcs	r1, r1
 80012a4:	bf28      	it	cs
 80012a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80012aa:	bd30      	pop	{r4, r5, pc}
 80012ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80012b0:	bf3c      	itt	cc
 80012b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80012b6:	bd30      	popcc	{r4, r5, pc}
 80012b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80012bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80012c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80012c4:	f04f 0000 	mov.w	r0, #0
 80012c8:	bd30      	pop	{r4, r5, pc}
 80012ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80012ce:	bf1a      	itte	ne
 80012d0:	4619      	movne	r1, r3
 80012d2:	4610      	movne	r0, r2
 80012d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80012d8:	bf1c      	itt	ne
 80012da:	460b      	movne	r3, r1
 80012dc:	4602      	movne	r2, r0
 80012de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80012e2:	bf06      	itte	eq
 80012e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80012e8:	ea91 0f03 	teqeq	r1, r3
 80012ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80012f0:	bd30      	pop	{r4, r5, pc}
 80012f2:	bf00      	nop

080012f4 <__aeabi_ui2d>:
 80012f4:	f090 0f00 	teq	r0, #0
 80012f8:	bf04      	itt	eq
 80012fa:	2100      	moveq	r1, #0
 80012fc:	4770      	bxeq	lr
 80012fe:	b530      	push	{r4, r5, lr}
 8001300:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8001304:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8001308:	f04f 0500 	mov.w	r5, #0
 800130c:	f04f 0100 	mov.w	r1, #0
 8001310:	e750      	b.n	80011b4 <__adddf3+0x138>
 8001312:	bf00      	nop

08001314 <__aeabi_i2d>:
 8001314:	f090 0f00 	teq	r0, #0
 8001318:	bf04      	itt	eq
 800131a:	2100      	moveq	r1, #0
 800131c:	4770      	bxeq	lr
 800131e:	b530      	push	{r4, r5, lr}
 8001320:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8001324:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8001328:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800132c:	bf48      	it	mi
 800132e:	4240      	negmi	r0, r0
 8001330:	f04f 0100 	mov.w	r1, #0
 8001334:	e73e      	b.n	80011b4 <__adddf3+0x138>
 8001336:	bf00      	nop

08001338 <__aeabi_f2d>:
 8001338:	0042      	lsls	r2, r0, #1
 800133a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800133e:	ea4f 0131 	mov.w	r1, r1, rrx
 8001342:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8001346:	bf1f      	itttt	ne
 8001348:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800134c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8001350:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8001354:	4770      	bxne	lr
 8001356:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800135a:	bf08      	it	eq
 800135c:	4770      	bxeq	lr
 800135e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8001362:	bf04      	itt	eq
 8001364:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8001368:	4770      	bxeq	lr
 800136a:	b530      	push	{r4, r5, lr}
 800136c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8001370:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001374:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8001378:	e71c      	b.n	80011b4 <__adddf3+0x138>
 800137a:	bf00      	nop

0800137c <__aeabi_ul2d>:
 800137c:	ea50 0201 	orrs.w	r2, r0, r1
 8001380:	bf08      	it	eq
 8001382:	4770      	bxeq	lr
 8001384:	b530      	push	{r4, r5, lr}
 8001386:	f04f 0500 	mov.w	r5, #0
 800138a:	e00a      	b.n	80013a2 <__aeabi_l2d+0x16>

0800138c <__aeabi_l2d>:
 800138c:	ea50 0201 	orrs.w	r2, r0, r1
 8001390:	bf08      	it	eq
 8001392:	4770      	bxeq	lr
 8001394:	b530      	push	{r4, r5, lr}
 8001396:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800139a:	d502      	bpl.n	80013a2 <__aeabi_l2d+0x16>
 800139c:	4240      	negs	r0, r0
 800139e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80013a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80013a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80013aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80013ae:	f43f aed8 	beq.w	8001162 <__adddf3+0xe6>
 80013b2:	f04f 0203 	mov.w	r2, #3
 80013b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80013ba:	bf18      	it	ne
 80013bc:	3203      	addne	r2, #3
 80013be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80013c2:	bf18      	it	ne
 80013c4:	3203      	addne	r2, #3
 80013c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80013d2:	fa20 f002 	lsr.w	r0, r0, r2
 80013d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80013da:	ea40 000e 	orr.w	r0, r0, lr
 80013de:	fa21 f102 	lsr.w	r1, r1, r2
 80013e2:	4414      	add	r4, r2
 80013e4:	e6bd      	b.n	8001162 <__adddf3+0xe6>
 80013e6:	bf00      	nop

080013e8 <__aeabi_dmul>:
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80013ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80013f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80013f6:	bf1d      	ittte	ne
 80013f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80013fc:	ea94 0f0c 	teqne	r4, ip
 8001400:	ea95 0f0c 	teqne	r5, ip
 8001404:	f000 f8de 	bleq	80015c4 <__aeabi_dmul+0x1dc>
 8001408:	442c      	add	r4, r5
 800140a:	ea81 0603 	eor.w	r6, r1, r3
 800140e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001412:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001416:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800141a:	bf18      	it	ne
 800141c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001420:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8001424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001428:	d038      	beq.n	800149c <__aeabi_dmul+0xb4>
 800142a:	fba0 ce02 	umull	ip, lr, r0, r2
 800142e:	f04f 0500 	mov.w	r5, #0
 8001432:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001436:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800143a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800143e:	f04f 0600 	mov.w	r6, #0
 8001442:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001446:	f09c 0f00 	teq	ip, #0
 800144a:	bf18      	it	ne
 800144c:	f04e 0e01 	orrne.w	lr, lr, #1
 8001450:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8001454:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8001458:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800145c:	d204      	bcs.n	8001468 <__aeabi_dmul+0x80>
 800145e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001462:	416d      	adcs	r5, r5
 8001464:	eb46 0606 	adc.w	r6, r6, r6
 8001468:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800146c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001470:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001474:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001478:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800147c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8001480:	bf88      	it	hi
 8001482:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8001486:	d81e      	bhi.n	80014c6 <__aeabi_dmul+0xde>
 8001488:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800148c:	bf08      	it	eq
 800148e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001492:	f150 0000 	adcs.w	r0, r0, #0
 8001496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800149a:	bd70      	pop	{r4, r5, r6, pc}
 800149c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80014a0:	ea46 0101 	orr.w	r1, r6, r1
 80014a4:	ea40 0002 	orr.w	r0, r0, r2
 80014a8:	ea81 0103 	eor.w	r1, r1, r3
 80014ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80014b0:	bfc2      	ittt	gt
 80014b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80014b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80014ba:	bd70      	popgt	{r4, r5, r6, pc}
 80014bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80014c0:	f04f 0e00 	mov.w	lr, #0
 80014c4:	3c01      	subs	r4, #1
 80014c6:	f300 80ab 	bgt.w	8001620 <__aeabi_dmul+0x238>
 80014ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80014ce:	bfde      	ittt	le
 80014d0:	2000      	movle	r0, #0
 80014d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80014d6:	bd70      	pople	{r4, r5, r6, pc}
 80014d8:	f1c4 0400 	rsb	r4, r4, #0
 80014dc:	3c20      	subs	r4, #32
 80014de:	da35      	bge.n	800154c <__aeabi_dmul+0x164>
 80014e0:	340c      	adds	r4, #12
 80014e2:	dc1b      	bgt.n	800151c <__aeabi_dmul+0x134>
 80014e4:	f104 0414 	add.w	r4, r4, #20
 80014e8:	f1c4 0520 	rsb	r5, r4, #32
 80014ec:	fa00 f305 	lsl.w	r3, r0, r5
 80014f0:	fa20 f004 	lsr.w	r0, r0, r4
 80014f4:	fa01 f205 	lsl.w	r2, r1, r5
 80014f8:	ea40 0002 	orr.w	r0, r0, r2
 80014fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8001500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8001504:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001508:	fa21 f604 	lsr.w	r6, r1, r4
 800150c:	eb42 0106 	adc.w	r1, r2, r6
 8001510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001514:	bf08      	it	eq
 8001516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800151a:	bd70      	pop	{r4, r5, r6, pc}
 800151c:	f1c4 040c 	rsb	r4, r4, #12
 8001520:	f1c4 0520 	rsb	r5, r4, #32
 8001524:	fa00 f304 	lsl.w	r3, r0, r4
 8001528:	fa20 f005 	lsr.w	r0, r0, r5
 800152c:	fa01 f204 	lsl.w	r2, r1, r4
 8001530:	ea40 0002 	orr.w	r0, r0, r2
 8001534:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8001538:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800153c:	f141 0100 	adc.w	r1, r1, #0
 8001540:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001544:	bf08      	it	eq
 8001546:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800154a:	bd70      	pop	{r4, r5, r6, pc}
 800154c:	f1c4 0520 	rsb	r5, r4, #32
 8001550:	fa00 f205 	lsl.w	r2, r0, r5
 8001554:	ea4e 0e02 	orr.w	lr, lr, r2
 8001558:	fa20 f304 	lsr.w	r3, r0, r4
 800155c:	fa01 f205 	lsl.w	r2, r1, r5
 8001560:	ea43 0302 	orr.w	r3, r3, r2
 8001564:	fa21 f004 	lsr.w	r0, r1, r4
 8001568:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800156c:	fa21 f204 	lsr.w	r2, r1, r4
 8001570:	ea20 0002 	bic.w	r0, r0, r2
 8001574:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001578:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800157c:	bf08      	it	eq
 800157e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001582:	bd70      	pop	{r4, r5, r6, pc}
 8001584:	f094 0f00 	teq	r4, #0
 8001588:	d10f      	bne.n	80015aa <__aeabi_dmul+0x1c2>
 800158a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800158e:	0040      	lsls	r0, r0, #1
 8001590:	eb41 0101 	adc.w	r1, r1, r1
 8001594:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8001598:	bf08      	it	eq
 800159a:	3c01      	subeq	r4, #1
 800159c:	d0f7      	beq.n	800158e <__aeabi_dmul+0x1a6>
 800159e:	ea41 0106 	orr.w	r1, r1, r6
 80015a2:	f095 0f00 	teq	r5, #0
 80015a6:	bf18      	it	ne
 80015a8:	4770      	bxne	lr
 80015aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80015ae:	0052      	lsls	r2, r2, #1
 80015b0:	eb43 0303 	adc.w	r3, r3, r3
 80015b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80015b8:	bf08      	it	eq
 80015ba:	3d01      	subeq	r5, #1
 80015bc:	d0f7      	beq.n	80015ae <__aeabi_dmul+0x1c6>
 80015be:	ea43 0306 	orr.w	r3, r3, r6
 80015c2:	4770      	bx	lr
 80015c4:	ea94 0f0c 	teq	r4, ip
 80015c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80015cc:	bf18      	it	ne
 80015ce:	ea95 0f0c 	teqne	r5, ip
 80015d2:	d00c      	beq.n	80015ee <__aeabi_dmul+0x206>
 80015d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80015d8:	bf18      	it	ne
 80015da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80015de:	d1d1      	bne.n	8001584 <__aeabi_dmul+0x19c>
 80015e0:	ea81 0103 	eor.w	r1, r1, r3
 80015e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
 80015ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80015f2:	bf06      	itte	eq
 80015f4:	4610      	moveq	r0, r2
 80015f6:	4619      	moveq	r1, r3
 80015f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80015fc:	d019      	beq.n	8001632 <__aeabi_dmul+0x24a>
 80015fe:	ea94 0f0c 	teq	r4, ip
 8001602:	d102      	bne.n	800160a <__aeabi_dmul+0x222>
 8001604:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001608:	d113      	bne.n	8001632 <__aeabi_dmul+0x24a>
 800160a:	ea95 0f0c 	teq	r5, ip
 800160e:	d105      	bne.n	800161c <__aeabi_dmul+0x234>
 8001610:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001614:	bf1c      	itt	ne
 8001616:	4610      	movne	r0, r2
 8001618:	4619      	movne	r1, r3
 800161a:	d10a      	bne.n	8001632 <__aeabi_dmul+0x24a>
 800161c:	ea81 0103 	eor.w	r1, r1, r3
 8001620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8001624:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8001628:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	bd70      	pop	{r4, r5, r6, pc}
 8001632:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8001636:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800163a:	bd70      	pop	{r4, r5, r6, pc}

0800163c <__aeabi_ddiv>:
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001642:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8001646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800164a:	bf1d      	ittte	ne
 800164c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001650:	ea94 0f0c 	teqne	r4, ip
 8001654:	ea95 0f0c 	teqne	r5, ip
 8001658:	f000 f8a7 	bleq	80017aa <__aeabi_ddiv+0x16e>
 800165c:	eba4 0405 	sub.w	r4, r4, r5
 8001660:	ea81 0e03 	eor.w	lr, r1, r3
 8001664:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001668:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800166c:	f000 8088 	beq.w	8001780 <__aeabi_ddiv+0x144>
 8001670:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001674:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8001678:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800167c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001680:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001684:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001688:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800168c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001690:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8001694:	429d      	cmp	r5, r3
 8001696:	bf08      	it	eq
 8001698:	4296      	cmpeq	r6, r2
 800169a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800169e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80016a2:	d202      	bcs.n	80016aa <__aeabi_ddiv+0x6e>
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80016aa:	1ab6      	subs	r6, r6, r2
 80016ac:	eb65 0503 	sbc.w	r5, r5, r3
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80016b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80016ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80016be:	ebb6 0e02 	subs.w	lr, r6, r2
 80016c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80016c6:	bf22      	ittt	cs
 80016c8:	1ab6      	subcs	r6, r6, r2
 80016ca:	4675      	movcs	r5, lr
 80016cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80016d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80016da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80016de:	bf22      	ittt	cs
 80016e0:	1ab6      	subcs	r6, r6, r2
 80016e2:	4675      	movcs	r5, lr
 80016e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80016ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80016f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80016f6:	bf22      	ittt	cs
 80016f8:	1ab6      	subcs	r6, r6, r2
 80016fa:	4675      	movcs	r5, lr
 80016fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	ea4f 0232 	mov.w	r2, r2, rrx
 8001706:	ebb6 0e02 	subs.w	lr, r6, r2
 800170a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800170e:	bf22      	ittt	cs
 8001710:	1ab6      	subcs	r6, r6, r2
 8001712:	4675      	movcs	r5, lr
 8001714:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001718:	ea55 0e06 	orrs.w	lr, r5, r6
 800171c:	d018      	beq.n	8001750 <__aeabi_ddiv+0x114>
 800171e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001722:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001726:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800172a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800172e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001732:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001736:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800173a:	d1c0      	bne.n	80016be <__aeabi_ddiv+0x82>
 800173c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8001740:	d10b      	bne.n	800175a <__aeabi_ddiv+0x11e>
 8001742:	ea41 0100 	orr.w	r1, r1, r0
 8001746:	f04f 0000 	mov.w	r0, #0
 800174a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800174e:	e7b6      	b.n	80016be <__aeabi_ddiv+0x82>
 8001750:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8001754:	bf04      	itt	eq
 8001756:	4301      	orreq	r1, r0
 8001758:	2000      	moveq	r0, #0
 800175a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800175e:	bf88      	it	hi
 8001760:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8001764:	f63f aeaf 	bhi.w	80014c6 <__aeabi_dmul+0xde>
 8001768:	ebb5 0c03 	subs.w	ip, r5, r3
 800176c:	bf04      	itt	eq
 800176e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001772:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001776:	f150 0000 	adcs.w	r0, r0, #0
 800177a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800177e:	bd70      	pop	{r4, r5, r6, pc}
 8001780:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8001784:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001788:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800178c:	bfc2      	ittt	gt
 800178e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001792:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001796:	bd70      	popgt	{r4, r5, r6, pc}
 8001798:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800179c:	f04f 0e00 	mov.w	lr, #0
 80017a0:	3c01      	subs	r4, #1
 80017a2:	e690      	b.n	80014c6 <__aeabi_dmul+0xde>
 80017a4:	ea45 0e06 	orr.w	lr, r5, r6
 80017a8:	e68d      	b.n	80014c6 <__aeabi_dmul+0xde>
 80017aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80017ae:	ea94 0f0c 	teq	r4, ip
 80017b2:	bf08      	it	eq
 80017b4:	ea95 0f0c 	teqeq	r5, ip
 80017b8:	f43f af3b 	beq.w	8001632 <__aeabi_dmul+0x24a>
 80017bc:	ea94 0f0c 	teq	r4, ip
 80017c0:	d10a      	bne.n	80017d8 <__aeabi_ddiv+0x19c>
 80017c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80017c6:	f47f af34 	bne.w	8001632 <__aeabi_dmul+0x24a>
 80017ca:	ea95 0f0c 	teq	r5, ip
 80017ce:	f47f af25 	bne.w	800161c <__aeabi_dmul+0x234>
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	e72c      	b.n	8001632 <__aeabi_dmul+0x24a>
 80017d8:	ea95 0f0c 	teq	r5, ip
 80017dc:	d106      	bne.n	80017ec <__aeabi_ddiv+0x1b0>
 80017de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80017e2:	f43f aefd 	beq.w	80015e0 <__aeabi_dmul+0x1f8>
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	e722      	b.n	8001632 <__aeabi_dmul+0x24a>
 80017ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80017f0:	bf18      	it	ne
 80017f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80017f6:	f47f aec5 	bne.w	8001584 <__aeabi_dmul+0x19c>
 80017fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80017fe:	f47f af0d 	bne.w	800161c <__aeabi_dmul+0x234>
 8001802:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001806:	f47f aeeb 	bne.w	80015e0 <__aeabi_dmul+0x1f8>
 800180a:	e712      	b.n	8001632 <__aeabi_dmul+0x24a>

0800180c <__aeabi_d2uiz>:
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	d211      	bcs.n	8001834 <__aeabi_d2uiz+0x28>
 8001810:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001814:	d211      	bcs.n	800183a <__aeabi_d2uiz+0x2e>
 8001816:	d50d      	bpl.n	8001834 <__aeabi_d2uiz+0x28>
 8001818:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800181c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001820:	d40e      	bmi.n	8001840 <__aeabi_d2uiz+0x34>
 8001822:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001826:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800182a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800182e:	fa23 f002 	lsr.w	r0, r3, r2
 8001832:	4770      	bx	lr
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	4770      	bx	lr
 800183a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800183e:	d102      	bne.n	8001846 <__aeabi_d2uiz+0x3a>
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001844:	4770      	bx	lr
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	4770      	bx	lr

0800184c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800184c:	b500      	push	{lr}
 800184e:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001858:	4838      	ldr	r0, [pc, #224]	@ (800193c <MX_ADC1_Init+0xf0>)
 800185a:	4a39      	ldr	r2, [pc, #228]	@ (8001940 <MX_ADC1_Init+0xf4>)
 800185c:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800185e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001862:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001864:	2201      	movs	r2, #1
 8001866:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001868:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800186a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800186e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001870:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001872:	2307      	movs	r3, #7
 8001874:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001876:	f001 fbf1 	bl	800305c <HAL_ADC_Init>
 800187a:	2800      	cmp	r0, #0
 800187c:	d146      	bne.n	800190c <MX_ADC1_Init+0xc0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800187e:	2305      	movs	r3, #5
 8001880:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001882:	2201      	movs	r2, #1
 8001884:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001886:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001888:	a901      	add	r1, sp, #4
 800188a:	482c      	ldr	r0, [pc, #176]	@ (800193c <MX_ADC1_Init+0xf0>)
 800188c:	f001 fa3e 	bl	8002d0c <HAL_ADC_ConfigChannel>
 8001890:	2800      	cmp	r0, #0
 8001892:	d13e      	bne.n	8001912 <MX_ADC1_Init+0xc6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001894:	2308      	movs	r3, #8
 8001896:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001898:	2302      	movs	r3, #2
 800189a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189c:	a901      	add	r1, sp, #4
 800189e:	4827      	ldr	r0, [pc, #156]	@ (800193c <MX_ADC1_Init+0xf0>)
 80018a0:	f001 fa34 	bl	8002d0c <HAL_ADC_ConfigChannel>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d137      	bne.n	8001918 <MX_ADC1_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018a8:	2304      	movs	r3, #4
 80018aa:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018ac:	2303      	movs	r3, #3
 80018ae:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b0:	a901      	add	r1, sp, #4
 80018b2:	4822      	ldr	r0, [pc, #136]	@ (800193c <MX_ADC1_Init+0xf0>)
 80018b4:	f001 fa2a 	bl	8002d0c <HAL_ADC_ConfigChannel>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d130      	bne.n	800191e <MX_ADC1_Init+0xd2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018bc:	2306      	movs	r3, #6
 80018be:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c4:	eb0d 0103 	add.w	r1, sp, r3
 80018c8:	481c      	ldr	r0, [pc, #112]	@ (800193c <MX_ADC1_Init+0xf0>)
 80018ca:	f001 fa1f 	bl	8002d0c <HAL_ADC_ConfigChannel>
 80018ce:	bb48      	cbnz	r0, 8001924 <MX_ADC1_Init+0xd8>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018d0:	2307      	movs	r3, #7
 80018d2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80018d4:	2305      	movs	r3, #5
 80018d6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d8:	a901      	add	r1, sp, #4
 80018da:	4818      	ldr	r0, [pc, #96]	@ (800193c <MX_ADC1_Init+0xf0>)
 80018dc:	f001 fa16 	bl	8002d0c <HAL_ADC_ConfigChannel>
 80018e0:	bb18      	cbnz	r0, 800192a <MX_ADC1_Init+0xde>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018e2:	2309      	movs	r3, #9
 80018e4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80018e6:	2306      	movs	r3, #6
 80018e8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ea:	a901      	add	r1, sp, #4
 80018ec:	4813      	ldr	r0, [pc, #76]	@ (800193c <MX_ADC1_Init+0xf0>)
 80018ee:	f001 fa0d 	bl	8002d0c <HAL_ADC_ConfigChannel>
 80018f2:	b9e8      	cbnz	r0, 8001930 <MX_ADC1_Init+0xe4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018f4:	2303      	movs	r3, #3
 80018f6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80018f8:	2307      	movs	r3, #7
 80018fa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fc:	a901      	add	r1, sp, #4
 80018fe:	480f      	ldr	r0, [pc, #60]	@ (800193c <MX_ADC1_Init+0xf0>)
 8001900:	f001 fa04 	bl	8002d0c <HAL_ADC_ConfigChannel>
 8001904:	b9b8      	cbnz	r0, 8001936 <MX_ADC1_Init+0xea>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001906:	b005      	add	sp, #20
 8001908:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800190c:	f000 fc62 	bl	80021d4 <Error_Handler>
 8001910:	e7b5      	b.n	800187e <MX_ADC1_Init+0x32>
    Error_Handler();
 8001912:	f000 fc5f 	bl	80021d4 <Error_Handler>
 8001916:	e7bd      	b.n	8001894 <MX_ADC1_Init+0x48>
    Error_Handler();
 8001918:	f000 fc5c 	bl	80021d4 <Error_Handler>
 800191c:	e7c4      	b.n	80018a8 <MX_ADC1_Init+0x5c>
    Error_Handler();
 800191e:	f000 fc59 	bl	80021d4 <Error_Handler>
 8001922:	e7cb      	b.n	80018bc <MX_ADC1_Init+0x70>
    Error_Handler();
 8001924:	f000 fc56 	bl	80021d4 <Error_Handler>
 8001928:	e7d2      	b.n	80018d0 <MX_ADC1_Init+0x84>
    Error_Handler();
 800192a:	f000 fc53 	bl	80021d4 <Error_Handler>
 800192e:	e7d8      	b.n	80018e2 <MX_ADC1_Init+0x96>
    Error_Handler();
 8001930:	f000 fc50 	bl	80021d4 <Error_Handler>
 8001934:	e7de      	b.n	80018f4 <MX_ADC1_Init+0xa8>
    Error_Handler();
 8001936:	f000 fc4d 	bl	80021d4 <Error_Handler>
}
 800193a:	e7e4      	b.n	8001906 <MX_ADC1_Init+0xba>
 800193c:	20000384 	.word	0x20000384
 8001940:	40012400 	.word	0x40012400

08001944 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001944:	b530      	push	{r4, r5, lr}
 8001946:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	2300      	movs	r3, #0
 800194a:	9304      	str	r3, [sp, #16]
 800194c:	9305      	str	r3, [sp, #20]
 800194e:	9306      	str	r3, [sp, #24]
 8001950:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8001952:	6802      	ldr	r2, [r0, #0]
 8001954:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <HAL_ADC_MspInit+0xa8>)
 8001956:	429a      	cmp	r2, r3
 8001958:	d001      	beq.n	800195e <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800195a:	b009      	add	sp, #36	@ 0x24
 800195c:	bd30      	pop	{r4, r5, pc}
 800195e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001960:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800196a:	619a      	str	r2, [r3, #24]
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001972:	9201      	str	r2, [sp, #4]
 8001974:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	619a      	str	r2, [r3, #24]
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	f002 0204 	and.w	r2, r2, #4
 8001984:	9202      	str	r2, [sp, #8]
 8001986:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	f042 0208 	orr.w	r2, r2, #8
 800198e:	619a      	str	r2, [r3, #24]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	9303      	str	r3, [sp, #12]
 8001998:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800199a:	23f8      	movs	r3, #248	@ 0xf8
 800199c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199e:	2503      	movs	r5, #3
 80019a0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	a904      	add	r1, sp, #16
 80019a4:	4812      	ldr	r0, [pc, #72]	@ (80019f0 <HAL_ADC_MspInit+0xac>)
 80019a6:	f001 fd7d 	bl	80034a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Current_Pin|GPIO_PIN_1;
 80019aa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ac:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	a904      	add	r1, sp, #16
 80019b0:	4810      	ldr	r0, [pc, #64]	@ (80019f4 <HAL_ADC_MspInit+0xb0>)
 80019b2:	f001 fd77 	bl	80034a4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80019b6:	4810      	ldr	r0, [pc, #64]	@ (80019f8 <HAL_ADC_MspInit+0xb4>)
 80019b8:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_ADC_MspInit+0xb8>)
 80019ba:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019bc:	2300      	movs	r3, #0
 80019be:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c0:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ca:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019d0:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019d2:	2220      	movs	r2, #32
 80019d4:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019d6:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019d8:	f001 fc52 	bl	8003280 <HAL_DMA_Init>
 80019dc:	b918      	cbnz	r0, 80019e6 <HAL_ADC_MspInit+0xa2>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_ADC_MspInit+0xb4>)
 80019e0:	6223      	str	r3, [r4, #32]
 80019e2:	625c      	str	r4, [r3, #36]	@ 0x24
}
 80019e4:	e7b9      	b.n	800195a <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80019e6:	f000 fbf5 	bl	80021d4 <Error_Handler>
 80019ea:	e7f8      	b.n	80019de <HAL_ADC_MspInit+0x9a>
 80019ec:	40012400 	.word	0x40012400
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	20000340 	.word	0x20000340
 80019fc:	40020008 	.word	0x40020008

08001a00 <decide_step>:
uint16_t a, b, c, d, e, f = 0;

void decide_step(uint8_t _a, uint8_t _b, uint8_t _c)
{

    if (_a && !_b && _c && (!oldValue[0] && !oldValue[1] && oldValue[2]))
 8001a00:	4603      	mov	r3, r0
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d02a      	beq.n	8001a5c <decide_step+0x5c>
 8001a06:	b999      	cbnz	r1, 8001a30 <decide_step+0x30>
 8001a08:	b192      	cbz	r2, 8001a30 <decide_step+0x30>
 8001a0a:	4848      	ldr	r0, [pc, #288]	@ (8001b2c <decide_step+0x12c>)
 8001a0c:	7800      	ldrb	r0, [r0, #0]
 8001a0e:	b978      	cbnz	r0, 8001a30 <decide_step+0x30>
 8001a10:	4846      	ldr	r0, [pc, #280]	@ (8001b2c <decide_step+0x12c>)
 8001a12:	7840      	ldrb	r0, [r0, #1]
 8001a14:	b960      	cbnz	r0, 8001a30 <decide_step+0x30>
 8001a16:	4845      	ldr	r0, [pc, #276]	@ (8001b2c <decide_step+0x12c>)
 8001a18:	7880      	ldrb	r0, [r0, #2]
 8001a1a:	b148      	cbz	r0, 8001a30 <decide_step+0x30>
    // 101'den 100'e geçiş
    {
        oldValue[0] = 1;
 8001a1c:	4a43      	ldr	r2, [pc, #268]	@ (8001b2c <decide_step+0x12c>)
 8001a1e:	2301      	movs	r3, #1
 8001a20:	7013      	strb	r3, [r2, #0]
        oldValue[1] = 0;
 8001a22:	7051      	strb	r1, [r2, #1]
        oldValue[2] = 1;
 8001a24:	7093      	strb	r3, [r2, #2]
        step = 1;
 8001a26:	4a42      	ldr	r2, [pc, #264]	@ (8001b30 <decide_step+0x130>)
 8001a28:	6013      	str	r3, [r2, #0]
        bemf_execute_flag = 1;
 8001a2a:	4a42      	ldr	r2, [pc, #264]	@ (8001b34 <decide_step+0x134>)
 8001a2c:	7013      	strb	r3, [r2, #0]
 8001a2e:	4770      	bx	lr
    }
    else if (_a && !_b && !_c && (oldValue[0] && !oldValue[1] && oldValue[2])) // 100'den 110'a geçiş
 8001a30:	b9a1      	cbnz	r1, 8001a5c <decide_step+0x5c>
 8001a32:	b99a      	cbnz	r2, 8001a5c <decide_step+0x5c>
 8001a34:	483d      	ldr	r0, [pc, #244]	@ (8001b2c <decide_step+0x12c>)
 8001a36:	7800      	ldrb	r0, [r0, #0]
 8001a38:	b180      	cbz	r0, 8001a5c <decide_step+0x5c>
 8001a3a:	483c      	ldr	r0, [pc, #240]	@ (8001b2c <decide_step+0x12c>)
 8001a3c:	7840      	ldrb	r0, [r0, #1]
 8001a3e:	b968      	cbnz	r0, 8001a5c <decide_step+0x5c>
 8001a40:	483a      	ldr	r0, [pc, #232]	@ (8001b2c <decide_step+0x12c>)
 8001a42:	7880      	ldrb	r0, [r0, #2]
 8001a44:	b150      	cbz	r0, 8001a5c <decide_step+0x5c>
    {
        oldValue[0] = 1;
 8001a46:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <decide_step+0x12c>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
        oldValue[1] = 0;
 8001a4c:	7059      	strb	r1, [r3, #1]
        oldValue[2] = 0;
 8001a4e:	7099      	strb	r1, [r3, #2]
        step = 2;
 8001a50:	4b37      	ldr	r3, [pc, #220]	@ (8001b30 <decide_step+0x130>)
 8001a52:	2102      	movs	r1, #2
 8001a54:	6019      	str	r1, [r3, #0]
        bemf_execute_flag = 1;
 8001a56:	4b37      	ldr	r3, [pc, #220]	@ (8001b34 <decide_step+0x134>)
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	4770      	bx	lr
    }

    else if (_a && _b && !_c && (oldValue[0] && !oldValue[1] && !oldValue[2])) // 100'den 110'a geçiş
 8001a5c:	b1db      	cbz	r3, 8001a96 <decide_step+0x96>
 8001a5e:	2900      	cmp	r1, #0
 8001a60:	d05f      	beq.n	8001b22 <decide_step+0x122>
 8001a62:	2a00      	cmp	r2, #0
 8001a64:	d15d      	bne.n	8001b22 <decide_step+0x122>
 8001a66:	4b31      	ldr	r3, [pc, #196]	@ (8001b2c <decide_step+0x12c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d059      	beq.n	8001b22 <decide_step+0x122>
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <decide_step+0x12c>)
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d155      	bne.n	8001b22 <decide_step+0x122>
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <decide_step+0x12c>)
 8001a78:	789b      	ldrb	r3, [r3, #2]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d151      	bne.n	8001b22 <decide_step+0x122>
    {
        oldValue[0] = 1;
 8001a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b2c <decide_step+0x12c>)
 8001a80:	2301      	movs	r3, #1
 8001a82:	7013      	strb	r3, [r2, #0]
        oldValue[1] = 1;
 8001a84:	7053      	strb	r3, [r2, #1]
        oldValue[2] = 0;
 8001a86:	2100      	movs	r1, #0
 8001a88:	7091      	strb	r1, [r2, #2]
        step = 3;
 8001a8a:	4a29      	ldr	r2, [pc, #164]	@ (8001b30 <decide_step+0x130>)
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	6011      	str	r1, [r2, #0]
        bemf_execute_flag = 1;
 8001a90:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <decide_step+0x134>)
 8001a92:	7013      	strb	r3, [r2, #0]
 8001a94:	4770      	bx	lr
    }

    else if (!_a && _b && !_c && (oldValue[0] && oldValue[1] && !oldValue[2])) // 100'den 110'a geçiş
 8001a96:	b1a9      	cbz	r1, 8001ac4 <decide_step+0xc4>
 8001a98:	b9a2      	cbnz	r2, 8001ac4 <decide_step+0xc4>
 8001a9a:	4824      	ldr	r0, [pc, #144]	@ (8001b2c <decide_step+0x12c>)
 8001a9c:	7800      	ldrb	r0, [r0, #0]
 8001a9e:	b188      	cbz	r0, 8001ac4 <decide_step+0xc4>
 8001aa0:	4822      	ldr	r0, [pc, #136]	@ (8001b2c <decide_step+0x12c>)
 8001aa2:	7840      	ldrb	r0, [r0, #1]
 8001aa4:	b170      	cbz	r0, 8001ac4 <decide_step+0xc4>
 8001aa6:	4821      	ldr	r0, [pc, #132]	@ (8001b2c <decide_step+0x12c>)
 8001aa8:	7880      	ldrb	r0, [r0, #2]
 8001aaa:	b958      	cbnz	r0, 8001ac4 <decide_step+0xc4>
    {
        oldValue[0] = 0;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <decide_step+0x12c>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	7019      	strb	r1, [r3, #0]
        oldValue[1] = 1;
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	705a      	strb	r2, [r3, #1]
        oldValue[2] = 0;
 8001ab6:	7099      	strb	r1, [r3, #2]
        step = 4;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <decide_step+0x130>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	6019      	str	r1, [r3, #0]
        bemf_execute_flag = 1;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <decide_step+0x134>)
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	4770      	bx	lr
    }

    else if (!_a && _b && _c && (!oldValue[0] && oldValue[1] && !oldValue[2])) // 100'den 110'a geçiş
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d12c      	bne.n	8001b22 <decide_step+0x122>
 8001ac8:	b1a1      	cbz	r1, 8001af4 <decide_step+0xf4>
 8001aca:	b19a      	cbz	r2, 8001af4 <decide_step+0xf4>
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <decide_step+0x12c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b983      	cbnz	r3, 8001af4 <decide_step+0xf4>
 8001ad2:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <decide_step+0x12c>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	b16b      	cbz	r3, 8001af4 <decide_step+0xf4>
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <decide_step+0x12c>)
 8001ada:	789b      	ldrb	r3, [r3, #2]
 8001adc:	b953      	cbnz	r3, 8001af4 <decide_step+0xf4>
    {
        oldValue[0] = 0;
 8001ade:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <decide_step+0x12c>)
 8001ae0:	7013      	strb	r3, [r2, #0]
        oldValue[1] = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	7053      	strb	r3, [r2, #1]
        oldValue[2] = 1;
 8001ae6:	7093      	strb	r3, [r2, #2]
        step = 5;
 8001ae8:	4a11      	ldr	r2, [pc, #68]	@ (8001b30 <decide_step+0x130>)
 8001aea:	2105      	movs	r1, #5
 8001aec:	6011      	str	r1, [r2, #0]
        bemf_execute_flag = 1;
 8001aee:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <decide_step+0x134>)
 8001af0:	7013      	strb	r3, [r2, #0]
 8001af2:	4770      	bx	lr
    }
    else if (!_a && !_b && _c && (!oldValue[0] && oldValue[1] && oldValue[2])) // 100'den 110'a geçiş
 8001af4:	b9a9      	cbnz	r1, 8001b22 <decide_step+0x122>
 8001af6:	b1a2      	cbz	r2, 8001b22 <decide_step+0x122>
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <decide_step+0x12c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b98b      	cbnz	r3, 8001b22 <decide_step+0x122>
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <decide_step+0x12c>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	b173      	cbz	r3, 8001b22 <decide_step+0x122>
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <decide_step+0x12c>)
 8001b06:	789b      	ldrb	r3, [r3, #2]
 8001b08:	b15b      	cbz	r3, 8001b22 <decide_step+0x122>
    {
        oldValue[0] = 0;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <decide_step+0x12c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
        oldValue[1] = 0;
 8001b10:	705a      	strb	r2, [r3, #1]
        oldValue[2] = 1;
 8001b12:	2201      	movs	r2, #1
 8001b14:	709a      	strb	r2, [r3, #2]
        step = 6;
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <decide_step+0x130>)
 8001b18:	2106      	movs	r1, #6
 8001b1a:	6019      	str	r1, [r3, #0]
        bemf_execute_flag = 1;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <decide_step+0x134>)
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	4770      	bx	lr
    }
    else
    {
        bemf_execute_flag = 0;
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <decide_step+0x134>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    }
}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000670 	.word	0x20000670
 8001b30:	20000644 	.word	0x20000644
 8001b34:	200005c0 	.word	0x200005c0

08001b38 <abc>:
void abc()
{
 8001b38:	b508      	push	{r3, lr}
    if (backEMF_mode)
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <abc+0x28>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b903      	cbnz	r3, 8001b42 <abc+0xa>
    {
        // LOG_VAR(flagg);
        decide_step(polarity_A, polarity_B, polarity_C);
        execute_step(step);
    }
}
 8001b40:	bd08      	pop	{r3, pc}
        decide_step(polarity_A, polarity_B, polarity_C);
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <abc+0x2c>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <abc+0x30>)
 8001b48:	7819      	ldrb	r1, [r3, #0]
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <abc+0x34>)
 8001b4c:	7818      	ldrb	r0, [r3, #0]
 8001b4e:	f7ff ff57 	bl	8001a00 <decide_step>
        execute_step(step);
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <abc+0x38>)
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	b2c0      	uxtb	r0, r0
 8001b58:	f000 ffc2 	bl	8002ae0 <execute_step>
}
 8001b5c:	e7f0      	b.n	8001b40 <abc+0x8>
 8001b5e:	bf00      	nop
 8001b60:	200005ce 	.word	0x200005ce
 8001b64:	200005cb 	.word	0x200005cb
 8001b68:	200005cc 	.word	0x200005cc
 8001b6c:	200005cd 	.word	0x200005cd
 8001b70:	20000644 	.word	0x20000644

08001b74 <phaseControlBemf>:

void phaseControlBemf()
{
 8001b74:	b510      	push	{r4, lr}
    if (polarity_A + polarity_A_old == 1)
 8001b76:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <phaseControlBemf+0xcc>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4a32      	ldr	r2, [pc, #200]	@ (8001c44 <phaseControlBemf+0xd0>)
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d00e      	beq.n	8001ba2 <phaseControlBemf+0x2e>
        __HAL_TIM_SET_COUNTER(&htim4, 0);
        polarity_A_old = polarity_A;
        // log_var_analysis();
        abc();
    }
    else if (polarity_B + polarity_B_old == 1)
 8001b84:	4b30      	ldr	r3, [pc, #192]	@ (8001c48 <phaseControlBemf+0xd4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <phaseControlBemf+0xd8>)
 8001b8a:	7812      	ldrb	r2, [r2, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d021      	beq.n	8001bd6 <phaseControlBemf+0x62>
        __HAL_TIM_SET_COUNTER(&htim4, 0);
        polarity_B_old = polarity_B;
        // log_var_analysis();
        abc();
    }
    else if (polarity_C + polarity_C_old == 1)
 8001b92:	4b2f      	ldr	r3, [pc, #188]	@ (8001c50 <phaseControlBemf+0xdc>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4a2f      	ldr	r2, [pc, #188]	@ (8001c54 <phaseControlBemf+0xe0>)
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d034      	beq.n	8001c0a <phaseControlBemf+0x96>
    }
    else
    {
        a = a;
    }
}
 8001ba0:	bd10      	pop	{r4, pc}
        intersection_interval = __HAL_TIM_GET_COUNTER(&htim4);
 8001ba2:	4c2d      	ldr	r4, [pc, #180]	@ (8001c58 <phaseControlBemf+0xe4>)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8001c5c <phaseControlBemf+0xe8>)
 8001baa:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_AUTORELOAD(&htim3, (intersection_interval * 2) / 3);
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	482c      	ldr	r0, [pc, #176]	@ (8001c60 <phaseControlBemf+0xec>)
 8001bb0:	6801      	ldr	r1, [r0, #0]
 8001bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <phaseControlBemf+0xf0>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001bbc:	60c3      	str	r3, [r0, #12]
        HAL_TIM_Base_Start_IT(&htim3);
 8001bbe:	f003 fa13 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
        __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24
        polarity_A_old = polarity_A;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <phaseControlBemf+0xcc>)
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <phaseControlBemf+0xd0>)
 8001bce:	701a      	strb	r2, [r3, #0]
        abc();
 8001bd0:	f7ff ffb2 	bl	8001b38 <abc>
 8001bd4:	e7e4      	b.n	8001ba0 <phaseControlBemf+0x2c>
        intersection_interval = __HAL_TIM_GET_COUNTER(&htim4);
 8001bd6:	4c20      	ldr	r4, [pc, #128]	@ (8001c58 <phaseControlBemf+0xe4>)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c5c <phaseControlBemf+0xe8>)
 8001bde:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_AUTORELOAD(&htim3, (intersection_interval * 2) / 3);
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	481f      	ldr	r0, [pc, #124]	@ (8001c60 <phaseControlBemf+0xec>)
 8001be4:	6801      	ldr	r1, [r0, #0]
 8001be6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c64 <phaseControlBemf+0xf0>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001bf0:	60c3      	str	r3, [r0, #12]
        HAL_TIM_Base_Start_IT(&htim3);
 8001bf2:	f003 f9f9 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
        __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24
        polarity_B_old = polarity_B;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <phaseControlBemf+0xd4>)
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <phaseControlBemf+0xd8>)
 8001c02:	701a      	strb	r2, [r3, #0]
        abc();
 8001c04:	f7ff ff98 	bl	8001b38 <abc>
 8001c08:	e7ca      	b.n	8001ba0 <phaseControlBemf+0x2c>
        intersection_interval = __HAL_TIM_GET_COUNTER(&htim4);
 8001c0a:	4c13      	ldr	r4, [pc, #76]	@ (8001c58 <phaseControlBemf+0xe4>)
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <phaseControlBemf+0xe8>)
 8001c12:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_AUTORELOAD(&htim3, (intersection_interval * 2) / 3);
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4812      	ldr	r0, [pc, #72]	@ (8001c60 <phaseControlBemf+0xec>)
 8001c18:	6801      	ldr	r1, [r0, #0]
 8001c1a:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <phaseControlBemf+0xf0>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001c24:	60c3      	str	r3, [r0, #12]
        HAL_TIM_Base_Start_IT(&htim3);
 8001c26:	f003 f9df 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
        __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
        polarity_C_old = polarity_C;
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <phaseControlBemf+0xdc>)
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <phaseControlBemf+0xe0>)
 8001c36:	701a      	strb	r2, [r3, #0]
        abc();
 8001c38:	f7ff ff7e 	bl	8001b38 <abc>
}
 8001c3c:	e7b0      	b.n	8001ba0 <phaseControlBemf+0x2c>
 8001c3e:	bf00      	nop
 8001c40:	200005cd 	.word	0x200005cd
 8001c44:	200005ca 	.word	0x200005ca
 8001c48:	200005cc 	.word	0x200005cc
 8001c4c:	200005c9 	.word	0x200005c9
 8001c50:	200005cb 	.word	0x200005cb
 8001c54:	200005c8 	.word	0x200005c8
 8001c58:	2000069c 	.word	0x2000069c
 8001c5c:	200005c4 	.word	0x200005c4
 8001c60:	200006e4 	.word	0x200006e4
 8001c64:	aaaaaaab 	.word	0xaaaaaaab

08001c68 <log_var_analysis>:

void log_var_analysis()
{
    if (rpm > 800 && 0)
 8001c68:	4b01      	ldr	r3, [pc, #4]	@ (8001c70 <log_var_analysis+0x8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
            LOG_VAR(d);
            LOG_VAR(e);
            LOG_VAR(f);
        }
    }
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000062c 	.word	0x2000062c

08001c74 <log_variable>:
#include "usb_device.h"

char log_buffer[BUFFER_SIZE];
int log_length = 0;

void log_variable(const char *name, unsigned int value) {
 8001c74:	b530      	push	{r4, r5, lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	4603      	mov	r3, r0
    int len = snprintf(log_buffer + log_length, BUFFER_SIZE - log_length, "%s:%u,", name, value);
 8001c7a:	4c07      	ldr	r4, [pc, #28]	@ (8001c98 <log_variable+0x24>)
 8001c7c:	6825      	ldr	r5, [r4, #0]
 8001c7e:	9100      	str	r1, [sp, #0]
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <log_variable+0x28>)
 8001c82:	f5c5 7100 	rsb	r1, r5, #512	@ 0x200
 8001c86:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <log_variable+0x2c>)
 8001c88:	4428      	add	r0, r5
 8001c8a:	f7fe fb43 	bl	8000314 <sniprintf>
    log_length += len;
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	4403      	add	r3, r0
 8001c92:	6023      	str	r3, [r4, #0]
}
 8001c94:	b003      	add	sp, #12
 8001c96:	bd30      	pop	{r4, r5, pc}
 8001c98:	200003b4 	.word	0x200003b4
 8001c9c:	08007d54 	.word	0x08007d54
 8001ca0:	200003b8 	.word	0x200003b8

08001ca4 <LOG_POST>:

void LOG_POST() {
 8001ca4:	b508      	push	{r3, lr}
    if (log_length > 0) {
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <LOG_POST+0x28>)
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	2900      	cmp	r1, #0
 8001cac:	dc05      	bgt.n	8001cba <LOG_POST+0x16>
        log_buffer[log_length - 1] = '\n';
        CDC_Transmit_FS((uint8_t *)log_buffer, log_length);
    }
    log_length = 0; 
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <LOG_POST+0x28>)
 8001cb2:	6013      	str	r3, [r2, #0]
    log_buffer[0] = '\0';
 8001cb4:	4a06      	ldr	r2, [pc, #24]	@ (8001cd0 <LOG_POST+0x2c>)
 8001cb6:	7013      	strb	r3, [r2, #0]
 8001cb8:	bd08      	pop	{r3, pc}
        log_buffer[log_length - 1] = '\n';
 8001cba:	1e4b      	subs	r3, r1, #1
 8001cbc:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <LOG_POST+0x2c>)
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	54c2      	strb	r2, [r0, r3]
        CDC_Transmit_FS((uint8_t *)log_buffer, log_length);
 8001cc2:	b289      	uxth	r1, r1
 8001cc4:	f005 f970 	bl	8006fa8 <CDC_Transmit_FS>
 8001cc8:	e7f1      	b.n	8001cae <LOG_POST+0xa>
 8001cca:	bf00      	nop
 8001ccc:	200003b4 	.word	0x200003b4
 8001cd0:	200003b8 	.word	0x200003b8

08001cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cd4:	b500      	push	{lr}
 8001cd6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <MX_DMA_Init+0x30>)
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	4611      	mov	r1, r2
 8001cf0:	200b      	movs	r0, #11
 8001cf2:	f001 fa7d 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cf6:	200b      	movs	r0, #11
 8001cf8:	f001 fa8a 	bl	8003210 <HAL_NVIC_EnableIRQ>

}
 8001cfc:	b003      	add	sp, #12
 8001cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000

08001d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d08:	b530      	push	{r4, r5, lr}
 8001d0a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	2400      	movs	r4, #0
 8001d0e:	9404      	str	r4, [sp, #16]
 8001d10:	9405      	str	r4, [sp, #20]
 8001d12:	9406      	str	r4, [sp, #24]
 8001d14:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	4b31      	ldr	r3, [pc, #196]	@ (8001ddc <MX_GPIO_Init+0xd4>)
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	f042 0210 	orr.w	r2, r2, #16
 8001d1e:	619a      	str	r2, [r3, #24]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	f002 0210 	and.w	r2, r2, #16
 8001d26:	9200      	str	r2, [sp, #0]
 8001d28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	f042 0220 	orr.w	r2, r2, #32
 8001d30:	619a      	str	r2, [r3, #24]
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	f002 0220 	and.w	r2, r2, #32
 8001d38:	9201      	str	r2, [sp, #4]
 8001d3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	f042 0204 	orr.w	r2, r2, #4
 8001d42:	619a      	str	r2, [r3, #24]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	f002 0204 	and.w	r2, r2, #4
 8001d4a:	9202      	str	r2, [sp, #8]
 8001d4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	f042 0208 	orr.w	r2, r2, #8
 8001d54:	619a      	str	r2, [r3, #24]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	9303      	str	r3, [sp, #12]
 8001d5e:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d60:	4d1f      	ldr	r5, [pc, #124]	@ (8001de0 <MX_GPIO_Init+0xd8>)
 8001d62:	4622      	mov	r2, r4
 8001d64:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001d68:	4628      	mov	r0, r5
 8001d6a:	f001 fcb0 	bl	80036ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d6e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d72:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	a904      	add	r1, sp, #16
 8001d80:	4628      	mov	r0, r5
 8001d82:	f001 fb8f 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HALL_1_Pin|HALL_2_Pin|HALL_3_Pin;
 8001d86:	2507      	movs	r5, #7
 8001d88:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <MX_GPIO_Init+0xdc>)
 8001d8c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	a904      	add	r1, sp, #16
 8001d92:	4815      	ldr	r0, [pc, #84]	@ (8001de8 <MX_GPIO_Init+0xe0>)
 8001d94:	f001 fb86 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUMBA_Pin;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUMBA_GPIO_Port, &GPIO_InitStruct);
 8001da0:	a904      	add	r1, sp, #16
 8001da2:	4812      	ldr	r0, [pc, #72]	@ (8001dec <MX_GPIO_Init+0xe4>)
 8001da4:	f001 fb7e 	bl	80034a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001da8:	4622      	mov	r2, r4
 8001daa:	2103      	movs	r1, #3
 8001dac:	2006      	movs	r0, #6
 8001dae:	f001 fa1f 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001db2:	2006      	movs	r0, #6
 8001db4:	f001 fa2c 	bl	8003210 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8001db8:	4622      	mov	r2, r4
 8001dba:	2103      	movs	r1, #3
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f001 fa17 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f001 fa24 	bl	8003210 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8001dc8:	4622      	mov	r2, r4
 8001dca:	2103      	movs	r1, #3
 8001dcc:	2008      	movs	r0, #8
 8001dce:	f001 fa0f 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001dd2:	2008      	movs	r0, #8
 8001dd4:	f001 fa1c 	bl	8003210 <HAL_NVIC_EnableIRQ>

}
 8001dd8:	b009      	add	sp, #36	@ 0x24
 8001dda:	bd30      	pop	{r4, r5, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40011000 	.word	0x40011000
 8001de4:	10310000 	.word	0x10310000
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40010c00 	.word	0x40010c00

08001df0 <HAL_GPIO_EXTI_Callback>:
#include "main.h"
#include <debug_monitor.h>


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df0:	b510      	push	{r4, lr}

  hall_A = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001df2:	4c43      	ldr	r4, [pc, #268]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x110>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	4620      	mov	r0, r4
 8001df8:	f001 fc62 	bl	80036c0 <HAL_GPIO_ReadPin>
 8001dfc:	3800      	subs	r0, #0
 8001dfe:	bf18      	it	ne
 8001e00:	2001      	movne	r0, #1
 8001e02:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x114>)
 8001e04:	7018      	strb	r0, [r3, #0]
  hall_B = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001e06:	2102      	movs	r1, #2
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f001 fc59 	bl	80036c0 <HAL_GPIO_ReadPin>
 8001e0e:	3800      	subs	r0, #0
 8001e10:	bf18      	it	ne
 8001e12:	2001      	movne	r0, #1
 8001e14:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x118>)
 8001e16:	7018      	strb	r0, [r3, #0]
  hall_C = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f001 fc50 	bl	80036c0 <HAL_GPIO_ReadPin>
 8001e20:	3800      	subs	r0, #0
 8001e22:	bf18      	it	ne
 8001e24:	2001      	movne	r0, #1
 8001e26:	4b39      	ldr	r3, [pc, #228]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001e28:	7018      	strb	r0, [r3, #0]
  first_step_flag = 1;
 8001e2a:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0x120>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
  // if (hall_A != oncekiDegerler[0] || hall_B != oncekiDegerler[1] || hall_C != oncekiDegerler[2])
  // {
  // rpm_counter++;
  difference_two_coummutation_time = __HAL_TIM_GET_COUNTER(&htim2);
 8001e30:	4b38      	ldr	r3, [pc, #224]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x124>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e36:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x128>)
 8001e38:	601a      	str	r2, [r3, #0]
  rpm = get_rpm(difference_two_coummutation_time);
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	f000 fdc0 	bl	80029c0 <get_rpm>
 8001e40:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e42:	6018      	str	r0, [r3, #0]

  for (int i = 0; i < 30; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x5a>
 8001e48:	3301      	adds	r3, #1
 8001e4a:	2b1d      	cmp	r3, #29
 8001e4c:	dc13      	bgt.n	8001e76 <HAL_GPIO_EXTI_Callback+0x86>
  {
    if (rpm > (i * 100) && rpm <= ((i + 1) * 100))
 8001e4e:	2264      	movs	r2, #100	@ 0x64
 8001e50:	fb03 f202 	mul.w	r2, r3, r2
 8001e54:	4931      	ldr	r1, [pc, #196]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e56:	6809      	ldr	r1, [r1, #0]
 8001e58:	428a      	cmp	r2, r1
 8001e5a:	d2f5      	bcs.n	8001e48 <HAL_GPIO_EXTI_Callback+0x58>
 8001e5c:	2264      	movs	r2, #100	@ 0x64
 8001e5e:	fb03 2202 	mla	r2, r3, r2, r2
 8001e62:	492e      	ldr	r1, [pc, #184]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001e64:	6809      	ldr	r1, [r1, #0]
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d3ee      	bcc.n	8001e48 <HAL_GPIO_EXTI_Callback+0x58>
    {
      saved_pwm_rpm[i] = pwm_value;
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0x130>)
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	492c      	ldr	r1, [pc, #176]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x134>)
 8001e72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      break;
    }
  }

  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001e76:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x124>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  // }

  if (run_status)
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_GPIO_EXTI_Callback+0x138>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b1a3      	cbz	r3, 8001eae <HAL_GPIO_EXTI_Callback+0xbe>
  {
    if ((hall_A == hall_C) && (hall_A == hall_B))
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x114>)
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d010      	beq.n	8001eb6 <HAL_GPIO_EXTI_Callback+0xc6>
      hall_B = oncekiDegerler[1];
      hall_C = oncekiDegerler[2];
    }
    else
    {
      oncekiDegerler[0] = hall_A;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x114>)
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001e9c:	701a      	strb	r2, [r3, #0]
      oncekiDegerler[1] = hall_B;
 8001e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x118>)
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	705a      	strb	r2, [r3, #1]
      oncekiDegerler[2] = hall_C;
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	709a      	strb	r2, [r3, #2]
    }
  }
  // sample_phase_data(rpm, (uint16_t)phase_A, (uint16_t)phase_B, (uint16_t)phase_C);
  if (!backEMF_mode)
 8001eae:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x140>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b1e3      	cbz	r3, 8001eee <HAL_GPIO_EXTI_Callback+0xfe>
  {
    set_old_value();
    execute_step(step);
  }
  // analyze_step_counter++;
}
 8001eb4:	bd10      	pop	{r4, pc}
    if ((hall_A == hall_C) && (hall_A == hall_B))
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x114>)
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x118>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d1e6      	bne.n	8001e94 <HAL_GPIO_EXTI_Callback+0xa4>
      hall_A = oncekiDegerler[0];
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	3a00      	subs	r2, #0
 8001ecc:	bf18      	it	ne
 8001ece:	2201      	movne	r2, #1
 8001ed0:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x114>)
 8001ed2:	700a      	strb	r2, [r1, #0]
      hall_B = oncekiDegerler[1];
 8001ed4:	785a      	ldrb	r2, [r3, #1]
 8001ed6:	3a00      	subs	r2, #0
 8001ed8:	bf18      	it	ne
 8001eda:	2201      	movne	r2, #1
 8001edc:	490a      	ldr	r1, [pc, #40]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x118>)
 8001ede:	700a      	strb	r2, [r1, #0]
      hall_C = oncekiDegerler[2];
 8001ee0:	789b      	ldrb	r3, [r3, #2]
 8001ee2:	3b00      	subs	r3, #0
 8001ee4:	bf18      	it	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001eea:	7013      	strb	r3, [r2, #0]
 8001eec:	e7df      	b.n	8001eae <HAL_GPIO_EXTI_Callback+0xbe>
    set_old_value();
 8001eee:	f000 fb8b 	bl	8002608 <set_old_value>
    execute_step(step);
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <HAL_GPIO_EXTI_Callback+0x144>)
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	b2c0      	uxtb	r0, r0
 8001ef8:	f000 fdf2 	bl	8002ae0 <execute_step>
}
 8001efc:	e7da      	b.n	8001eb4 <HAL_GPIO_EXTI_Callback+0xc4>
 8001efe:	bf00      	nop
 8001f00:	40010800 	.word	0x40010800
 8001f04:	2000064a 	.word	0x2000064a
 8001f08:	20000649 	.word	0x20000649
 8001f0c:	20000648 	.word	0x20000648
 8001f10:	20000060 	.word	0x20000060
 8001f14:	2000072c 	.word	0x2000072c
 8001f18:	20000058 	.word	0x20000058
 8001f1c:	2000062c 	.word	0x2000062c
 8001f20:	20000640 	.word	0x20000640
 8001f24:	200005e4 	.word	0x200005e4
 8001f28:	2000064b 	.word	0x2000064b
 8001f2c:	20000638 	.word	0x20000638
 8001f30:	200005ce 	.word	0x200005ce
 8001f34:	20000644 	.word	0x20000644

08001f38 <map>:

// VARIABLE END

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001f38:	eba0 0c01 	sub.w	ip, r0, r1
 8001f3c:	9800      	ldr	r0, [sp, #0]
 8001f3e:	1ac0      	subs	r0, r0, r3
 8001f40:	fb00 fc0c 	mul.w	ip, r0, ip
 8001f44:	1a52      	subs	r2, r2, r1
 8001f46:	fb9c fcf2 	sdiv	ip, ip, r2
}
 8001f4a:	eb0c 0003 	add.w	r0, ip, r3
 8001f4e:	4770      	bx	lr

08001f50 <ema_filter0>:

uint16_t ema_filter0(uint16_t new_value)
{
  static uint16_t filtered_value0 = 0;

  if (filtered_value0 == 0)
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <ema_filter0+0x1c>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b90b      	cbnz	r3, 8001f5a <ema_filter0+0xa>
    filtered_value0 = new_value;
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <ema_filter0+0x1c>)
 8001f58:	8018      	strh	r0, [r3, #0]

  filtered_value0 = filtered_value0 + ((new_value - filtered_value0) >> ALPHA_SHIFT);
 8001f5a:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <ema_filter0+0x1c>)
 8001f5c:	8813      	ldrh	r3, [r2, #0]
 8001f5e:	1ac0      	subs	r0, r0, r3
 8001f60:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8001f64:	b280      	uxth	r0, r0
 8001f66:	8010      	strh	r0, [r2, #0]

  return filtered_value0;
}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200005be 	.word	0x200005be

08001f70 <ema_filter1>:

uint16_t ema_filter1(uint16_t new_value)
{
  static uint16_t filtered_value1 = 0;

  if (filtered_value1 == 0)
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <ema_filter1+0x1c>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b90b      	cbnz	r3, 8001f7a <ema_filter1+0xa>
    filtered_value1 = new_value;
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <ema_filter1+0x1c>)
 8001f78:	8018      	strh	r0, [r3, #0]

  filtered_value1 = filtered_value1 + ((new_value - filtered_value1) >> ALPHA_SHIFT);
 8001f7a:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <ema_filter1+0x1c>)
 8001f7c:	8813      	ldrh	r3, [r2, #0]
 8001f7e:	1ac0      	subs	r0, r0, r3
 8001f80:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8001f84:	b280      	uxth	r0, r0
 8001f86:	8010      	strh	r0, [r2, #0]

  return filtered_value1;
}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	200005bc 	.word	0x200005bc

08001f90 <ema_filter2>:

uint16_t ema_filter2(uint16_t new_value)
{
  static uint16_t filtered_value2 = 0;

  if (filtered_value2 == 0)
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <ema_filter2+0x1c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b90b      	cbnz	r3, 8001f9a <ema_filter2+0xa>
    filtered_value2 = new_value;
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <ema_filter2+0x1c>)
 8001f98:	8018      	strh	r0, [r3, #0]

  filtered_value2 = filtered_value2 + ((new_value - filtered_value2) >> ALPHA_SHIFT);
 8001f9a:	4a04      	ldr	r2, [pc, #16]	@ (8001fac <ema_filter2+0x1c>)
 8001f9c:	8813      	ldrh	r3, [r2, #0]
 8001f9e:	1ac0      	subs	r0, r0, r3
 8001fa0:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8001fa4:	b280      	uxth	r0, r0
 8001fa6:	8010      	strh	r0, [r2, #0]

  return filtered_value2;
}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	200005ba 	.word	0x200005ba

08001fb0 <ema_filter3>:

uint16_t ema_filter3(uint16_t new_value)
{
  static uint16_t filtered_value3 = 0;

  if (filtered_value3 == 0)
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <ema_filter3+0x1c>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b90b      	cbnz	r3, 8001fba <ema_filter3+0xa>
    filtered_value3 = new_value;
 8001fb6:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <ema_filter3+0x1c>)
 8001fb8:	8018      	strh	r0, [r3, #0]

  filtered_value3 = filtered_value3 + ((new_value - filtered_value3) >> ALPHA_SHIFT);
 8001fba:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <ema_filter3+0x1c>)
 8001fbc:	8813      	ldrh	r3, [r2, #0]
 8001fbe:	1ac0      	subs	r0, r0, r3
 8001fc0:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8001fc4:	b280      	uxth	r0, r0
 8001fc6:	8010      	strh	r0, [r2, #0]

  return filtered_value3;
}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	200005b8 	.word	0x200005b8

08001fd0 <HAL_ADC_ConvCpltCallback>:
  return average;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{ // ADC DMA LEMLERİ
  if (hadc->Instance == ADC1)
 8001fd0:	6802      	ldr	r2, [r0, #0]
 8001fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8002180 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d000      	beq.n	8001fda <HAL_ADC_ConvCpltCallback+0xa>
 8001fd8:	4770      	bx	lr
{ // ADC DMA LEMLERİ
 8001fda:	b530      	push	{r4, r5, lr}
 8001fdc:	b083      	sub	sp, #12
  {

    battery_voltage = adcBuffer[5] * 0.03843902;
 8001fde:	4c69      	ldr	r4, [pc, #420]	@ (8002184 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001fe0:	6960      	ldr	r0, [r4, #20]
 8001fe2:	f7ff f987 	bl	80012f4 <__aeabi_ui2d>
 8001fe6:	a364      	add	r3, pc, #400	@ (adr r3, 8002178 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7ff f9fc 	bl	80013e8 <__aeabi_dmul>
 8001ff0:	f7ff fc0c 	bl	800180c <__aeabi_d2uiz>
 8001ff4:	4b64      	ldr	r3, [pc, #400]	@ (8002188 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001ff6:	8018      	strh	r0, [r3, #0]
    if ((GPIOA->IDR & GPIO_PIN_8) + (GPIOA->IDR & GPIO_PIN_9) + (GPIOA->IDR & GPIO_PIN_10) == 0)
 8001ff8:	4b64      	ldr	r3, [pc, #400]	@ (800218c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	689b      	ldr	r3, [r3, #8]
      //     polarity_C = 0;
      // }
    }

    // A
    phase_A = ema_filter1(adcBuffer[3]);
 8002000:	89a0      	ldrh	r0, [r4, #12]
 8002002:	f7ff ffb5 	bl	8001f70 <ema_filter1>
 8002006:	4d62      	ldr	r5, [pc, #392]	@ (8002190 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8002008:	6028      	str	r0, [r5, #0]
    notr = ema_filter0(adcBuffer[6]);
 800200a:	8b20      	ldrh	r0, [r4, #24]
 800200c:	f7ff ffa0 	bl	8001f50 <ema_filter0>
 8002010:	4b60      	ldr	r3, [pc, #384]	@ (8002194 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002012:	8018      	strh	r0, [r3, #0]
    if (phase_A > notr)
 8002014:	682b      	ldr	r3, [r5, #0]
 8002016:	4298      	cmp	r0, r3
 8002018:	d25e      	bcs.n	80020d8 <HAL_ADC_ConvCpltCallback+0x108>
      polarity_A = 1;
 800201a:	4b5f      	ldr	r3, [pc, #380]	@ (8002198 <HAL_ADC_ConvCpltCallback+0x1c8>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
    else
      polarity_A = 0;

    // B
    phase_B = ema_filter2(adcBuffer[4]);
 8002020:	4d58      	ldr	r5, [pc, #352]	@ (8002184 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8002022:	8a28      	ldrh	r0, [r5, #16]
 8002024:	f7ff ffb4 	bl	8001f90 <ema_filter2>
 8002028:	4c5c      	ldr	r4, [pc, #368]	@ (800219c <HAL_ADC_ConvCpltCallback+0x1cc>)
 800202a:	6020      	str	r0, [r4, #0]
    notr = ema_filter0(adcBuffer[6]);
 800202c:	8b28      	ldrh	r0, [r5, #24]
 800202e:	f7ff ff8f 	bl	8001f50 <ema_filter0>
 8002032:	4b58      	ldr	r3, [pc, #352]	@ (8002194 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002034:	8018      	strh	r0, [r3, #0]
    if (phase_B > notr)
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	4298      	cmp	r0, r3
 800203a:	d251      	bcs.n	80020e0 <HAL_ADC_ConvCpltCallback+0x110>
      polarity_B = 1;
 800203c:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
    else
      polarity_B = 0;

    // C
    phase_C = ema_filter3(adcBuffer[2]);
 8002042:	4d50      	ldr	r5, [pc, #320]	@ (8002184 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8002044:	8928      	ldrh	r0, [r5, #8]
 8002046:	f7ff ffb3 	bl	8001fb0 <ema_filter3>
 800204a:	4c56      	ldr	r4, [pc, #344]	@ (80021a4 <HAL_ADC_ConvCpltCallback+0x1d4>)
 800204c:	6020      	str	r0, [r4, #0]
    notr = ema_filter0(adcBuffer[6]);
 800204e:	8b28      	ldrh	r0, [r5, #24]
 8002050:	f7ff ff7e 	bl	8001f50 <ema_filter0>
 8002054:	4b4f      	ldr	r3, [pc, #316]	@ (8002194 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002056:	8018      	strh	r0, [r3, #0]
    if (phase_C > notr)
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	4298      	cmp	r0, r3
 800205c:	d244      	bcs.n	80020e8 <HAL_ADC_ConvCpltCallback+0x118>
      polarity_C = 1;
 800205e:	4b52      	ldr	r3, [pc, #328]	@ (80021a8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
    else
      polarity_C = 0;

    uint16_t average_phase = (uint16_t)((phase_A + phase_B + phase_C) / 3);
 8002064:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a4c      	ldr	r2, [pc, #304]	@ (800219c <HAL_ADC_ConvCpltCallback+0x1cc>)
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	4a4d      	ldr	r2, [pc, #308]	@ (80021a4 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4413      	add	r3, r2
 8002074:	4a4d      	ldr	r2, [pc, #308]	@ (80021ac <HAL_ADC_ConvCpltCallback+0x1dc>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    // motor_voltage = filtreye_koy(average_phase);
    // motor_voltage = ema_filter(average_phase);
    motor_voltage = average_phase * 10;
 800207e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	b29b      	uxth	r3, r3
 8002086:	4a4a      	ldr	r2, [pc, #296]	@ (80021b0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8002088:	8013      	strh	r3, [r2, #0]

    currentValue = adcBuffer[1];
 800208a:	4b3e      	ldr	r3, [pc, #248]	@ (8002184 <HAL_ADC_ConvCpltCallback+0x1b4>)
 800208c:	889a      	ldrh	r2, [r3, #4]
 800208e:	4b49      	ldr	r3, [pc, #292]	@ (80021b4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8002090:	801a      	strh	r2, [r3, #0]
    filtered_current = 4500 - currentValue;
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f5c3 538c 	rsb	r3, r3, #4480	@ 0x1180
 800209a:	3314      	adds	r3, #20
 800209c:	b29b      	uxth	r3, r3
 800209e:	4a46      	ldr	r2, [pc, #280]	@ (80021b8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80020a0:	8013      	strh	r3, [r2, #0]

    // TEMPORARY DEVELOPING LINES
    if (filtered_current <= 1600 && filtered_current >= 1300)
 80020a2:	8813      	ldrh	r3, [r2, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80020aa:	d821      	bhi.n	80020f0 <HAL_ADC_ConvCpltCallback+0x120>
 80020ac:	8813      	ldrh	r3, [r2, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f240 5213 	movw	r2, #1299	@ 0x513
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d91b      	bls.n	80020f0 <HAL_ADC_ConvCpltCallback+0x120>
      temporary_current_value = map(filtered_current, 1300, 1600, 0, 4430);
 80020b8:	4b3f      	ldr	r3, [pc, #252]	@ (80021b8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80020ba:	8818      	ldrh	r0, [r3, #0]
 80020bc:	f241 134e 	movw	r3, #4430	@ 0x114e
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2300      	movs	r3, #0
 80020c4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80020c8:	f240 5114 	movw	r1, #1300	@ 0x514
 80020cc:	b280      	uxth	r0, r0
 80020ce:	f7ff ff33 	bl	8001f38 <map>
 80020d2:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <HAL_ADC_ConvCpltCallback+0x1ec>)
 80020d4:	8018      	strh	r0, [r3, #0]
 80020d6:	e015      	b.n	8002104 <HAL_ADC_ConvCpltCallback+0x134>
      polarity_A = 0;
 80020d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e79f      	b.n	8002020 <HAL_ADC_ConvCpltCallback+0x50>
      polarity_B = 0;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e7ac      	b.n	8002042 <HAL_ADC_ConvCpltCallback+0x72>
      polarity_C = 0;
 80020e8:	4b2f      	ldr	r3, [pc, #188]	@ (80021a8 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e7b9      	b.n	8002064 <HAL_ADC_ConvCpltCallback+0x94>
    else if (filtered_current > 1600)
 80020f0:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80020fa:	d92c      	bls.n	8002156 <HAL_ADC_ConvCpltCallback+0x186>
      temporary_current_value = 4430;
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <HAL_ADC_ConvCpltCallback+0x1ec>)
 80020fe:	f241 124e 	movw	r2, #4430	@ 0x114e
 8002102:	801a      	strh	r2, [r3, #0]
    else
      temporary_current_value = 1300;
    // END

    speedInAdc = adcBuffer[0];
 8002104:	4b1f      	ldr	r3, [pc, #124]	@ (8002184 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	4b2d      	ldr	r3, [pc, #180]	@ (80021c0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800210a:	801a      	strh	r2, [r3, #0]

    // target_rpm

    if ((currentValue <= 1500) && (pwm_value > 100))
 800210c:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002116:	4293      	cmp	r3, r2
 8002118:	d803      	bhi.n	8002122 <HAL_ADC_ConvCpltCallback+0x152>
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d81e      	bhi.n	8002160 <HAL_ADC_ConvCpltCallback+0x190>
    {
      pwm_value = pwm_value - 1;
      LOG_VAR(pwm_value);
    }

    if (minCurrent > filtered_current)
 8002122:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	429a      	cmp	r2, r3
 800212e:	d903      	bls.n	8002138 <HAL_ADC_ConvCpltCallback+0x168>
      minCurrent = filtered_current;
 8002130:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002132:	881a      	ldrh	r2, [r3, #0]
 8002134:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002136:	801a      	strh	r2, [r3, #0]
    if (maxCurrent < filtered_current)
 8002138:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <HAL_ADC_ConvCpltCallback+0x1fc>)
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	429a      	cmp	r2, r3
 8002144:	d203      	bcs.n	800214e <HAL_ADC_ConvCpltCallback+0x17e>
      maxCurrent = filtered_current;
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <HAL_ADC_ConvCpltCallback+0x1fc>)
 800214c:	801a      	strh	r2, [r3, #0]
    phaseControlBemf();
 800214e:	f7ff fd11 	bl	8001b74 <phaseControlBemf>
  }
}
 8002152:	b003      	add	sp, #12
 8002154:	bd30      	pop	{r4, r5, pc}
      temporary_current_value = 1300;
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002158:	f240 5214 	movw	r2, #1300	@ 0x514
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	e7d1      	b.n	8002104 <HAL_ADC_ConvCpltCallback+0x134>
      pwm_value = pwm_value - 1;
 8002160:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	3a01      	subs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
      LOG_VAR(pwm_value);
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	4819      	ldr	r0, [pc, #100]	@ (80021d0 <HAL_ADC_ConvCpltCallback+0x200>)
 800216c:	f7ff fd82 	bl	8001c74 <log_variable>
 8002170:	e7d7      	b.n	8002122 <HAL_ADC_ConvCpltCallback+0x152>
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	7b94a0e1 	.word	0x7b94a0e1
 800217c:	3fa3ae47 	.word	0x3fa3ae47
 8002180:	40012400 	.word	0x40012400
 8002184:	20000654 	.word	0x20000654
 8002188:	200005d2 	.word	0x200005d2
 800218c:	40010800 	.word	0x40010800
 8002190:	200005e0 	.word	0x200005e0
 8002194:	200005c2 	.word	0x200005c2
 8002198:	200005cd 	.word	0x200005cd
 800219c:	200005dc 	.word	0x200005dc
 80021a0:	200005cc 	.word	0x200005cc
 80021a4:	200005d8 	.word	0x200005d8
 80021a8:	200005cb 	.word	0x200005cb
 80021ac:	aaaaaaab 	.word	0xaaaaaaab
 80021b0:	200005d0 	.word	0x200005d0
 80021b4:	2000064e 	.word	0x2000064e
 80021b8:	2000064c 	.word	0x2000064c
 80021bc:	20000622 	.word	0x20000622
 80021c0:	20000650 	.word	0x20000650
 80021c4:	20000640 	.word	0x20000640
 80021c8:	20000056 	.word	0x20000056
 80021cc:	20000624 	.word	0x20000624
 80021d0:	08007d5c 	.word	0x08007d5c

080021d4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <Error_Handler+0x2>

080021d8 <SystemClock_Config>:
{
 80021d8:	b500      	push	{lr}
 80021da:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021dc:	2228      	movs	r2, #40	@ 0x28
 80021de:	2100      	movs	r1, #0
 80021e0:	eb0d 0002 	add.w	r0, sp, r2
 80021e4:	f7fe f806 	bl	80001f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e8:	2300      	movs	r3, #0
 80021ea:	9305      	str	r3, [sp, #20]
 80021ec:	9306      	str	r3, [sp, #24]
 80021ee:	9307      	str	r3, [sp, #28]
 80021f0:	9308      	str	r3, [sp, #32]
 80021f2:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	9303      	str	r3, [sp, #12]
 80021fa:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021fc:	2201      	movs	r2, #1
 80021fe:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002204:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002206:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002208:	2202      	movs	r2, #2
 800220a:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220c:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800220e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002212:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002214:	a80a      	add	r0, sp, #40	@ 0x28
 8002216:	f002 fac9 	bl	80047ac <HAL_RCC_OscConfig>
 800221a:	b9d8      	cbnz	r0, 8002254 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800221c:	230f      	movs	r3, #15
 800221e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002220:	2102      	movs	r1, #2
 8002222:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002228:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800222c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800222e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002230:	a805      	add	r0, sp, #20
 8002232:	f002 fced 	bl	8004c10 <HAL_RCC_ClockConfig>
 8002236:	b978      	cbnz	r0, 8002258 <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8002238:	2312      	movs	r3, #18
 800223a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800223c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002240:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002242:	2300      	movs	r3, #0
 8002244:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002246:	a801      	add	r0, sp, #4
 8002248:	f002 fd98 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 800224c:	b930      	cbnz	r0, 800225c <SystemClock_Config+0x84>
}
 800224e:	b015      	add	sp, #84	@ 0x54
 8002250:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002254:	f7ff ffbe 	bl	80021d4 <Error_Handler>
    Error_Handler();
 8002258:	f7ff ffbc 	bl	80021d4 <Error_Handler>
    Error_Handler();
 800225c:	f7ff ffba 	bl	80021d4 <Error_Handler>

08002260 <main>:
{
 8002260:	b500      	push	{lr}
 8002262:	b083      	sub	sp, #12
  oldValue[0] = 1;
 8002264:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <main+0x138>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
  oldValue[1] = 0;
 800226a:	2400      	movs	r4, #0
 800226c:	705c      	strb	r4, [r3, #1]
  oldValue[2] = 1;
 800226e:	709a      	strb	r2, [r3, #2]
  HAL_Init();
 8002270:	f000 fcd6 	bl	8002c20 <HAL_Init>
  SystemClock_Config();
 8002274:	f7ff ffb0 	bl	80021d8 <SystemClock_Config>
  MX_GPIO_Init();
 8002278:	f7ff fd46 	bl	8001d08 <MX_GPIO_Init>
  MX_DMA_Init();
 800227c:	f7ff fd2a 	bl	8001cd4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002280:	f7ff fae4 	bl	800184c <MX_ADC1_Init>
  MX_TIM1_Init();
 8002284:	f004 fc24 	bl	8006ad0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8002288:	f004 fcac 	bl	8006be4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800228c:	f004 fac6 	bl	800681c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002290:	f004 fafc 	bl	800688c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002294:	f004 fb32 	bl	80068fc <MX_TIM4_Init>
  HAL_ADC_Start_DMA(&hadc1, adcBuffer, 7);
 8002298:	2207      	movs	r2, #7
 800229a:	4940      	ldr	r1, [pc, #256]	@ (800239c <main+0x13c>)
 800229c:	4840      	ldr	r0, [pc, #256]	@ (80023a0 <main+0x140>)
 800229e:	f000 fe19 	bl	8002ed4 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022a2:	4d40      	ldr	r5, [pc, #256]	@ (80023a4 <main+0x144>)
 80022a4:	4621      	mov	r1, r4
 80022a6:	4628      	mov	r0, r5
 80022a8:	f003 f970 	bl	800558c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80022ac:	4621      	mov	r1, r4
 80022ae:	4628      	mov	r0, r5
 80022b0:	f003 f9ea 	bl	8005688 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80022b4:	2104      	movs	r1, #4
 80022b6:	4628      	mov	r0, r5
 80022b8:	f003 f968 	bl	800558c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80022bc:	2104      	movs	r1, #4
 80022be:	4628      	mov	r0, r5
 80022c0:	f003 f9e2 	bl	8005688 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80022c4:	2108      	movs	r1, #8
 80022c6:	4628      	mov	r0, r5
 80022c8:	f003 f960 	bl	800558c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80022cc:	2108      	movs	r1, #8
 80022ce:	4628      	mov	r0, r5
 80022d0:	f003 f9da 	bl	8005688 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80022d4:	4d34      	ldr	r5, [pc, #208]	@ (80023a8 <main+0x148>)
 80022d6:	4628      	mov	r0, r5
 80022d8:	f002 fe86 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	625c      	str	r4, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start_IT(&htim3);
 80022e0:	4d32      	ldr	r5, [pc, #200]	@ (80023ac <main+0x14c>)
 80022e2:	4628      	mov	r0, r5
 80022e4:	f002 fe80 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	625c      	str	r4, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start_IT(&htim4);
 80022ec:	4d30      	ldr	r5, [pc, #192]	@ (80023b0 <main+0x150>)
 80022ee:	4628      	mov	r0, r5
 80022f0:	f002 fe7a 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim4, 0);
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	625c      	str	r4, [r3, #36]	@ 0x24
  HAL_Delay(100);
 80022f8:	2064      	movs	r0, #100	@ 0x64
 80022fa:	f000 fcb5 	bl	8002c68 <HAL_Delay>
  TIM1->CCER = 0x0000;
 80022fe:	4b2d      	ldr	r3, [pc, #180]	@ (80023b4 <main+0x154>)
 8002300:	621c      	str	r4, [r3, #32]
  previousTime2 = HAL_GetTick();
 8002302:	f000 fcab 	bl	8002c5c <HAL_GetTick>
 8002306:	4b2c      	ldr	r3, [pc, #176]	@ (80023b8 <main+0x158>)
 8002308:	6018      	str	r0, [r3, #0]
  previousTime3 = HAL_GetTick();
 800230a:	f000 fca7 	bl	8002c5c <HAL_GetTick>
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <main+0x15c>)
 8002310:	6018      	str	r0, [r3, #0]
 8002312:	e083      	b.n	800241c <main+0x1bc>
      LOG_VAR(rpm);
 8002314:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <main+0x160>)
 8002316:	6819      	ldr	r1, [r3, #0]
 8002318:	482a      	ldr	r0, [pc, #168]	@ (80023c4 <main+0x164>)
 800231a:	f7ff fcab 	bl	8001c74 <log_variable>
      LOG_POST();
 800231e:	f7ff fcc1 	bl	8001ca4 <LOG_POST>
      previousTime3 = HAL_GetTick();
 8002322:	f000 fc9b 	bl	8002c5c <HAL_GetTick>
 8002326:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <main+0x15c>)
 8002328:	6018      	str	r0, [r3, #0]
 800232a:	e0ba      	b.n	80024a2 <main+0x242>
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800232c:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <main+0x144>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2300      	movs	r3, #0
 8002332:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002334:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002336:	6353      	str	r3, [r2, #52]	@ 0x34
      TIM1->CCER = 0x0000;
 8002338:	4a1e      	ldr	r2, [pc, #120]	@ (80023b4 <main+0x154>)
 800233a:	6213      	str	r3, [r2, #32]
      previousTime2 = HAL_GetTick();
 800233c:	f000 fc8e 	bl	8002c5c <HAL_GetTick>
 8002340:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <main+0x158>)
 8002342:	6018      	str	r0, [r3, #0]
 8002344:	e0bb      	b.n	80024be <main+0x25e>
        target_rpm = map(speedInAdc, 700, 3600, 0, max_rpm_limit);
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <main+0x168>)
 8002348:	8818      	ldrh	r0, [r3, #0]
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <main+0x16c>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2300      	movs	r3, #0
 8002352:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002356:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800235a:	b280      	uxth	r0, r0
 800235c:	f7ff fdec 	bl	8001f38 <map>
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <main+0x170>)
 8002362:	8018      	strh	r0, [r3, #0]
 8002364:	e0cf      	b.n	8002506 <main+0x2a6>
          pwm_value = min_pwm_limit;
 8002366:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <main+0x174>)
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e0e1      	b.n	8002530 <main+0x2d0>
        if (pwm_value < min_pwm_limit)
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <main+0x178>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	4a18      	ldr	r2, [pc, #96]	@ (80023d4 <main+0x174>)
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	4293      	cmp	r3, r2
 8002376:	d902      	bls.n	800237e <main+0x11e>
          pwm_value = min_pwm_limit;
 8002378:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <main+0x174>)
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e0d8      	b.n	8002530 <main+0x2d0>
        else if (pwm_value < max_pwm_limit)
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <main+0x17c>)
 8002380:	881a      	ldrh	r2, [r3, #0]
 8002382:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <main+0x174>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	f240 80d2 	bls.w	8002530 <main+0x2d0>
          pwm_value += 1;
 800238c:	4a11      	ldr	r2, [pc, #68]	@ (80023d4 <main+0x174>)
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e0cc      	b.n	8002530 <main+0x2d0>
 8002396:	bf00      	nop
 8002398:	20000670 	.word	0x20000670
 800239c:	20000654 	.word	0x20000654
 80023a0:	20000384 	.word	0x20000384
 80023a4:	20000774 	.word	0x20000774
 80023a8:	2000072c 	.word	0x2000072c
 80023ac:	200006e4 	.word	0x200006e4
 80023b0:	2000069c 	.word	0x2000069c
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	2000063c 	.word	0x2000063c
 80023bc:	20000628 	.word	0x20000628
 80023c0:	2000062c 	.word	0x2000062c
 80023c4:	08007d68 	.word	0x08007d68
 80023c8:	20000650 	.word	0x20000650
 80023cc:	20000054 	.word	0x20000054
 80023d0:	200005d4 	.word	0x200005d4
 80023d4:	20000640 	.word	0x20000640
 80023d8:	2000005c 	.word	0x2000005c
 80023dc:	20000052 	.word	0x20000052
    else if ((run_status) && (speedInAdc < 800))
 80023e0:	4b70      	ldr	r3, [pc, #448]	@ (80025a4 <main+0x344>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b1d3      	cbz	r3, 800241c <main+0x1bc>
 80023e6:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <main+0x348>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80023f0:	d214      	bcs.n	800241c <main+0x1bc>
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // Mosfetleri kapatıyoruz
 80023f2:	4b6e      	ldr	r3, [pc, #440]	@ (80025ac <main+0x34c>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2300      	movs	r3, #0
 80023f8:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80023fa:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80023fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
      TIM1->CCER = 0x0000;
 80023fe:	4a6c      	ldr	r2, [pc, #432]	@ (80025b0 <main+0x350>)
 8002400:	6213      	str	r3, [r2, #32]
      flagg = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	4a6b      	ldr	r2, [pc, #428]	@ (80025b4 <main+0x354>)
 8002406:	7013      	strb	r3, [r2, #0]
      first_step_flag = 1;
 8002408:	4a6b      	ldr	r2, [pc, #428]	@ (80025b8 <main+0x358>)
 800240a:	7013      	strb	r3, [r2, #0]
      if (timeForRotorStopStatusMsFlag)
 800240c:	4b6b      	ldr	r3, [pc, #428]	@ (80025bc <main+0x35c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 80be 	bne.w	8002592 <main+0x332>
      run_status = false;
 8002416:	4b63      	ldr	r3, [pc, #396]	@ (80025a4 <main+0x344>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    hall_A = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800241c:	4c68      	ldr	r4, [pc, #416]	@ (80025c0 <main+0x360>)
 800241e:	2101      	movs	r1, #1
 8002420:	4620      	mov	r0, r4
 8002422:	f001 f94d 	bl	80036c0 <HAL_GPIO_ReadPin>
 8002426:	3800      	subs	r0, #0
 8002428:	bf18      	it	ne
 800242a:	2001      	movne	r0, #1
 800242c:	4b65      	ldr	r3, [pc, #404]	@ (80025c4 <main+0x364>)
 800242e:	7018      	strb	r0, [r3, #0]
    hall_B = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8002430:	2102      	movs	r1, #2
 8002432:	4620      	mov	r0, r4
 8002434:	f001 f944 	bl	80036c0 <HAL_GPIO_ReadPin>
 8002438:	3800      	subs	r0, #0
 800243a:	bf18      	it	ne
 800243c:	2001      	movne	r0, #1
 800243e:	4b62      	ldr	r3, [pc, #392]	@ (80025c8 <main+0x368>)
 8002440:	7018      	strb	r0, [r3, #0]
    hall_C = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002442:	2104      	movs	r1, #4
 8002444:	4620      	mov	r0, r4
 8002446:	f001 f93b 	bl	80036c0 <HAL_GPIO_ReadPin>
 800244a:	3800      	subs	r0, #0
 800244c:	bf18      	it	ne
 800244e:	2001      	movne	r0, #1
 8002450:	4b5e      	ldr	r3, [pc, #376]	@ (80025cc <main+0x36c>)
 8002452:	7018      	strb	r0, [r3, #0]
    if (!run_status)
 8002454:	4b53      	ldr	r3, [pc, #332]	@ (80025a4 <main+0x344>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b9c3      	cbnz	r3, 800248c <main+0x22c>
      pwm_value = 10.50 * motor_voltage / battery_voltage;
 800245a:	4b5d      	ldr	r3, [pc, #372]	@ (80025d0 <main+0x370>)
 800245c:	8818      	ldrh	r0, [r3, #0]
 800245e:	b280      	uxth	r0, r0
 8002460:	f7fe ff58 	bl	8001314 <__aeabi_i2d>
 8002464:	2200      	movs	r2, #0
 8002466:	4b5b      	ldr	r3, [pc, #364]	@ (80025d4 <main+0x374>)
 8002468:	f7fe ffbe 	bl	80013e8 <__aeabi_dmul>
 800246c:	4604      	mov	r4, r0
 800246e:	460d      	mov	r5, r1
 8002470:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <main+0x378>)
 8002472:	8818      	ldrh	r0, [r3, #0]
 8002474:	f7fe ff4e 	bl	8001314 <__aeabi_i2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4620      	mov	r0, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f7ff f8dc 	bl	800163c <__aeabi_ddiv>
 8002484:	f7ff f9c2 	bl	800180c <__aeabi_d2uiz>
 8002488:	4b54      	ldr	r3, [pc, #336]	@ (80025dc <main+0x37c>)
 800248a:	6018      	str	r0, [r3, #0]
    average = 0;
 800248c:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <main+0x380>)
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
    if (HAL_GetTick() - previousTime3 > 50) // && rpm_max_limit_flag)
 8002492:	f000 fbe3 	bl	8002c5c <HAL_GetTick>
 8002496:	4b53      	ldr	r3, [pc, #332]	@ (80025e4 <main+0x384>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1ac0      	subs	r0, r0, r3
 800249c:	2832      	cmp	r0, #50	@ 0x32
 800249e:	f63f af39 	bhi.w	8002314 <main+0xb4>
    if (HAL_GetTick() - previousTime2 > 1500 && run_status)
 80024a2:	f000 fbdb 	bl	8002c5c <HAL_GetTick>
 80024a6:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <main+0x388>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1ac0      	subs	r0, r0, r3
 80024ac:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80024b0:	4298      	cmp	r0, r3
 80024b2:	d904      	bls.n	80024be <main+0x25e>
 80024b4:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <main+0x344>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f47f af37 	bne.w	800232c <main+0xcc>
    if (speedInAdc >= 900) // Checked
 80024be:	4b3a      	ldr	r3, [pc, #232]	@ (80025a8 <main+0x348>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80024c8:	d38a      	bcc.n	80023e0 <main+0x180>
      timeForRotorStopStatusMsFlag = 1;
 80024ca:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <main+0x35c>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
      mode = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5); // Nitro mod
 80024d0:	2120      	movs	r1, #32
 80024d2:	4846      	ldr	r0, [pc, #280]	@ (80025ec <main+0x38c>)
 80024d4:	f001 f8f4 	bl	80036c0 <HAL_GPIO_ReadPin>
 80024d8:	2800      	cmp	r0, #0
 80024da:	bf14      	ite	ne
 80024dc:	2201      	movne	r2, #1
 80024de:	2200      	moveq	r2, #0
 80024e0:	4b43      	ldr	r3, [pc, #268]	@ (80025f0 <main+0x390>)
 80024e2:	701a      	strb	r2, [r3, #0]
      if (mode == 0)
 80024e4:	f47f af2f 	bne.w	8002346 <main+0xe6>
        target_rpm = map(speedInAdc, 700, 3600, 0, max_rpm_limit);
 80024e8:	4b2f      	ldr	r3, [pc, #188]	@ (80025a8 <main+0x348>)
 80024ea:	8818      	ldrh	r0, [r3, #0]
 80024ec:	4b41      	ldr	r3, [pc, #260]	@ (80025f4 <main+0x394>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2300      	movs	r3, #0
 80024f4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80024f8:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80024fc:	b280      	uxth	r0, r0
 80024fe:	f7ff fd1b 	bl	8001f38 <map>
 8002502:	4b3d      	ldr	r3, [pc, #244]	@ (80025f8 <main+0x398>)
 8002504:	8018      	strh	r0, [r3, #0]
      HAL_Delay(1); // Kaldırılabilir
 8002506:	2001      	movs	r0, #1
 8002508:	f000 fbae 	bl	8002c68 <HAL_Delay>
      if (rpm > target_rpm) // if (filtered_current > pedal_value_mapped)
 800250c:	4b3a      	ldr	r3, [pc, #232]	@ (80025f8 <main+0x398>)
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <main+0x39c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	f4bf af29 	bcs.w	800236c <main+0x10c>
        if (pwm_value > min_pwm_limit)
 800251a:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <main+0x3a0>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	4a2f      	ldr	r2, [pc, #188]	@ (80025dc <main+0x37c>)
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	4293      	cmp	r3, r2
 8002524:	f4bf af1f 	bcs.w	8002366 <main+0x106>
          pwm_value -= 1;
 8002528:	4a2c      	ldr	r2, [pc, #176]	@ (80025dc <main+0x37c>)
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	6013      	str	r3, [r2, #0]
      if (!run_status)
 8002530:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <main+0x344>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f af71 	bne.w	800241c <main+0x1bc>
        run_status = true;
 800253a:	2101      	movs	r1, #1
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <main+0x344>)
 800253e:	7019      	strb	r1, [r3, #0]
        hall_A = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002540:	4c1f      	ldr	r4, [pc, #124]	@ (80025c0 <main+0x360>)
 8002542:	4620      	mov	r0, r4
 8002544:	f001 f8bc 	bl	80036c0 <HAL_GPIO_ReadPin>
 8002548:	3800      	subs	r0, #0
 800254a:	bf18      	it	ne
 800254c:	2001      	movne	r0, #1
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <main+0x364>)
 8002550:	7018      	strb	r0, [r3, #0]
        hall_B = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8002552:	2102      	movs	r1, #2
 8002554:	4620      	mov	r0, r4
 8002556:	f001 f8b3 	bl	80036c0 <HAL_GPIO_ReadPin>
 800255a:	3800      	subs	r0, #0
 800255c:	bf18      	it	ne
 800255e:	2001      	movne	r0, #1
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <main+0x368>)
 8002562:	7018      	strb	r0, [r3, #0]
        hall_C = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002564:	2104      	movs	r1, #4
 8002566:	4620      	mov	r0, r4
 8002568:	f001 f8aa 	bl	80036c0 <HAL_GPIO_ReadPin>
 800256c:	3800      	subs	r0, #0
 800256e:	bf18      	it	ne
 8002570:	2001      	movne	r0, #1
 8002572:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <main+0x36c>)
 8002574:	7018      	strb	r0, [r3, #0]
        if (motor_voltage < 150)
 8002576:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <main+0x370>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b95      	cmp	r3, #149	@ 0x95
 800257e:	f63f af4d 	bhi.w	800241c <main+0x1bc>
          pwm_value = min_pwm_limit;
 8002582:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <main+0x3a0>)
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <main+0x37c>)
 8002588:	601a      	str	r2, [r3, #0]
          HAL_GPIO_EXTI_Callback(GPIO_PIN_2);
 800258a:	2004      	movs	r0, #4
 800258c:	f7ff fc30 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
 8002590:	e744      	b.n	800241c <main+0x1bc>
        timeForRotorStopStatusMs = HAL_GetTick();
 8002592:	f000 fb63 	bl	8002c5c <HAL_GetTick>
 8002596:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <main+0x3a4>)
 8002598:	6018      	str	r0, [r3, #0]
        timeForRotorStopStatusMsFlag = 0;
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <main+0x35c>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e739      	b.n	8002416 <main+0x1b6>
 80025a2:	bf00      	nop
 80025a4:	2000064b 	.word	0x2000064b
 80025a8:	20000650 	.word	0x20000650
 80025ac:	20000774 	.word	0x20000774
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	2000005f 	.word	0x2000005f
 80025b8:	20000060 	.word	0x20000060
 80025bc:	20000630 	.word	0x20000630
 80025c0:	40010800 	.word	0x40010800
 80025c4:	2000064a 	.word	0x2000064a
 80025c8:	20000649 	.word	0x20000649
 80025cc:	20000648 	.word	0x20000648
 80025d0:	200005d0 	.word	0x200005d0
 80025d4:	40250000 	.word	0x40250000
 80025d8:	200005d2 	.word	0x200005d2
 80025dc:	20000640 	.word	0x20000640
 80025e0:	20000620 	.word	0x20000620
 80025e4:	20000628 	.word	0x20000628
 80025e8:	2000063c 	.word	0x2000063c
 80025ec:	40010c00 	.word	0x40010c00
 80025f0:	20000061 	.word	0x20000061
 80025f4:	20000054 	.word	0x20000054
 80025f8:	200005d4 	.word	0x200005d4
 80025fc:	2000062c 	.word	0x2000062c
 8002600:	2000005c 	.word	0x2000005c
 8002604:	20000634 	.word	0x20000634

08002608 <set_old_value>:

uint8_t counter = 0;
uint8_t sender_flag = 0;

void set_old_value()
{
 8002608:	b508      	push	{r3, lr}

    if (!geri_vites)
 800260a:	4b69      	ldr	r3, [pc, #420]	@ (80027b0 <set_old_value+0x1a8>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 80dc 	bne.w	80027cc <set_old_value+0x1c4>
    { // İLERİ YÖN ADIMLARI

        if ((hall_A && !hall_B && hall_C) &&
 8002614:	4b67      	ldr	r3, [pc, #412]	@ (80027b4 <set_old_value+0x1ac>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b1eb      	cbz	r3, 8002656 <set_old_value+0x4e>
 800261a:	4b67      	ldr	r3, [pc, #412]	@ (80027b8 <set_old_value+0x1b0>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b9d3      	cbnz	r3, 8002656 <set_old_value+0x4e>
 8002620:	4b66      	ldr	r3, [pc, #408]	@ (80027bc <set_old_value+0x1b4>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b1bb      	cbz	r3, 8002656 <set_old_value+0x4e>
            ((oldValue[0] && !oldValue[1] && !oldValue[2]) || flagg))
 8002626:	4b66      	ldr	r3, [pc, #408]	@ (80027c0 <set_old_value+0x1b8>)
 8002628:	781b      	ldrb	r3, [r3, #0]
        if ((hall_A && !hall_B && hall_C) &&
 800262a:	b12b      	cbz	r3, 8002638 <set_old_value+0x30>
            ((oldValue[0] && !oldValue[1] && !oldValue[2]) || flagg))
 800262c:	4b64      	ldr	r3, [pc, #400]	@ (80027c0 <set_old_value+0x1b8>)
 800262e:	785b      	ldrb	r3, [r3, #1]
 8002630:	b913      	cbnz	r3, 8002638 <set_old_value+0x30>
 8002632:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <set_old_value+0x1b8>)
 8002634:	789b      	ldrb	r3, [r3, #2]
 8002636:	b113      	cbz	r3, 800263e <set_old_value+0x36>
 8002638:	4b62      	ldr	r3, [pc, #392]	@ (80027c4 <set_old_value+0x1bc>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b15b      	cbz	r3, 8002656 <set_old_value+0x4e>
        // 101'den 100'e geçiş
        {
            step = 4;
 800263e:	4b62      	ldr	r3, [pc, #392]	@ (80027c8 <set_old_value+0x1c0>)
 8002640:	2204      	movs	r2, #4
 8002642:	601a      	str	r2, [r3, #0]
            oldValue[0] = 1;
 8002644:	4a5e      	ldr	r2, [pc, #376]	@ (80027c0 <set_old_value+0x1b8>)
 8002646:	2301      	movs	r3, #1
 8002648:	7013      	strb	r3, [r2, #0]
            oldValue[1] = 0;
 800264a:	2100      	movs	r1, #0
 800264c:	7051      	strb	r1, [r2, #1]
            oldValue[2] = 1;
 800264e:	7093      	strb	r3, [r2, #2]
            flagg = 1;
 8002650:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <set_old_value+0x1bc>)
 8002652:	7013      	strb	r3, [r2, #0]
    //         {
    //             sender_flag = 1;
    //         }
    //     }
    // }
}
 8002654:	bd08      	pop	{r3, pc}
        else if ((hall_A && !hall_B && !hall_C) &&
 8002656:	4b57      	ldr	r3, [pc, #348]	@ (80027b4 <set_old_value+0x1ac>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b1eb      	cbz	r3, 8002698 <set_old_value+0x90>
 800265c:	4b56      	ldr	r3, [pc, #344]	@ (80027b8 <set_old_value+0x1b0>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b9d3      	cbnz	r3, 8002698 <set_old_value+0x90>
 8002662:	4b56      	ldr	r3, [pc, #344]	@ (80027bc <set_old_value+0x1b4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b9bb      	cbnz	r3, 8002698 <set_old_value+0x90>
                 ((oldValue[0] && oldValue[1] && !oldValue[2]) || flagg)) // 100'den 110'a geçiş
 8002668:	4b55      	ldr	r3, [pc, #340]	@ (80027c0 <set_old_value+0x1b8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
        else if ((hall_A && !hall_B && !hall_C) &&
 800266c:	b12b      	cbz	r3, 800267a <set_old_value+0x72>
                 ((oldValue[0] && oldValue[1] && !oldValue[2]) || flagg)) // 100'den 110'a geçiş
 800266e:	4b54      	ldr	r3, [pc, #336]	@ (80027c0 <set_old_value+0x1b8>)
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	b113      	cbz	r3, 800267a <set_old_value+0x72>
 8002674:	4b52      	ldr	r3, [pc, #328]	@ (80027c0 <set_old_value+0x1b8>)
 8002676:	789b      	ldrb	r3, [r3, #2]
 8002678:	b113      	cbz	r3, 8002680 <set_old_value+0x78>
 800267a:	4b52      	ldr	r3, [pc, #328]	@ (80027c4 <set_old_value+0x1bc>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b15b      	cbz	r3, 8002698 <set_old_value+0x90>
            step = 5;
 8002680:	4b51      	ldr	r3, [pc, #324]	@ (80027c8 <set_old_value+0x1c0>)
 8002682:	2205      	movs	r2, #5
 8002684:	601a      	str	r2, [r3, #0]
            oldValue[0] = 1;
 8002686:	4b4e      	ldr	r3, [pc, #312]	@ (80027c0 <set_old_value+0x1b8>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
            oldValue[1] = 0;
 800268c:	2100      	movs	r1, #0
 800268e:	7059      	strb	r1, [r3, #1]
            oldValue[2] = 0;
 8002690:	7099      	strb	r1, [r3, #2]
            flagg = 1;
 8002692:	4b4c      	ldr	r3, [pc, #304]	@ (80027c4 <set_old_value+0x1bc>)
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e7dd      	b.n	8002654 <set_old_value+0x4c>
        else if ((hall_A && hall_B && !hall_C) &&
 8002698:	4b46      	ldr	r3, [pc, #280]	@ (80027b4 <set_old_value+0x1ac>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b1eb      	cbz	r3, 80026da <set_old_value+0xd2>
 800269e:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <set_old_value+0x1b0>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b1d3      	cbz	r3, 80026da <set_old_value+0xd2>
 80026a4:	4b45      	ldr	r3, [pc, #276]	@ (80027bc <set_old_value+0x1b4>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b9bb      	cbnz	r3, 80026da <set_old_value+0xd2>
                 ((!oldValue[0] && oldValue[1] && !oldValue[2]) || flagg)) // 110'dan 010'a geçiş
 80026aa:	4b45      	ldr	r3, [pc, #276]	@ (80027c0 <set_old_value+0x1b8>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
        else if ((hall_A && hall_B && !hall_C) &&
 80026ae:	b92b      	cbnz	r3, 80026bc <set_old_value+0xb4>
                 ((!oldValue[0] && oldValue[1] && !oldValue[2]) || flagg)) // 110'dan 010'a geçiş
 80026b0:	4b43      	ldr	r3, [pc, #268]	@ (80027c0 <set_old_value+0x1b8>)
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	b113      	cbz	r3, 80026bc <set_old_value+0xb4>
 80026b6:	4b42      	ldr	r3, [pc, #264]	@ (80027c0 <set_old_value+0x1b8>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	b113      	cbz	r3, 80026c2 <set_old_value+0xba>
 80026bc:	4b41      	ldr	r3, [pc, #260]	@ (80027c4 <set_old_value+0x1bc>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b15b      	cbz	r3, 80026da <set_old_value+0xd2>
            step = 6;
 80026c2:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <set_old_value+0x1c0>)
 80026c4:	2206      	movs	r2, #6
 80026c6:	601a      	str	r2, [r3, #0]
            oldValue[0] = 1;
 80026c8:	4a3d      	ldr	r2, [pc, #244]	@ (80027c0 <set_old_value+0x1b8>)
 80026ca:	2301      	movs	r3, #1
 80026cc:	7013      	strb	r3, [r2, #0]
            oldValue[1] = 1;
 80026ce:	7053      	strb	r3, [r2, #1]
            oldValue[2] = 0;
 80026d0:	2100      	movs	r1, #0
 80026d2:	7091      	strb	r1, [r2, #2]
            flagg = 1;
 80026d4:	4a3b      	ldr	r2, [pc, #236]	@ (80027c4 <set_old_value+0x1bc>)
 80026d6:	7013      	strb	r3, [r2, #0]
 80026d8:	e7bc      	b.n	8002654 <set_old_value+0x4c>
        else if ((!hall_A && hall_B && !hall_C) &&
 80026da:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <set_old_value+0x1ac>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b9e3      	cbnz	r3, 800271a <set_old_value+0x112>
 80026e0:	4b35      	ldr	r3, [pc, #212]	@ (80027b8 <set_old_value+0x1b0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b1cb      	cbz	r3, 800271a <set_old_value+0x112>
 80026e6:	4b35      	ldr	r3, [pc, #212]	@ (80027bc <set_old_value+0x1b4>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	b9b3      	cbnz	r3, 800271a <set_old_value+0x112>
                 ((!oldValue[0] && oldValue[1] && oldValue[2]) || flagg)) // 010'dan 011'e geçiş
 80026ec:	4b34      	ldr	r3, [pc, #208]	@ (80027c0 <set_old_value+0x1b8>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
        else if ((!hall_A && hall_B && !hall_C) &&
 80026f0:	b92b      	cbnz	r3, 80026fe <set_old_value+0xf6>
                 ((!oldValue[0] && oldValue[1] && oldValue[2]) || flagg)) // 010'dan 011'e geçiş
 80026f2:	4b33      	ldr	r3, [pc, #204]	@ (80027c0 <set_old_value+0x1b8>)
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	b113      	cbz	r3, 80026fe <set_old_value+0xf6>
 80026f8:	4b31      	ldr	r3, [pc, #196]	@ (80027c0 <set_old_value+0x1b8>)
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	b913      	cbnz	r3, 8002704 <set_old_value+0xfc>
 80026fe:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <set_old_value+0x1bc>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b153      	cbz	r3, 800271a <set_old_value+0x112>
            step = 1;
 8002704:	2301      	movs	r3, #1
 8002706:	4a30      	ldr	r2, [pc, #192]	@ (80027c8 <set_old_value+0x1c0>)
 8002708:	6013      	str	r3, [r2, #0]
            oldValue[0] = 0;
 800270a:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <set_old_value+0x1b8>)
 800270c:	2100      	movs	r1, #0
 800270e:	7011      	strb	r1, [r2, #0]
            oldValue[1] = 1;
 8002710:	7053      	strb	r3, [r2, #1]
            oldValue[2] = 0;
 8002712:	7091      	strb	r1, [r2, #2]
            flagg = 1;
 8002714:	4a2b      	ldr	r2, [pc, #172]	@ (80027c4 <set_old_value+0x1bc>)
 8002716:	7013      	strb	r3, [r2, #0]
 8002718:	e79c      	b.n	8002654 <set_old_value+0x4c>
        else if ((!hall_A && hall_B && hall_C) &&
 800271a:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <set_old_value+0x1ac>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b9eb      	cbnz	r3, 800275c <set_old_value+0x154>
 8002720:	4b25      	ldr	r3, [pc, #148]	@ (80027b8 <set_old_value+0x1b0>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b1d3      	cbz	r3, 800275c <set_old_value+0x154>
 8002726:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <set_old_value+0x1b4>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b1bb      	cbz	r3, 800275c <set_old_value+0x154>
                 ((!oldValue[0] && !oldValue[1] && oldValue[2]) || flagg)) // 011'den 001'e geçiş
 800272c:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <set_old_value+0x1b8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
        else if ((!hall_A && hall_B && hall_C) &&
 8002730:	b92b      	cbnz	r3, 800273e <set_old_value+0x136>
                 ((!oldValue[0] && !oldValue[1] && oldValue[2]) || flagg)) // 011'den 001'e geçiş
 8002732:	4b23      	ldr	r3, [pc, #140]	@ (80027c0 <set_old_value+0x1b8>)
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	b913      	cbnz	r3, 800273e <set_old_value+0x136>
 8002738:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <set_old_value+0x1b8>)
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	b913      	cbnz	r3, 8002744 <set_old_value+0x13c>
 800273e:	4b21      	ldr	r3, [pc, #132]	@ (80027c4 <set_old_value+0x1bc>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b15b      	cbz	r3, 800275c <set_old_value+0x154>
            step = 2;
 8002744:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <set_old_value+0x1c0>)
 8002746:	2202      	movs	r2, #2
 8002748:	601a      	str	r2, [r3, #0]
            oldValue[0] = 0;
 800274a:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <set_old_value+0x1b8>)
 800274c:	2300      	movs	r3, #0
 800274e:	7013      	strb	r3, [r2, #0]
            oldValue[1] = 1;
 8002750:	2301      	movs	r3, #1
 8002752:	7053      	strb	r3, [r2, #1]
            oldValue[2] = 1;
 8002754:	7093      	strb	r3, [r2, #2]
            flagg = 1;
 8002756:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <set_old_value+0x1bc>)
 8002758:	7013      	strb	r3, [r2, #0]
 800275a:	e77b      	b.n	8002654 <set_old_value+0x4c>
        else if ((!hall_A && !hall_B && hall_C) &&
 800275c:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <set_old_value+0x1ac>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f af77 	bne.w	8002654 <set_old_value+0x4c>
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <set_old_value+0x1b0>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f47f af72 	bne.w	8002654 <set_old_value+0x4c>
 8002770:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <set_old_value+0x1b4>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f43f af6d 	beq.w	8002654 <set_old_value+0x4c>
                 ((oldValue[0] && !oldValue[1] && oldValue[2]) || flagg)) // 001'den 101'e geçiş
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <set_old_value+0x1b8>)
 800277c:	781b      	ldrb	r3, [r3, #0]
        else if ((!hall_A && !hall_B && hall_C) &&
 800277e:	b12b      	cbz	r3, 800278c <set_old_value+0x184>
                 ((oldValue[0] && !oldValue[1] && oldValue[2]) || flagg)) // 001'den 101'e geçiş
 8002780:	4b0f      	ldr	r3, [pc, #60]	@ (80027c0 <set_old_value+0x1b8>)
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	b913      	cbnz	r3, 800278c <set_old_value+0x184>
 8002786:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <set_old_value+0x1b8>)
 8002788:	789b      	ldrb	r3, [r3, #2]
 800278a:	b923      	cbnz	r3, 8002796 <set_old_value+0x18e>
 800278c:	4b0d      	ldr	r3, [pc, #52]	@ (80027c4 <set_old_value+0x1bc>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f43f af5f 	beq.w	8002654 <set_old_value+0x4c>
            step = 3;
 8002796:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <set_old_value+0x1c0>)
 8002798:	2203      	movs	r2, #3
 800279a:	601a      	str	r2, [r3, #0]
            oldValue[0] = 0;
 800279c:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <set_old_value+0x1b8>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
            oldValue[1] = 0;
 80027a2:	705a      	strb	r2, [r3, #1]
            oldValue[2] = 1;
 80027a4:	2201      	movs	r2, #1
 80027a6:	709a      	strb	r2, [r3, #2]
            flagg = 1;
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <set_old_value+0x1bc>)
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e752      	b.n	8002654 <set_old_value+0x4c>
 80027ae:	bf00      	nop
 80027b0:	2000005e 	.word	0x2000005e
 80027b4:	2000064a 	.word	0x2000064a
 80027b8:	20000649 	.word	0x20000649
 80027bc:	20000648 	.word	0x20000648
 80027c0:	20000670 	.word	0x20000670
 80027c4:	2000005f 	.word	0x2000005f
 80027c8:	20000644 	.word	0x20000644
        if ((hall_A && !hall_B && hall_C) && ((!oldValue[0] && !oldValue[1] && oldValue[2]) || flagg))
 80027cc:	4b75      	ldr	r3, [pc, #468]	@ (80029a4 <set_old_value+0x39c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b30b      	cbz	r3, 8002816 <set_old_value+0x20e>
 80027d2:	4b75      	ldr	r3, [pc, #468]	@ (80029a8 <set_old_value+0x3a0>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b9f3      	cbnz	r3, 8002816 <set_old_value+0x20e>
 80027d8:	4b74      	ldr	r3, [pc, #464]	@ (80029ac <set_old_value+0x3a4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b1db      	cbz	r3, 8002816 <set_old_value+0x20e>
 80027de:	4b74      	ldr	r3, [pc, #464]	@ (80029b0 <set_old_value+0x3a8>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b92b      	cbnz	r3, 80027f0 <set_old_value+0x1e8>
 80027e4:	4b72      	ldr	r3, [pc, #456]	@ (80029b0 <set_old_value+0x3a8>)
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	b913      	cbnz	r3, 80027f0 <set_old_value+0x1e8>
 80027ea:	4b71      	ldr	r3, [pc, #452]	@ (80029b0 <set_old_value+0x3a8>)
 80027ec:	789b      	ldrb	r3, [r3, #2]
 80027ee:	b913      	cbnz	r3, 80027f6 <set_old_value+0x1ee>
 80027f0:	4b70      	ldr	r3, [pc, #448]	@ (80029b4 <set_old_value+0x3ac>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b17b      	cbz	r3, 8002816 <set_old_value+0x20e>
            step = 1;
 80027f6:	4b70      	ldr	r3, [pc, #448]	@ (80029b8 <set_old_value+0x3b0>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
            if (!backEMF_mode)
 80027fc:	4b6f      	ldr	r3, [pc, #444]	@ (80029bc <set_old_value+0x3b4>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b923      	cbnz	r3, 800280c <set_old_value+0x204>
                oldValue[0] = 1;
 8002802:	4b6b      	ldr	r3, [pc, #428]	@ (80029b0 <set_old_value+0x3a8>)
 8002804:	701a      	strb	r2, [r3, #0]
                oldValue[1] = 0;
 8002806:	2100      	movs	r1, #0
 8002808:	7059      	strb	r1, [r3, #1]
                oldValue[2] = 1;
 800280a:	709a      	strb	r2, [r3, #2]
            flagg = 1;
 800280c:	4b69      	ldr	r3, [pc, #420]	@ (80029b4 <set_old_value+0x3ac>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
            log_var_analysis();
 8002812:	f7ff fa29 	bl	8001c68 <log_var_analysis>
        if ((hall_A && !hall_B && !hall_C) && ((oldValue[0] && !oldValue[1] && oldValue[2]) || flagg))
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <set_old_value+0x39c>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b313      	cbz	r3, 8002862 <set_old_value+0x25a>
 800281c:	4b62      	ldr	r3, [pc, #392]	@ (80029a8 <set_old_value+0x3a0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	b9fb      	cbnz	r3, 8002862 <set_old_value+0x25a>
 8002822:	4b62      	ldr	r3, [pc, #392]	@ (80029ac <set_old_value+0x3a4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b9e3      	cbnz	r3, 8002862 <set_old_value+0x25a>
 8002828:	4b61      	ldr	r3, [pc, #388]	@ (80029b0 <set_old_value+0x3a8>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b12b      	cbz	r3, 800283a <set_old_value+0x232>
 800282e:	4b60      	ldr	r3, [pc, #384]	@ (80029b0 <set_old_value+0x3a8>)
 8002830:	785b      	ldrb	r3, [r3, #1]
 8002832:	b913      	cbnz	r3, 800283a <set_old_value+0x232>
 8002834:	4b5e      	ldr	r3, [pc, #376]	@ (80029b0 <set_old_value+0x3a8>)
 8002836:	789b      	ldrb	r3, [r3, #2]
 8002838:	b913      	cbnz	r3, 8002840 <set_old_value+0x238>
 800283a:	4b5e      	ldr	r3, [pc, #376]	@ (80029b4 <set_old_value+0x3ac>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b183      	cbz	r3, 8002862 <set_old_value+0x25a>
            step = 2;
 8002840:	4b5d      	ldr	r3, [pc, #372]	@ (80029b8 <set_old_value+0x3b0>)
 8002842:	2202      	movs	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
            if (!backEMF_mode)
 8002846:	4b5d      	ldr	r3, [pc, #372]	@ (80029bc <set_old_value+0x3b4>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b92b      	cbnz	r3, 8002858 <set_old_value+0x250>
                oldValue[0] = 1;
 800284c:	4b58      	ldr	r3, [pc, #352]	@ (80029b0 <set_old_value+0x3a8>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
                oldValue[1] = 0;
 8002852:	2200      	movs	r2, #0
 8002854:	705a      	strb	r2, [r3, #1]
                oldValue[2] = 0;
 8002856:	709a      	strb	r2, [r3, #2]
            flagg = 1;
 8002858:	4b56      	ldr	r3, [pc, #344]	@ (80029b4 <set_old_value+0x3ac>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
            log_var_analysis();
 800285e:	f7ff fa03 	bl	8001c68 <log_var_analysis>
        if ((hall_A && hall_B && !hall_C) && ((oldValue[0] && !oldValue[1] && !oldValue[2]) || flagg))
 8002862:	4b50      	ldr	r3, [pc, #320]	@ (80029a4 <set_old_value+0x39c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b313      	cbz	r3, 80028ae <set_old_value+0x2a6>
 8002868:	4b4f      	ldr	r3, [pc, #316]	@ (80029a8 <set_old_value+0x3a0>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b1fb      	cbz	r3, 80028ae <set_old_value+0x2a6>
 800286e:	4b4f      	ldr	r3, [pc, #316]	@ (80029ac <set_old_value+0x3a4>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b9e3      	cbnz	r3, 80028ae <set_old_value+0x2a6>
 8002874:	4b4e      	ldr	r3, [pc, #312]	@ (80029b0 <set_old_value+0x3a8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b12b      	cbz	r3, 8002886 <set_old_value+0x27e>
 800287a:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <set_old_value+0x3a8>)
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	b913      	cbnz	r3, 8002886 <set_old_value+0x27e>
 8002880:	4b4b      	ldr	r3, [pc, #300]	@ (80029b0 <set_old_value+0x3a8>)
 8002882:	789b      	ldrb	r3, [r3, #2]
 8002884:	b113      	cbz	r3, 800288c <set_old_value+0x284>
 8002886:	4b4b      	ldr	r3, [pc, #300]	@ (80029b4 <set_old_value+0x3ac>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b183      	cbz	r3, 80028ae <set_old_value+0x2a6>
            step = 3;
 800288c:	4b4a      	ldr	r3, [pc, #296]	@ (80029b8 <set_old_value+0x3b0>)
 800288e:	2203      	movs	r2, #3
 8002890:	601a      	str	r2, [r3, #0]
            if (!backEMF_mode)
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <set_old_value+0x3b4>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b92b      	cbnz	r3, 80028a4 <set_old_value+0x29c>
                oldValue[0] = 1;
 8002898:	4b45      	ldr	r3, [pc, #276]	@ (80029b0 <set_old_value+0x3a8>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
                oldValue[1] = 1;
 800289e:	705a      	strb	r2, [r3, #1]
                oldValue[2] = 0;
 80028a0:	2200      	movs	r2, #0
 80028a2:	709a      	strb	r2, [r3, #2]
            flagg = 1;
 80028a4:	4b43      	ldr	r3, [pc, #268]	@ (80029b4 <set_old_value+0x3ac>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
            log_var_analysis();
 80028aa:	f7ff f9dd 	bl	8001c68 <log_var_analysis>
        if ((!hall_A && hall_B && !hall_C) && ((oldValue[0] && oldValue[1] && !oldValue[2]) || flagg))
 80028ae:	4b3d      	ldr	r3, [pc, #244]	@ (80029a4 <set_old_value+0x39c>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	bb13      	cbnz	r3, 80028fa <set_old_value+0x2f2>
 80028b4:	4b3c      	ldr	r3, [pc, #240]	@ (80029a8 <set_old_value+0x3a0>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b1fb      	cbz	r3, 80028fa <set_old_value+0x2f2>
 80028ba:	4b3c      	ldr	r3, [pc, #240]	@ (80029ac <set_old_value+0x3a4>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b9e3      	cbnz	r3, 80028fa <set_old_value+0x2f2>
 80028c0:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <set_old_value+0x3a8>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b12b      	cbz	r3, 80028d2 <set_old_value+0x2ca>
 80028c6:	4b3a      	ldr	r3, [pc, #232]	@ (80029b0 <set_old_value+0x3a8>)
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	b113      	cbz	r3, 80028d2 <set_old_value+0x2ca>
 80028cc:	4b38      	ldr	r3, [pc, #224]	@ (80029b0 <set_old_value+0x3a8>)
 80028ce:	789b      	ldrb	r3, [r3, #2]
 80028d0:	b113      	cbz	r3, 80028d8 <set_old_value+0x2d0>
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <set_old_value+0x3ac>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b183      	cbz	r3, 80028fa <set_old_value+0x2f2>
            step = 4;
 80028d8:	4b37      	ldr	r3, [pc, #220]	@ (80029b8 <set_old_value+0x3b0>)
 80028da:	2204      	movs	r2, #4
 80028dc:	601a      	str	r2, [r3, #0]
            if (!backEMF_mode)
 80028de:	4b37      	ldr	r3, [pc, #220]	@ (80029bc <set_old_value+0x3b4>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b92b      	cbnz	r3, 80028f0 <set_old_value+0x2e8>
                oldValue[0] = 0;
 80028e4:	4b32      	ldr	r3, [pc, #200]	@ (80029b0 <set_old_value+0x3a8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
                oldValue[1] = 1;
 80028ea:	2101      	movs	r1, #1
 80028ec:	7059      	strb	r1, [r3, #1]
                oldValue[2] = 0;
 80028ee:	709a      	strb	r2, [r3, #2]
            flagg = 1;
 80028f0:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <set_old_value+0x3ac>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
            log_var_analysis();
 80028f6:	f7ff f9b7 	bl	8001c68 <log_var_analysis>
        if ((!hall_A && hall_B && hall_C) && ((!oldValue[0] && oldValue[1] && !oldValue[2]) || flagg))
 80028fa:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <set_old_value+0x39c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	bb13      	cbnz	r3, 8002946 <set_old_value+0x33e>
 8002900:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <set_old_value+0x3a0>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b1fb      	cbz	r3, 8002946 <set_old_value+0x33e>
 8002906:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <set_old_value+0x3a4>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b1e3      	cbz	r3, 8002946 <set_old_value+0x33e>
 800290c:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <set_old_value+0x3a8>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b92b      	cbnz	r3, 800291e <set_old_value+0x316>
 8002912:	4b27      	ldr	r3, [pc, #156]	@ (80029b0 <set_old_value+0x3a8>)
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	b113      	cbz	r3, 800291e <set_old_value+0x316>
 8002918:	4b25      	ldr	r3, [pc, #148]	@ (80029b0 <set_old_value+0x3a8>)
 800291a:	789b      	ldrb	r3, [r3, #2]
 800291c:	b113      	cbz	r3, 8002924 <set_old_value+0x31c>
 800291e:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <set_old_value+0x3ac>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b183      	cbz	r3, 8002946 <set_old_value+0x33e>
            step = 5;
 8002924:	4b24      	ldr	r3, [pc, #144]	@ (80029b8 <set_old_value+0x3b0>)
 8002926:	2205      	movs	r2, #5
 8002928:	601a      	str	r2, [r3, #0]
            if (!backEMF_mode)
 800292a:	4b24      	ldr	r3, [pc, #144]	@ (80029bc <set_old_value+0x3b4>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b92b      	cbnz	r3, 800293c <set_old_value+0x334>
                oldValue[0] = 0;
 8002930:	4b1f      	ldr	r3, [pc, #124]	@ (80029b0 <set_old_value+0x3a8>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
                oldValue[1] = 1;
 8002936:	2201      	movs	r2, #1
 8002938:	705a      	strb	r2, [r3, #1]
                oldValue[2] = 1;
 800293a:	709a      	strb	r2, [r3, #2]
            flagg = 1;
 800293c:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <set_old_value+0x3ac>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
            log_var_analysis();
 8002942:	f7ff f991 	bl	8001c68 <log_var_analysis>
        if ((!hall_A && !hall_B && hall_C) && ((!oldValue[0] && oldValue[1] && oldValue[2]) || flagg))
 8002946:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <set_old_value+0x39c>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f47f ae82 	bne.w	8002654 <set_old_value+0x4c>
 8002950:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <set_old_value+0x3a0>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f ae7d 	bne.w	8002654 <set_old_value+0x4c>
 800295a:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <set_old_value+0x3a4>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f43f ae78 	beq.w	8002654 <set_old_value+0x4c>
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <set_old_value+0x3a8>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b92b      	cbnz	r3, 8002976 <set_old_value+0x36e>
 800296a:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <set_old_value+0x3a8>)
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	b113      	cbz	r3, 8002976 <set_old_value+0x36e>
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <set_old_value+0x3a8>)
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	b923      	cbnz	r3, 8002980 <set_old_value+0x378>
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <set_old_value+0x3ac>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f43f ae6a 	beq.w	8002654 <set_old_value+0x4c>
            step = 6;
 8002980:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <set_old_value+0x3b0>)
 8002982:	2206      	movs	r2, #6
 8002984:	601a      	str	r2, [r3, #0]
            if (!backEMF_mode)
 8002986:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <set_old_value+0x3b4>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b92b      	cbnz	r3, 8002998 <set_old_value+0x390>
                oldValue[0] = 0;
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <set_old_value+0x3a8>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
                oldValue[1] = 0;
 8002992:	705a      	strb	r2, [r3, #1]
                oldValue[2] = 1;
 8002994:	2201      	movs	r2, #1
 8002996:	709a      	strb	r2, [r3, #2]
            flagg = 1;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <set_old_value+0x3ac>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
            log_var_analysis();
 800299e:	f7ff f963 	bl	8001c68 <log_var_analysis>
}
 80029a2:	e657      	b.n	8002654 <set_old_value+0x4c>
 80029a4:	2000064a 	.word	0x2000064a
 80029a8:	20000649 	.word	0x20000649
 80029ac:	20000648 	.word	0x20000648
 80029b0:	20000670 	.word	0x20000670
 80029b4:	2000005f 	.word	0x2000005f
 80029b8:	20000644 	.word	0x20000644
 80029bc:	200005ce 	.word	0x200005ce

080029c0 <get_rpm>:
uint16_t filtered_rpm = 0;
uint32_t tim4Counter = 0;

uint16_t get_rpm(int32_t _difference_two_coummutation_time)
{
    if (_difference_two_coummutation_time == -1)
 80029c0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80029c4:	d053      	beq.n	8002a6e <get_rpm+0xae>
    {
        return 0;
    }
    rpm_sampling_array[array_index++] = _difference_two_coummutation_time;
 80029c6:	492b      	ldr	r1, [pc, #172]	@ (8002a74 <get_rpm+0xb4>)
 80029c8:	780a      	ldrb	r2, [r1, #0]
 80029ca:	1c53      	adds	r3, r2, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	700b      	strb	r3, [r1, #0]
 80029d0:	4929      	ldr	r1, [pc, #164]	@ (8002a78 <get_rpm+0xb8>)
 80029d2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]

    if (array_index == 6)
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d001      	beq.n	80029de <get_rpm+0x1e>
    {
        array_index = 0;
    }

    uint32_t sum = 0;
    for (uint8_t i = 0; i < first_filterless_count; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	e005      	b.n	80029ea <get_rpm+0x2a>
        array_index = 0;
 80029de:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <get_rpm+0xb4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e7f9      	b.n	80029da <get_rpm+0x1a>
    for (uint8_t i = 0; i < first_filterless_count; i++)
 80029e6:	3301      	adds	r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4a24      	ldr	r2, [pc, #144]	@ (8002a7c <get_rpm+0xbc>)
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d8f9      	bhi.n	80029e6 <get_rpm+0x26>
    {
        sum += rpm_sampling_array[i];
    }

    if (first_filterless_count < 6)
 80029f2:	2a05      	cmp	r2, #5
 80029f4:	d828      	bhi.n	8002a48 <get_rpm+0x88>
    {
        filtered_rpm = rpm_sampling_array[first_filterless_count++];
 80029f6:	1c51      	adds	r1, r2, #1
 80029f8:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <get_rpm+0xbc>)
 80029fa:	7019      	strb	r1, [r3, #0]
 80029fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <get_rpm+0xb8>)
 80029fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a02:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <get_rpm+0xc0>)
 8002a04:	801a      	strh	r2, [r3, #0]
        filtered_rpm = (rpm_sampling_array[0] + rpm_sampling_array[1] + rpm_sampling_array[2] +
                        rpm_sampling_array[3] + rpm_sampling_array[4] + rpm_sampling_array[5]) /
                       6; // x microsecond / 10
    }

    if (filtered_rpm == 0)
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <get_rpm+0xc0>)
 8002a08:	8818      	ldrh	r0, [r3, #0]
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d030      	beq.n	8002a70 <get_rpm+0xb0>
    {
        return 0;
    }

    filtered_rpm = (TIMER_SETTING / (filtered_rpm * COMMUTATIONS_PER_REVOLUTION));
 8002a0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a12:	00c0      	lsls	r0, r0, #3
 8002a14:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <get_rpm+0xc4>)
 8002a16:	fb93 f3f0 	sdiv	r3, r3, r0
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <get_rpm+0xc0>)
 8002a1e:	8018      	strh	r0, [r3, #0]
    if (filtered_rpm > 1450)
 8002a20:	f240 53aa 	movw	r3, #1450	@ 0x5aa
 8002a24:	4298      	cmp	r0, r3
 8002a26:	d902      	bls.n	8002a2e <get_rpm+0x6e>
        rpm_max_limit_flag = 0;
 8002a28:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <get_rpm+0xc8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	801a      	strh	r2, [r3, #0]

    if (filtered_rpm > 700)
 8002a2e:	f5b0 7f2f 	cmp.w	r0, #700	@ 0x2bc
 8002a32:	d902      	bls.n	8002a3a <get_rpm+0x7a>
        backEMF_mode = 1;
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <get_rpm+0xcc>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
    if (filtered_rpm < 600)
 8002a3a:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 8002a3e:	d217      	bcs.n	8002a70 <get_rpm+0xb0>
        backEMF_mode = 0;
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <get_rpm+0xcc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	4770      	bx	lr
        filtered_rpm = (rpm_sampling_array[0] + rpm_sampling_array[1] + rpm_sampling_array[2] +
 8002a48:	4a0b      	ldr	r2, [pc, #44]	@ (8002a78 <get_rpm+0xb8>)
 8002a4a:	6813      	ldr	r3, [r2, #0]
 8002a4c:	6851      	ldr	r1, [r2, #4]
 8002a4e:	440b      	add	r3, r1
 8002a50:	6891      	ldr	r1, [r2, #8]
 8002a52:	440b      	add	r3, r1
                        rpm_sampling_array[3] + rpm_sampling_array[4] + rpm_sampling_array[5]) /
 8002a54:	68d1      	ldr	r1, [r2, #12]
        filtered_rpm = (rpm_sampling_array[0] + rpm_sampling_array[1] + rpm_sampling_array[2] +
 8002a56:	440b      	add	r3, r1
                        rpm_sampling_array[3] + rpm_sampling_array[4] + rpm_sampling_array[5]) /
 8002a58:	6911      	ldr	r1, [r2, #16]
 8002a5a:	440b      	add	r3, r1
 8002a5c:	6952      	ldr	r2, [r2, #20]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a0b      	ldr	r2, [pc, #44]	@ (8002a90 <get_rpm+0xd0>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	089b      	lsrs	r3, r3, #2
        filtered_rpm = (rpm_sampling_array[0] + rpm_sampling_array[1] + rpm_sampling_array[2] +
 8002a68:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <get_rpm+0xc0>)
 8002a6a:	8013      	strh	r3, [r2, #0]
 8002a6c:	e7cb      	b.n	8002a06 <get_rpm+0x46>
        return 0;
 8002a6e:	2000      	movs	r0, #0

    return filtered_rpm;
}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000067b 	.word	0x2000067b
 8002a78:	2000067c 	.word	0x2000067c
 8002a7c:	2000067a 	.word	0x2000067a
 8002a80:	20000678 	.word	0x20000678
 8002a84:	005b8d80 	.word	0x005b8d80
 8002a88:	20000050 	.word	0x20000050
 8002a8c:	200005ce 	.word	0x200005ce
 8002a90:	aaaaaaab 	.word	0xaaaaaaab

08002a94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b510      	push	{r4, lr}
 8002a96:	4604      	mov	r4, r0

    if (htim->Instance == TIM2)
 8002a98:	6803      	ldr	r3, [r0, #0]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a9e:	d008      	beq.n	8002ab2 <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        rpm = 0;
    }

    if (htim->Instance == TIM3)
 8002aa0:	6822      	ldr	r2, [r4, #0]
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d008      	beq.n	8002aba <HAL_TIM_PeriodElapsedCallback+0x26>
            // abc();
            // HAL_GPIO_EXTI_Callback(GPIO_PIN_1);
        }
    }

    if (htim->Instance == TIM4)
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d008      	beq.n	8002ac2 <HAL_TIM_PeriodElapsedCallback+0x2e>
    {
        tim4Counter++;
    }
 8002ab0:	bd10      	pop	{r4, pc}
        rpm = 0;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e7f2      	b.n	8002aa0 <HAL_TIM_PeriodElapsedCallback+0xc>
        HAL_TIM_Base_Stop_IT(&htim3);
 8002aba:	4807      	ldr	r0, [pc, #28]	@ (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002abc:	f002 fac8 	bl	8005050 <HAL_TIM_Base_Stop_IT>
        if (bemf_execute_flag)
 8002ac0:	e7f2      	b.n	8002aa8 <HAL_TIM_PeriodElapsedCallback+0x14>
        tim4Counter++;
 8002ac2:	4a06      	ldr	r2, [pc, #24]	@ (8002adc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ac4:	6813      	ldr	r3, [r2, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e7f1      	b.n	8002ab0 <HAL_TIM_PeriodElapsedCallback+0x1c>
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	2000062c 	.word	0x2000062c
 8002ad8:	200006e4 	.word	0x200006e4
 8002adc:	20000674 	.word	0x20000674

08002ae0 <execute_step>:

#include "steps.h"

void execute_step(uint8_t _step)
{
 8002ae0:	b508      	push	{r3, lr}
    if (run_status)
 8002ae2:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <execute_step+0xe0>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b1b3      	cbz	r3, 8002b16 <execute_step+0x36>
    {
        switch (_step)
 8002ae8:	3801      	subs	r0, #1
 8002aea:	2805      	cmp	r0, #5
 8002aec:	d813      	bhi.n	8002b16 <execute_step+0x36>
 8002aee:	e8df f000 	tbb	[pc, r0]
 8002af2:	1303      	.short	0x1303
 8002af4:	56453524 	.word	0x56453524
        {
        case 1:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002af8:	4b32      	ldr	r3, [pc, #200]	@ (8002bc4 <execute_step+0xe4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2200      	movs	r2, #0
 8002afe:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
            TIM1->CCER = 0x00C5;
 8002b02:	4a31      	ldr	r2, [pc, #196]	@ (8002bc8 <execute_step+0xe8>)
 8002b04:	21c5      	movs	r1, #197	@ 0xc5
 8002b06:	6211      	str	r1, [r2, #32]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 8002b08:	4a30      	ldr	r2, [pc, #192]	@ (8002bcc <execute_step+0xec>)
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	635a      	str	r2, [r3, #52]	@ 0x34
            previousTime2 = HAL_GetTick();
 8002b0e:	f000 f8a5 	bl	8002c5c <HAL_GetTick>
 8002b12:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <execute_step+0xf0>)
 8002b14:	6018      	str	r0, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_value);
            previousTime2 = HAL_GetTick();
            break;
        }
    }
 8002b16:	bd08      	pop	{r3, pc}
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002b18:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc4 <execute_step+0xe4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002b20:	639a      	str	r2, [r3, #56]	@ 0x38
            TIM1->CCER = 0x0C05;
 8002b22:	4a29      	ldr	r2, [pc, #164]	@ (8002bc8 <execute_step+0xe8>)
 8002b24:	f640 4105 	movw	r1, #3077	@ 0xc05
 8002b28:	6211      	str	r1, [r2, #32]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 8002b2a:	4a28      	ldr	r2, [pc, #160]	@ (8002bcc <execute_step+0xec>)
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	635a      	str	r2, [r3, #52]	@ 0x34
            previousTime2 = HAL_GetTick();
 8002b30:	f000 f894 	bl	8002c5c <HAL_GetTick>
 8002b34:	4b26      	ldr	r3, [pc, #152]	@ (8002bd0 <execute_step+0xf0>)
 8002b36:	6018      	str	r0, [r3, #0]
            break;
 8002b38:	e7ed      	b.n	8002b16 <execute_step+0x36>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <execute_step+0xe4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002b42:	63da      	str	r2, [r3, #60]	@ 0x3c
            TIM1->CCER = 0x0C50;
 8002b44:	4a20      	ldr	r2, [pc, #128]	@ (8002bc8 <execute_step+0xe8>)
 8002b46:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 8002b4a:	6211      	str	r1, [r2, #32]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_value);
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <execute_step+0xec>)
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	639a      	str	r2, [r3, #56]	@ 0x38
            previousTime2 = HAL_GetTick();
 8002b52:	f000 f883 	bl	8002c5c <HAL_GetTick>
 8002b56:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <execute_step+0xf0>)
 8002b58:	6018      	str	r0, [r3, #0]
            break;
 8002b5a:	e7dc      	b.n	8002b16 <execute_step+0x36>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <execute_step+0xe4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2200      	movs	r2, #0
 8002b62:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002b64:	63da      	str	r2, [r3, #60]	@ 0x3c
            TIM1->CCER = 0x005C;
 8002b66:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <execute_step+0xe8>)
 8002b68:	215c      	movs	r1, #92	@ 0x5c
 8002b6a:	6211      	str	r1, [r2, #32]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_value);
 8002b6c:	4a17      	ldr	r2, [pc, #92]	@ (8002bcc <execute_step+0xec>)
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38
            previousTime2 = HAL_GetTick();
 8002b72:	f000 f873 	bl	8002c5c <HAL_GetTick>
 8002b76:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <execute_step+0xf0>)
 8002b78:	6018      	str	r0, [r3, #0]
            break;
 8002b7a:	e7cc      	b.n	8002b16 <execute_step+0x36>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <execute_step+0xe4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38
            TIM1->CCER = 0x050C;
 8002b86:	4a10      	ldr	r2, [pc, #64]	@ (8002bc8 <execute_step+0xe8>)
 8002b88:	f240 510c 	movw	r1, #1292	@ 0x50c
 8002b8c:	6211      	str	r1, [r2, #32]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_value);
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <execute_step+0xec>)
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	63da      	str	r2, [r3, #60]	@ 0x3c
            previousTime2 = HAL_GetTick();
 8002b94:	f000 f862 	bl	8002c5c <HAL_GetTick>
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <execute_step+0xf0>)
 8002b9a:	6018      	str	r0, [r3, #0]
            break;
 8002b9c:	e7bb      	b.n	8002b16 <execute_step+0x36>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <execute_step+0xe4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002ba6:	639a      	str	r2, [r3, #56]	@ 0x38
            TIM1->CCER = 0x05C0;
 8002ba8:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <execute_step+0xe8>)
 8002baa:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 8002bae:	6211      	str	r1, [r2, #32]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_value);
 8002bb0:	4a06      	ldr	r2, [pc, #24]	@ (8002bcc <execute_step+0xec>)
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
            previousTime2 = HAL_GetTick();
 8002bb6:	f000 f851 	bl	8002c5c <HAL_GetTick>
 8002bba:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <execute_step+0xf0>)
 8002bbc:	6018      	str	r0, [r3, #0]
 8002bbe:	e7aa      	b.n	8002b16 <execute_step+0x36>
 8002bc0:	2000064b 	.word	0x2000064b
 8002bc4:	20000774 	.word	0x20000774
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	20000640 	.word	0x20000640
 8002bd0:	2000063c 	.word	0x2000063c

08002bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <HAL_InitTick+0x40>)
 8002bda:	781a      	ldrb	r2, [r3, #0]
 8002bdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be4:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <HAL_InitTick+0x44>)
 8002be6:	6810      	ldr	r0, [r2, #0]
 8002be8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bec:	f000 fb1e 	bl	800322c <HAL_SYSTICK_Config>
 8002bf0:	b968      	cbnz	r0, 8002c0e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	2c0f      	cmp	r4, #15
 8002bf4:	d901      	bls.n	8002bfa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	e00a      	b.n	8002c10 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c02:	f000 faf5 	bl	80031f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_InitTick+0x48>)
 8002c08:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
}
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	bf00      	nop
 8002c14:	20000062 	.word	0x20000062
 8002c18:	20000068 	.word	0x20000068
 8002c1c:	20000064 	.word	0x20000064

08002c20 <HAL_Init>:
{
 8002c20:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c22:	4a07      	ldr	r2, [pc, #28]	@ (8002c40 <HAL_Init+0x20>)
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	f043 0310 	orr.w	r3, r3, #16
 8002c2a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c2c:	2003      	movs	r0, #3
 8002c2e:	f000 facd 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c32:	200f      	movs	r0, #15
 8002c34:	f7ff ffce 	bl	8002bd4 <HAL_InitTick>
  HAL_MspInit();
 8002c38:	f000 fd5e 	bl	80036f8 <HAL_MspInit>
}
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	bd08      	pop	{r3, pc}
 8002c40:	40022000 	.word	0x40022000

08002c44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c44:	4a03      	ldr	r2, [pc, #12]	@ (8002c54 <HAL_IncTick+0x10>)
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <HAL_IncTick+0x14>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	440b      	add	r3, r1
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000694 	.word	0x20000694
 8002c58:	20000062 	.word	0x20000062

08002c5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c5c:	4b01      	ldr	r3, [pc, #4]	@ (8002c64 <HAL_GetTick+0x8>)
 8002c5e:	6818      	ldr	r0, [r3, #0]
}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000694 	.word	0x20000694

08002c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff fff6 	bl	8002c5c <HAL_GetTick>
 8002c70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8002c76:	d002      	beq.n	8002c7e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <HAL_Delay+0x24>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c7e:	f7ff ffed 	bl	8002c5c <HAL_GetTick>
 8002c82:	1b40      	subs	r0, r0, r5
 8002c84:	42a0      	cmp	r0, r4
 8002c86:	d3fa      	bcc.n	8002c7e <HAL_Delay+0x16>
  {
  }
}
 8002c88:	bd38      	pop	{r3, r4, r5, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000062 	.word	0x20000062

08002c90 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c90:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c92:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c96:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8002c9a:	d11e      	bne.n	8002cda <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002cac:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002cb0:	d003      	beq.n	8002cba <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f98c 	bl	8001fd0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cb8:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cba:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	d1f8      	bne.n	8002cb2 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cca:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002cce:	d1f0      	bne.n	8002cb2 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd8:	e7eb      	b.n	8002cb2 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	4798      	blx	r3
}
 8002ce0:	e7ea      	b.n	8002cb8 <ADC_DMAConvCplt+0x28>

08002ce2 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002ce2:	4770      	bx	lr

08002ce4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ce4:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ce6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002ce8:	f7ff fffb 	bl	8002ce2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cec:	bd08      	pop	{r3, pc}

08002cee <HAL_ADC_ErrorCallback>:
}
 8002cee:	4770      	bx	lr

08002cf0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cf0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cf2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cf4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cfa:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cfc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d04:	f7ff fff3 	bl	8002cee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d08:	bd08      	pop	{r3, pc}
	...

08002d0c <HAL_ADC_ConfigChannel>:
{ 
 8002d0c:	b430      	push	{r4, r5}
 8002d0e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002d10:	2200      	movs	r2, #0
 8002d12:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002d14:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002d18:	2a01      	cmp	r2, #1
 8002d1a:	f000 808f 	beq.w	8002e3c <HAL_ADC_ConfigChannel+0x130>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2201      	movs	r2, #1
 8002d22:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8002d26:	684a      	ldr	r2, [r1, #4]
 8002d28:	2a06      	cmp	r2, #6
 8002d2a:	d82d      	bhi.n	8002d88 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d2c:	6804      	ldr	r4, [r0, #0]
 8002d2e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002d30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d34:	3a05      	subs	r2, #5
 8002d36:	f04f 0c1f 	mov.w	ip, #31
 8002d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d3e:	ea20 000c 	bic.w	r0, r0, ip
 8002d42:	680d      	ldr	r5, [r1, #0]
 8002d44:	fa05 f202 	lsl.w	r2, r5, r2
 8002d48:	4302      	orrs	r2, r0
 8002d4a:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d4c:	680a      	ldr	r2, [r1, #0]
 8002d4e:	2a09      	cmp	r2, #9
 8002d50:	d938      	bls.n	8002dc4 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d52:	681c      	ldr	r4, [r3, #0]
 8002d54:	68e0      	ldr	r0, [r4, #12]
 8002d56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d5a:	3a1e      	subs	r2, #30
 8002d5c:	f04f 0c07 	mov.w	ip, #7
 8002d60:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d64:	ea20 000c 	bic.w	r0, r0, ip
 8002d68:	688d      	ldr	r5, [r1, #8]
 8002d6a:	fa05 f202 	lsl.w	r2, r5, r2
 8002d6e:	4302      	orrs	r2, r0
 8002d70:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d72:	680a      	ldr	r2, [r1, #0]
 8002d74:	3a10      	subs	r2, #16
 8002d76:	2a01      	cmp	r2, #1
 8002d78:	d934      	bls.n	8002de4 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002d82:	b002      	add	sp, #8
 8002d84:	bc30      	pop	{r4, r5}
 8002d86:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002d88:	2a0c      	cmp	r2, #12
 8002d8a:	d80d      	bhi.n	8002da8 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d8c:	6805      	ldr	r5, [r0, #0]
 8002d8e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002d90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d94:	3a23      	subs	r2, #35	@ 0x23
 8002d96:	241f      	movs	r4, #31
 8002d98:	4094      	lsls	r4, r2
 8002d9a:	ea20 0004 	bic.w	r0, r0, r4
 8002d9e:	680c      	ldr	r4, [r1, #0]
 8002da0:	4094      	lsls	r4, r2
 8002da2:	4320      	orrs	r0, r4
 8002da4:	6328      	str	r0, [r5, #48]	@ 0x30
 8002da6:	e7d1      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002da8:	6805      	ldr	r5, [r0, #0]
 8002daa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002dac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002db0:	3a41      	subs	r2, #65	@ 0x41
 8002db2:	241f      	movs	r4, #31
 8002db4:	4094      	lsls	r4, r2
 8002db6:	ea20 0004 	bic.w	r0, r0, r4
 8002dba:	680c      	ldr	r4, [r1, #0]
 8002dbc:	4094      	lsls	r4, r2
 8002dbe:	4320      	orrs	r0, r4
 8002dc0:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8002dc2:	e7c3      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dc4:	681c      	ldr	r4, [r3, #0]
 8002dc6:	6920      	ldr	r0, [r4, #16]
 8002dc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002dcc:	f04f 0c07 	mov.w	ip, #7
 8002dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8002dd4:	ea20 000c 	bic.w	r0, r0, ip
 8002dd8:	688d      	ldr	r5, [r1, #8]
 8002dda:	fa05 f202 	lsl.w	r2, r5, r2
 8002dde:	4302      	orrs	r2, r0
 8002de0:	6122      	str	r2, [r4, #16]
 8002de2:	e7c6      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4816      	ldr	r0, [pc, #88]	@ (8002e40 <HAL_ADC_ConfigChannel+0x134>)
 8002de8:	4282      	cmp	r2, r0
 8002dea:	d005      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dee:	f042 0220 	orr.w	r2, r2, #32
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002df4:	2001      	movs	r0, #1
 8002df6:	e7c1      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002df8:	6890      	ldr	r0, [r2, #8]
 8002dfa:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8002dfe:	d11b      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e00:	6890      	ldr	r0, [r2, #8]
 8002e02:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002e06:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e08:	680a      	ldr	r2, [r1, #0]
 8002e0a:	2a10      	cmp	r2, #16
 8002e0c:	d001      	beq.n	8002e12 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0e:	2000      	movs	r0, #0
 8002e10:	e7b4      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e12:	4a0c      	ldr	r2, [pc, #48]	@ (8002e44 <HAL_ADC_ConfigChannel+0x138>)
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	490c      	ldr	r1, [pc, #48]	@ (8002e48 <HAL_ADC_ConfigChannel+0x13c>)
 8002e18:	fba1 1202 	umull	r1, r2, r1, r2
 8002e1c:	0c92      	lsrs	r2, r2, #18
 8002e1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002e26:	e002      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8002e28:	9a01      	ldr	r2, [sp, #4]
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002e2e:	9a01      	ldr	r2, [sp, #4]
 8002e30:	2a00      	cmp	r2, #0
 8002e32:	d1f9      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2000      	movs	r0, #0
 8002e36:	e7a1      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x70>
 8002e38:	2000      	movs	r0, #0
 8002e3a:	e79f      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002e3c:	2002      	movs	r0, #2
 8002e3e:	e7a0      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x76>
 8002e40:	40012400 	.word	0x40012400
 8002e44:	20000068 	.word	0x20000068
 8002e48:	431bde83 	.word	0x431bde83

08002e4c <ADC_Enable>:
{
 8002e4c:	b530      	push	{r4, r5, lr}
 8002e4e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e54:	6803      	ldr	r3, [r0, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	f012 0f01 	tst.w	r2, #1
 8002e5c:	d133      	bne.n	8002ec6 <ADC_Enable+0x7a>
 8002e5e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <ADC_Enable+0x80>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ed0 <ADC_Enable+0x84>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0c9b      	lsrs	r3, r3, #18
 8002e74:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002e76:	e002      	b.n	8002e7e <ADC_Enable+0x32>
      wait_loop_index--;
 8002e78:	9b01      	ldr	r3, [sp, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002e7e:	9b01      	ldr	r3, [sp, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f9      	bne.n	8002e78 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8002e84:	f7ff feea 	bl	8002c5c <HAL_GetTick>
 8002e88:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f013 0f01 	tst.w	r3, #1
 8002e92:	d116      	bne.n	8002ec2 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e94:	f7ff fee2 	bl	8002c5c <HAL_GetTick>
 8002e98:	1b43      	subs	r3, r0, r5
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d9f5      	bls.n	8002e8a <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f013 0f01 	tst.w	r3, #1
 8002ea6:	d1f0      	bne.n	8002e8a <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002eaa:	f043 0310 	orr.w	r3, r3, #16
 8002eae:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	e002      	b.n	8002ec8 <ADC_Enable+0x7c>
  return HAL_OK;
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e000      	b.n	8002ec8 <ADC_Enable+0x7c>
 8002ec6:	2000      	movs	r0, #0
}
 8002ec8:	b003      	add	sp, #12
 8002eca:	bd30      	pop	{r4, r5, pc}
 8002ecc:	20000068 	.word	0x20000068
 8002ed0:	431bde83 	.word	0x431bde83

08002ed4 <HAL_ADC_Start_DMA>:
{
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	460d      	mov	r5, r1
 8002eda:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002edc:	6801      	ldr	r1, [r0, #0]
 8002ede:	4844      	ldr	r0, [pc, #272]	@ (8002ff0 <HAL_ADC_Start_DMA+0x11c>)
 8002ee0:	4281      	cmp	r1, r0
 8002ee2:	d059      	beq.n	8002f98 <HAL_ADC_Start_DMA+0xc4>
 8002ee4:	4b43      	ldr	r3, [pc, #268]	@ (8002ff4 <HAL_ADC_Start_DMA+0x120>)
 8002ee6:	4299      	cmp	r1, r3
 8002ee8:	d056      	beq.n	8002f98 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8002eea:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d07c      	beq.n	8002fec <HAL_ADC_Start_DMA+0x118>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f7ff ffa7 	bl	8002e4c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002efe:	4607      	mov	r7, r0
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d16e      	bne.n	8002fe2 <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8002f04:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002f06:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8002f0a:	f021 0101 	bic.w	r1, r1, #1
 8002f0e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002f12:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	4b37      	ldr	r3, [pc, #220]	@ (8002ff4 <HAL_ADC_Start_DMA+0x120>)
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d044      	beq.n	8002fa6 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f1e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f22:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f24:	6853      	ldr	r3, [r2, #4]
 8002f26:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002f2a:	d005      	beq.n	8002f38 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f36:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f3a:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002f3e:	d048      	beq.n	8002fd2 <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002f42:	f023 0306 	bic.w	r3, r3, #6
 8002f46:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f4e:	6a23      	ldr	r3, [r4, #32]
 8002f50:	4a29      	ldr	r2, [pc, #164]	@ (8002ff8 <HAL_ADC_Start_DMA+0x124>)
 8002f52:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f54:	6a23      	ldr	r3, [r4, #32]
 8002f56:	4a29      	ldr	r2, [pc, #164]	@ (8002ffc <HAL_ADC_Start_DMA+0x128>)
 8002f58:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f5a:	6a23      	ldr	r3, [r4, #32]
 8002f5c:	4a28      	ldr	r2, [pc, #160]	@ (8003000 <HAL_ADC_Start_DMA+0x12c>)
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	f06f 0202 	mvn.w	r2, #2
 8002f66:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	6893      	ldr	r3, [r2, #8]
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f70:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f72:	6821      	ldr	r1, [r4, #0]
 8002f74:	4633      	mov	r3, r6
 8002f76:	462a      	mov	r2, r5
 8002f78:	314c      	adds	r1, #76	@ 0x4c
 8002f7a:	6a20      	ldr	r0, [r4, #32]
 8002f7c:	f000 f9b4 	bl	80032e8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002f88:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002f8c:	d024      	beq.n	8002fd8 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	e027      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002f98:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_ADC_Start_DMA+0x11c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002fa0:	d0a3      	beq.n	8002eea <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8002fa2:	2701      	movs	r7, #1
 8002fa4:	e020      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fa6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002fb0:	d0b4      	beq.n	8002f1c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fb2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb8:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <HAL_ADC_Start_DMA+0x11c>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002fc2:	d0b9      	beq.n	8002f38 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002fc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fd0:	e7b2      	b.n	8002f38 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fd6:	e7b7      	b.n	8002f48 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e002      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002fe8:	4638      	mov	r0, r7
 8002fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002fec:	2702      	movs	r7, #2
 8002fee:	e7fb      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x114>
 8002ff0:	40012400 	.word	0x40012400
 8002ff4:	40012800 	.word	0x40012800
 8002ff8:	08002c91 	.word	0x08002c91
 8002ffc:	08002ce5 	.word	0x08002ce5
 8003000:	08002cf1 	.word	0x08002cf1

08003004 <ADC_ConversionStop_Disable>:
{
 8003004:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003006:	6803      	ldr	r3, [r0, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	f012 0f01 	tst.w	r2, #1
 800300e:	d101      	bne.n	8003014 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8003010:	2000      	movs	r0, #0
}
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800301e:	f7ff fe1d 	bl	8002c5c <HAL_GetTick>
 8003022:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f013 0f01 	tst.w	r3, #1
 800302c:	d013      	beq.n	8003056 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800302e:	f7ff fe15 	bl	8002c5c <HAL_GetTick>
 8003032:	1b43      	subs	r3, r0, r5
 8003034:	2b02      	cmp	r3, #2
 8003036:	d9f5      	bls.n	8003024 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f013 0f01 	tst.w	r3, #1
 8003040:	d0f0      	beq.n	8003024 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003044:	f043 0310 	orr.w	r3, r3, #16
 8003048:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8003052:	2001      	movs	r0, #1
 8003054:	e7dd      	b.n	8003012 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8003056:	2000      	movs	r0, #0
 8003058:	e7db      	b.n	8003012 <ADC_ConversionStop_Disable+0xe>
	...

0800305c <HAL_ADC_Init>:
  if(hadc == NULL)
 800305c:	2800      	cmp	r0, #0
 800305e:	d07b      	beq.n	8003158 <HAL_ADC_Init+0xfc>
{
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003064:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d04d      	beq.n	8003106 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800306a:	4620      	mov	r0, r4
 800306c:	f7ff ffca 	bl	8003004 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003070:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003072:	f013 0310 	ands.w	r3, r3, #16
 8003076:	d169      	bne.n	800314c <HAL_ADC_Init+0xf0>
 8003078:	2800      	cmp	r0, #0
 800307a:	d167      	bne.n	800314c <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 800307c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800307e:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8003082:	f022 0202 	bic.w	r2, r2, #2
 8003086:	f042 0202 	orr.w	r2, r2, #2
 800308a:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800308c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800308e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003090:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003092:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003094:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003098:	68a5      	ldr	r5, [r4, #8]
 800309a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800309e:	d002      	beq.n	80030a6 <HAL_ADC_Init+0x4a>
 80030a0:	2d01      	cmp	r5, #1
 80030a2:	d036      	beq.n	8003112 <HAL_ADC_Init+0xb6>
 80030a4:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030a6:	7d26      	ldrb	r6, [r4, #20]
 80030a8:	2e01      	cmp	r6, #1
 80030aa:	d035      	beq.n	8003118 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80030ac:	6826      	ldr	r6, [r4, #0]
 80030ae:	6871      	ldr	r1, [r6, #4]
 80030b0:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 80030b4:	4329      	orrs	r1, r5
 80030b6:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80030b8:	6825      	ldr	r5, [r4, #0]
 80030ba:	68ae      	ldr	r6, [r5, #8]
 80030bc:	4927      	ldr	r1, [pc, #156]	@ (800315c <HAL_ADC_Init+0x100>)
 80030be:	4031      	ands	r1, r6
 80030c0:	4311      	orrs	r1, r2
 80030c2:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030c4:	68a1      	ldr	r1, [r4, #8]
 80030c6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80030ca:	d001      	beq.n	80030d0 <HAL_ADC_Init+0x74>
 80030cc:	2901      	cmp	r1, #1
 80030ce:	d102      	bne.n	80030d6 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80030d6:	6825      	ldr	r5, [r4, #0]
 80030d8:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80030da:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 80030de:	430b      	orrs	r3, r1
 80030e0:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <HAL_ADC_Init+0x104>)
 80030e8:	400b      	ands	r3, r1
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d025      	beq.n	800313a <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80030ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80030f0:	f023 0312 	bic.w	r3, r3, #18
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8003102:	2001      	movs	r0, #1
 8003104:	e027      	b.n	8003156 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8003106:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003108:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 800310c:	f7fe fc1a 	bl	8001944 <HAL_ADC_MspInit>
 8003110:	e7ab      	b.n	800306a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003112:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8003116:	e7c6      	b.n	80030a6 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003118:	b931      	cbnz	r1, 8003128 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800311a:	69a1      	ldr	r1, [r4, #24]
 800311c:	3901      	subs	r1, #1
 800311e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8003122:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8003126:	e7c1      	b.n	80030ac <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800312a:	f041 0120 	orr.w	r1, r1, #32
 800312e:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003130:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003132:	f041 0101 	orr.w	r1, r1, #1
 8003136:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8003138:	e7b8      	b.n	80030ac <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800313a:	2300      	movs	r3, #0
 800313c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800313e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	62a3      	str	r3, [r4, #40]	@ 0x28
 800314a:	e004      	b.n	8003156 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800314e:	f043 0310 	orr.w	r3, r3, #16
 8003152:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8003154:	2001      	movs	r0, #1
}
 8003156:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003158:	2001      	movs	r0, #1
}
 800315a:	4770      	bx	lr
 800315c:	ffe1f7fd 	.word	0xffe1f7fd
 8003160:	ff1f0efe 	.word	0xff1f0efe

08003164 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003164:	2800      	cmp	r0, #0
 8003166:	db08      	blt.n	800317a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	0109      	lsls	r1, r1, #4
 800316a:	b2c9      	uxtb	r1, r1
 800316c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003170:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003174:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003178:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317a:	f000 000f 	and.w	r0, r0, #15
 800317e:	0109      	lsls	r1, r1, #4
 8003180:	b2c9      	uxtb	r1, r1
 8003182:	4b01      	ldr	r3, [pc, #4]	@ (8003188 <__NVIC_SetPriority+0x24>)
 8003184:	5419      	strb	r1, [r3, r0]
  }
}
 8003186:	4770      	bx	lr
 8003188:	e000ed14 	.word	0xe000ed14

0800318c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003192:	f1c0 0c07 	rsb	ip, r0, #7
 8003196:	f1bc 0f04 	cmp.w	ip, #4
 800319a:	bf28      	it	cs
 800319c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a0:	1d03      	adds	r3, r0, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d90f      	bls.n	80031c6 <NVIC_EncodePriority+0x3a>
 80031a6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80031ac:	fa0e f00c 	lsl.w	r0, lr, ip
 80031b0:	ea21 0100 	bic.w	r1, r1, r0
 80031b4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b6:	fa0e fe03 	lsl.w	lr, lr, r3
 80031ba:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80031be:	ea41 0002 	orr.w	r0, r1, r2
 80031c2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c6:	2300      	movs	r3, #0
 80031c8:	e7ee      	b.n	80031a8 <NVIC_EncodePriority+0x1c>
	...

080031cc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4a07      	ldr	r2, [pc, #28]	@ (80031ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80031ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d8:	0200      	lsls	r0, r0, #8
 80031da:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031de:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80031e8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f0:	b510      	push	{r4, lr}
 80031f2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_NVIC_SetPriority+0x1c>)
 80031f6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80031fc:	f7ff ffc6 	bl	800318c <NVIC_EncodePriority>
 8003200:	4601      	mov	r1, r0
 8003202:	4620      	mov	r0, r4
 8003204:	f7ff ffae 	bl	8003164 <__NVIC_SetPriority>
}
 8003208:	bd10      	pop	{r4, pc}
 800320a:	bf00      	nop
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003210:	2800      	cmp	r0, #0
 8003212:	db07      	blt.n	8003224 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003214:	f000 021f 	and.w	r2, r0, #31
 8003218:	0940      	lsrs	r0, r0, #5
 800321a:	2301      	movs	r3, #1
 800321c:	4093      	lsls	r3, r2
 800321e:	4a02      	ldr	r2, [pc, #8]	@ (8003228 <HAL_NVIC_EnableIRQ+0x18>)
 8003220:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100

0800322c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800322c:	3801      	subs	r0, #1
 800322e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003232:	d20b      	bcs.n	800324c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003234:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003238:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	4a05      	ldr	r2, [pc, #20]	@ (8003250 <HAL_SYSTICK_Config+0x24>)
 800323c:	21f0      	movs	r1, #240	@ 0xf0
 800323e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003242:	2000      	movs	r0, #0
 8003244:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003246:	2207      	movs	r2, #7
 8003248:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800324a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800324c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003254:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003256:	2401      	movs	r4, #1
 8003258:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800325a:	40ac      	lsls	r4, r5
 800325c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800325e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003260:	6804      	ldr	r4, [r0, #0]
 8003262:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003264:	6843      	ldr	r3, [r0, #4]
 8003266:	2b10      	cmp	r3, #16
 8003268:	d005      	beq.n	8003276 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800326e:	6803      	ldr	r3, [r0, #0]
 8003270:	60da      	str	r2, [r3, #12]
  }
}
 8003272:	bc30      	pop	{r4, r5}
 8003274:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003276:	6803      	ldr	r3, [r0, #0]
 8003278:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800327a:	6803      	ldr	r3, [r0, #0]
 800327c:	60d9      	str	r1, [r3, #12]
 800327e:	e7f8      	b.n	8003272 <DMA_SetConfig+0x1e>

08003280 <HAL_DMA_Init>:
  if(hdma == NULL)
 8003280:	b350      	cbz	r0, 80032d8 <HAL_DMA_Init+0x58>
{
 8003282:	b410      	push	{r4}
 8003284:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003286:	6801      	ldr	r1, [r0, #0]
 8003288:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <HAL_DMA_Init+0x5c>)
 800328a:	440b      	add	r3, r1
 800328c:	4814      	ldr	r0, [pc, #80]	@ (80032e0 <HAL_DMA_Init+0x60>)
 800328e:	fba0 0303 	umull	r0, r3, r0, r3
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <HAL_DMA_Init+0x64>)
 800329a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800329c:	2302      	movs	r3, #2
 800329e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 80032a2:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032a4:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 80032a8:	6853      	ldr	r3, [r2, #4]
 80032aa:	6894      	ldr	r4, [r2, #8]
 80032ac:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	68d4      	ldr	r4, [r2, #12]
 80032b0:	4323      	orrs	r3, r4
 80032b2:	6914      	ldr	r4, [r2, #16]
 80032b4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	6954      	ldr	r4, [r2, #20]
 80032b8:	4323      	orrs	r3, r4
 80032ba:	6994      	ldr	r4, [r2, #24]
 80032bc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80032be:	69d4      	ldr	r4, [r2, #28]
 80032c0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80032c2:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80032c4:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c6:	2000      	movs	r0, #0
 80032c8:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 80032d0:	f882 0020 	strb.w	r0, [r2, #32]
}
 80032d4:	bc10      	pop	{r4}
 80032d6:	4770      	bx	lr
    return HAL_ERROR;
 80032d8:	2001      	movs	r0, #1
}
 80032da:	4770      	bx	lr
 80032dc:	bffdfff8 	.word	0xbffdfff8
 80032e0:	cccccccd 	.word	0xcccccccd
 80032e4:	40020000 	.word	0x40020000

080032e8 <HAL_DMA_Start_IT>:
{
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80032ec:	f890 0020 	ldrb.w	r0, [r0, #32]
 80032f0:	2801      	cmp	r0, #1
 80032f2:	d032      	beq.n	800335a <HAL_DMA_Start_IT+0x72>
 80032f4:	2001      	movs	r0, #1
 80032f6:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80032fa:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 80032fe:	b2c0      	uxtb	r0, r0
 8003300:	2801      	cmp	r0, #1
 8003302:	d004      	beq.n	800330e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8003304:	2300      	movs	r3, #0
 8003306:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 800330a:	2002      	movs	r0, #2
}
 800330c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800330e:	2002      	movs	r0, #2
 8003310:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003314:	2000      	movs	r0, #0
 8003316:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8003318:	6825      	ldr	r5, [r4, #0]
 800331a:	6828      	ldr	r0, [r5, #0]
 800331c:	f020 0001 	bic.w	r0, r0, #1
 8003320:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff ff96 	bl	8003254 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8003328:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800332a:	b15b      	cbz	r3, 8003344 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	f043 030e 	orr.w	r3, r3, #14
 8003334:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2000      	movs	r0, #0
 8003342:	e7e3      	b.n	800330c <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003344:	6822      	ldr	r2, [r4, #0]
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	f043 030a 	orr.w	r3, r3, #10
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e7ed      	b.n	8003336 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800335a:	2002      	movs	r0, #2
 800335c:	e7d6      	b.n	800330c <HAL_DMA_Start_IT+0x24>
	...

08003360 <HAL_DMA_IRQHandler>:
{
 8003360:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003362:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003364:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003366:	6804      	ldr	r4, [r0, #0]
 8003368:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800336a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800336c:	2304      	movs	r3, #4
 800336e:	408b      	lsls	r3, r1
 8003370:	4213      	tst	r3, r2
 8003372:	d035      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x80>
 8003374:	f015 0f04 	tst.w	r5, #4
 8003378:	d032      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	f013 0f20 	tst.w	r3, #32
 8003380:	d103      	bne.n	800338a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800338a:	6803      	ldr	r3, [r0, #0]
 800338c:	4a43      	ldr	r2, [pc, #268]	@ (800349c <HAL_DMA_IRQHandler+0x13c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d014      	beq.n	80033bc <HAL_DMA_IRQHandler+0x5c>
 8003392:	3214      	adds	r2, #20
 8003394:	4293      	cmp	r3, r2
 8003396:	d018      	beq.n	80033ca <HAL_DMA_IRQHandler+0x6a>
 8003398:	3214      	adds	r2, #20
 800339a:	4293      	cmp	r3, r2
 800339c:	d017      	beq.n	80033ce <HAL_DMA_IRQHandler+0x6e>
 800339e:	3214      	adds	r2, #20
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d017      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x74>
 80033a4:	3214      	adds	r2, #20
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d017      	beq.n	80033da <HAL_DMA_IRQHandler+0x7a>
 80033aa:	3214      	adds	r2, #20
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d002      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x56>
 80033b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80033b4:	e003      	b.n	80033be <HAL_DMA_IRQHandler+0x5e>
 80033b6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80033ba:	e000      	b.n	80033be <HAL_DMA_IRQHandler+0x5e>
 80033bc:	2204      	movs	r2, #4
 80033be:	4b38      	ldr	r3, [pc, #224]	@ (80034a0 <HAL_DMA_IRQHandler+0x140>)
 80033c0:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80033c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80033c4:	b103      	cbz	r3, 80033c8 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80033c6:	4798      	blx	r3
}
 80033c8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033ca:	2240      	movs	r2, #64	@ 0x40
 80033cc:	e7f7      	b.n	80033be <HAL_DMA_IRQHandler+0x5e>
 80033ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d2:	e7f4      	b.n	80033be <HAL_DMA_IRQHandler+0x5e>
 80033d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033d8:	e7f1      	b.n	80033be <HAL_DMA_IRQHandler+0x5e>
 80033da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80033de:	e7ee      	b.n	80033be <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80033e0:	2302      	movs	r3, #2
 80033e2:	408b      	lsls	r3, r1
 80033e4:	4213      	tst	r3, r2
 80033e6:	d03c      	beq.n	8003462 <HAL_DMA_IRQHandler+0x102>
 80033e8:	f015 0f02 	tst.w	r5, #2
 80033ec:	d039      	beq.n	8003462 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	f013 0f20 	tst.w	r3, #32
 80033f4:	d106      	bne.n	8003404 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	f023 030a 	bic.w	r3, r3, #10
 80033fc:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80033fe:	2301      	movs	r3, #1
 8003400:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003404:	6803      	ldr	r3, [r0, #0]
 8003406:	4a25      	ldr	r2, [pc, #148]	@ (800349c <HAL_DMA_IRQHandler+0x13c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d014      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd6>
 800340c:	3214      	adds	r2, #20
 800340e:	4293      	cmp	r3, r2
 8003410:	d01c      	beq.n	800344c <HAL_DMA_IRQHandler+0xec>
 8003412:	3214      	adds	r2, #20
 8003414:	4293      	cmp	r3, r2
 8003416:	d01b      	beq.n	8003450 <HAL_DMA_IRQHandler+0xf0>
 8003418:	3214      	adds	r2, #20
 800341a:	4293      	cmp	r3, r2
 800341c:	d01b      	beq.n	8003456 <HAL_DMA_IRQHandler+0xf6>
 800341e:	3214      	adds	r2, #20
 8003420:	4293      	cmp	r3, r2
 8003422:	d01b      	beq.n	800345c <HAL_DMA_IRQHandler+0xfc>
 8003424:	3214      	adds	r2, #20
 8003426:	4293      	cmp	r3, r2
 8003428:	d002      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd0>
 800342a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800342e:	e003      	b.n	8003438 <HAL_DMA_IRQHandler+0xd8>
 8003430:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003434:	e000      	b.n	8003438 <HAL_DMA_IRQHandler+0xd8>
 8003436:	2202      	movs	r2, #2
 8003438:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <HAL_DMA_IRQHandler+0x140>)
 800343a:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 800343c:	2300      	movs	r3, #0
 800343e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003442:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0bf      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8003448:	4798      	blx	r3
 800344a:	e7bd      	b.n	80033c8 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800344c:	2220      	movs	r2, #32
 800344e:	e7f3      	b.n	8003438 <HAL_DMA_IRQHandler+0xd8>
 8003450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003454:	e7f0      	b.n	8003438 <HAL_DMA_IRQHandler+0xd8>
 8003456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800345a:	e7ed      	b.n	8003438 <HAL_DMA_IRQHandler+0xd8>
 800345c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003460:	e7ea      	b.n	8003438 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003462:	2308      	movs	r3, #8
 8003464:	408b      	lsls	r3, r1
 8003466:	4213      	tst	r3, r2
 8003468:	d0ae      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x68>
 800346a:	f015 0f08 	tst.w	r5, #8
 800346e:	d0ab      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	f023 030e 	bic.w	r3, r3, #14
 8003476:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003478:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800347a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800347c:	2301      	movs	r3, #1
 800347e:	fa03 f202 	lsl.w	r2, r3, r2
 8003482:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003484:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003486:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800348a:	2300      	movs	r3, #0
 800348c:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003490:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003492:	2b00      	cmp	r3, #0
 8003494:	d098      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8003496:	4798      	blx	r3
  return;
 8003498:	e796      	b.n	80033c8 <HAL_DMA_IRQHandler+0x68>
 800349a:	bf00      	nop
 800349c:	40020008 	.word	0x40020008
 80034a0:	40020000 	.word	0x40020000

080034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034a8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80034aa:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ac:	e0a1      	b.n	80035f2 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034ae:	4d7e      	ldr	r5, [pc, #504]	@ (80036a8 <HAL_GPIO_Init+0x204>)
 80034b0:	42ab      	cmp	r3, r5
 80034b2:	d014      	beq.n	80034de <HAL_GPIO_Init+0x3a>
 80034b4:	d80c      	bhi.n	80034d0 <HAL_GPIO_Init+0x2c>
 80034b6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80034ba:	42ab      	cmp	r3, r5
 80034bc:	d00f      	beq.n	80034de <HAL_GPIO_Init+0x3a>
 80034be:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 80034c2:	42ab      	cmp	r3, r5
 80034c4:	d00b      	beq.n	80034de <HAL_GPIO_Init+0x3a>
 80034c6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80034ca:	42ab      	cmp	r3, r5
 80034cc:	d110      	bne.n	80034f0 <HAL_GPIO_Init+0x4c>
 80034ce:	e006      	b.n	80034de <HAL_GPIO_Init+0x3a>
 80034d0:	4d76      	ldr	r5, [pc, #472]	@ (80036ac <HAL_GPIO_Init+0x208>)
 80034d2:	42ab      	cmp	r3, r5
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x3a>
 80034d6:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 80034da:	42ab      	cmp	r3, r5
 80034dc:	d108      	bne.n	80034f0 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034de:	688b      	ldr	r3, [r1, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d050      	beq.n	8003586 <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d049      	beq.n	800357c <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80034e8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ea:	2408      	movs	r4, #8
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034ee:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034f0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80034f4:	d849      	bhi.n	800358a <HAL_GPIO_Init+0xe6>
 80034f6:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034f8:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034fc:	6833      	ldr	r3, [r6, #0]
 80034fe:	250f      	movs	r5, #15
 8003500:	4095      	lsls	r5, r2
 8003502:	ea23 0305 	bic.w	r3, r3, r5
 8003506:	fa04 f202 	lsl.w	r2, r4, r2
 800350a:	4313      	orrs	r3, r2
 800350c:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800350e:	684b      	ldr	r3, [r1, #4]
 8003510:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003514:	d06b      	beq.n	80035ee <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003516:	4b66      	ldr	r3, [pc, #408]	@ (80036b0 <HAL_GPIO_Init+0x20c>)
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	619a      	str	r2, [r3, #24]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800352a:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800352e:	1c95      	adds	r5, r2, #2
 8003530:	4b60      	ldr	r3, [pc, #384]	@ (80036b4 <HAL_GPIO_Init+0x210>)
 8003532:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003536:	f00c 0503 	and.w	r5, ip, #3
 800353a:	00ad      	lsls	r5, r5, #2
 800353c:	230f      	movs	r3, #15
 800353e:	40ab      	lsls	r3, r5
 8003540:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003544:	4b5c      	ldr	r3, [pc, #368]	@ (80036b8 <HAL_GPIO_Init+0x214>)
 8003546:	4298      	cmp	r0, r3
 8003548:	d026      	beq.n	8003598 <HAL_GPIO_Init+0xf4>
 800354a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800354e:	4298      	cmp	r0, r3
 8003550:	f000 808c 	beq.w	800366c <HAL_GPIO_Init+0x1c8>
 8003554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003558:	4298      	cmp	r0, r3
 800355a:	f000 8089 	beq.w	8003670 <HAL_GPIO_Init+0x1cc>
 800355e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003562:	4298      	cmp	r0, r3
 8003564:	d016      	beq.n	8003594 <HAL_GPIO_Init+0xf0>
 8003566:	2304      	movs	r3, #4
 8003568:	e017      	b.n	800359a <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800356a:	68cc      	ldr	r4, [r1, #12]
 800356c:	3404      	adds	r4, #4
          break;
 800356e:	e7bf      	b.n	80034f0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003570:	68cc      	ldr	r4, [r1, #12]
 8003572:	3408      	adds	r4, #8
          break;
 8003574:	e7bc      	b.n	80034f0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003576:	68cc      	ldr	r4, [r1, #12]
 8003578:	340c      	adds	r4, #12
          break;
 800357a:	e7b9      	b.n	80034f0 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 800357c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800357e:	2408      	movs	r4, #8
 8003580:	e7b6      	b.n	80034f0 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003582:	2400      	movs	r4, #0
 8003584:	e7b4      	b.n	80034f0 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003586:	2404      	movs	r4, #4
 8003588:	e7b2      	b.n	80034f0 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800358a:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800358c:	f1ac 0208 	sub.w	r2, ip, #8
 8003590:	0092      	lsls	r2, r2, #2
 8003592:	e7b3      	b.n	80034fc <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003594:	2303      	movs	r3, #3
 8003596:	e000      	b.n	800359a <HAL_GPIO_Init+0xf6>
 8003598:	2300      	movs	r3, #0
 800359a:	40ab      	lsls	r3, r5
 800359c:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 800359e:	3202      	adds	r2, #2
 80035a0:	4d44      	ldr	r5, [pc, #272]	@ (80036b4 <HAL_GPIO_Init+0x210>)
 80035a2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035a6:	684b      	ldr	r3, [r1, #4]
 80035a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80035ac:	d062      	beq.n	8003674 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035ae:	4a43      	ldr	r2, [pc, #268]	@ (80036bc <HAL_GPIO_Init+0x218>)
 80035b0:	6893      	ldr	r3, [r2, #8]
 80035b2:	ea43 030e 	orr.w	r3, r3, lr
 80035b6:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b8:	684b      	ldr	r3, [r1, #4]
 80035ba:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80035be:	d05f      	beq.n	8003680 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035c0:	4a3e      	ldr	r2, [pc, #248]	@ (80036bc <HAL_GPIO_Init+0x218>)
 80035c2:	68d3      	ldr	r3, [r2, #12]
 80035c4:	ea43 030e 	orr.w	r3, r3, lr
 80035c8:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ca:	684b      	ldr	r3, [r1, #4]
 80035cc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80035d0:	d05c      	beq.n	800368c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035d2:	4a3a      	ldr	r2, [pc, #232]	@ (80036bc <HAL_GPIO_Init+0x218>)
 80035d4:	6853      	ldr	r3, [r2, #4]
 80035d6:	ea43 030e 	orr.w	r3, r3, lr
 80035da:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035dc:	684b      	ldr	r3, [r1, #4]
 80035de:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80035e2:	d059      	beq.n	8003698 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035e4:	4a35      	ldr	r2, [pc, #212]	@ (80036bc <HAL_GPIO_Init+0x218>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	ea43 030e 	orr.w	r3, r3, lr
 80035ec:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80035ee:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f2:	680b      	ldr	r3, [r1, #0]
 80035f4:	fa33 f20c 	lsrs.w	r2, r3, ip
 80035f8:	d054      	beq.n	80036a4 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80035fa:	2201      	movs	r2, #1
 80035fc:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003600:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8003604:	ea32 0303 	bics.w	r3, r2, r3
 8003608:	d1f1      	bne.n	80035ee <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 800360a:	684b      	ldr	r3, [r1, #4]
 800360c:	2b12      	cmp	r3, #18
 800360e:	f63f af4e 	bhi.w	80034ae <HAL_GPIO_Init+0xa>
 8003612:	2b12      	cmp	r3, #18
 8003614:	f63f af6c 	bhi.w	80034f0 <HAL_GPIO_Init+0x4c>
 8003618:	a501      	add	r5, pc, #4	@ (adr r5, 8003620 <HAL_GPIO_Init+0x17c>)
 800361a:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	080034df 	.word	0x080034df
 8003624:	080034ef 	.word	0x080034ef
 8003628:	08003571 	.word	0x08003571
 800362c:	08003583 	.word	0x08003583
 8003630:	080034f1 	.word	0x080034f1
 8003634:	080034f1 	.word	0x080034f1
 8003638:	080034f1 	.word	0x080034f1
 800363c:	080034f1 	.word	0x080034f1
 8003640:	080034f1 	.word	0x080034f1
 8003644:	080034f1 	.word	0x080034f1
 8003648:	080034f1 	.word	0x080034f1
 800364c:	080034f1 	.word	0x080034f1
 8003650:	080034f1 	.word	0x080034f1
 8003654:	080034f1 	.word	0x080034f1
 8003658:	080034f1 	.word	0x080034f1
 800365c:	080034f1 	.word	0x080034f1
 8003660:	080034f1 	.word	0x080034f1
 8003664:	0800356b 	.word	0x0800356b
 8003668:	08003577 	.word	0x08003577
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800366c:	2301      	movs	r3, #1
 800366e:	e794      	b.n	800359a <HAL_GPIO_Init+0xf6>
 8003670:	2302      	movs	r3, #2
 8003672:	e792      	b.n	800359a <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003674:	4a11      	ldr	r2, [pc, #68]	@ (80036bc <HAL_GPIO_Init+0x218>)
 8003676:	6893      	ldr	r3, [r2, #8]
 8003678:	ea23 030e 	bic.w	r3, r3, lr
 800367c:	6093      	str	r3, [r2, #8]
 800367e:	e79b      	b.n	80035b8 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003680:	4a0e      	ldr	r2, [pc, #56]	@ (80036bc <HAL_GPIO_Init+0x218>)
 8003682:	68d3      	ldr	r3, [r2, #12]
 8003684:	ea23 030e 	bic.w	r3, r3, lr
 8003688:	60d3      	str	r3, [r2, #12]
 800368a:	e79e      	b.n	80035ca <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800368c:	4a0b      	ldr	r2, [pc, #44]	@ (80036bc <HAL_GPIO_Init+0x218>)
 800368e:	6853      	ldr	r3, [r2, #4]
 8003690:	ea23 030e 	bic.w	r3, r3, lr
 8003694:	6053      	str	r3, [r2, #4]
 8003696:	e7a1      	b.n	80035dc <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003698:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <HAL_GPIO_Init+0x218>)
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	ea23 030e 	bic.w	r3, r3, lr
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e7a4      	b.n	80035ee <HAL_GPIO_Init+0x14a>
  }
}
 80036a4:	b002      	add	sp, #8
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	10220000 	.word	0x10220000
 80036ac:	10310000 	.word	0x10310000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40010800 	.word	0x40010800
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036c0:	6883      	ldr	r3, [r0, #8]
 80036c2:	4219      	tst	r1, r3
 80036c4:	d001      	beq.n	80036ca <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80036c6:	2001      	movs	r0, #1
 80036c8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ca:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80036cc:	4770      	bx	lr

080036ce <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ce:	b10a      	cbz	r2, 80036d4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d0:	6101      	str	r1, [r0, #16]
 80036d2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036d4:	0409      	lsls	r1, r1, #16
 80036d6:	6101      	str	r1, [r0, #16]
  }
}
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036dc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036de:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	4203      	tst	r3, r0
 80036e4:	d100      	bne.n	80036e8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80036e6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036e8:	4b02      	ldr	r3, [pc, #8]	@ (80036f4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80036ea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036ec:	f7fe fb80 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
}
 80036f0:	e7f9      	b.n	80036e6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80036f2:	bf00      	nop
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <HAL_MspInit+0x3c>)
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	619a      	str	r2, [r3, #24]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	f002 0201 	and.w	r2, r2, #1
 800370a:	9200      	str	r2, [sp, #0]
 800370c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003714:	61da      	str	r2, [r3, #28]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003720:	4a05      	ldr	r2, [pc, #20]	@ (8003738 <HAL_MspInit+0x40>)
 8003722:	6853      	ldr	r3, [r2, #4]
 8003724:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003728:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800372c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800372e:	b002      	add	sp, #8
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	40010000 	.word	0x40010000

0800373c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800373c:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800373e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8003742:	d044      	beq.n	80037ce <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003744:	6804      	ldr	r4, [r0, #0]
 8003746:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800374a:	b29b      	uxth	r3, r3
 800374c:	f891 c000 	ldrb.w	ip, [r1]
 8003750:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8003754:	3302      	adds	r3, #2
 8003756:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800375a:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 800375e:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8003762:	698b      	ldr	r3, [r1, #24]
 8003764:	42a3      	cmp	r3, r4
 8003766:	d328      	bcc.n	80037ba <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 8003768:	1b1b      	subs	r3, r3, r4
 800376a:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800376c:	698b      	ldr	r3, [r1, #24]
 800376e:	b97b      	cbnz	r3, 8003790 <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003770:	6805      	ldr	r5, [r0, #0]
 8003772:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800377c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003780:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800378c:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003790:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003794:	d00e      	beq.n	80037b4 <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003796:	6802      	ldr	r2, [r0, #0]
 8003798:	780d      	ldrb	r5, [r1, #0]
 800379a:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037b0:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80037b4:	b924      	cbnz	r4, 80037c0 <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80037b6:	4620      	mov	r0, r4
 80037b8:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	618b      	str	r3, [r1, #24]
 80037be:	e7d5      	b.n	800376c <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037c0:	4623      	mov	r3, r4
 80037c2:	890a      	ldrh	r2, [r1, #8]
 80037c4:	6949      	ldr	r1, [r1, #20]
 80037c6:	6800      	ldr	r0, [r0, #0]
 80037c8:	f002 ffe9 	bl	800679e <USB_ReadPMA>
 80037cc:	e7f3      	b.n	80037b6 <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037ce:	6804      	ldr	r4, [r0, #0]
 80037d0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f891 c000 	ldrb.w	ip, [r1]
 80037da:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80037de:	3306      	adds	r3, #6
 80037e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80037e4:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 80037e8:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80037ec:	698b      	ldr	r3, [r1, #24]
 80037ee:	42a3      	cmp	r3, r4
 80037f0:	d32f      	bcc.n	8003852 <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 80037f2:	1b1b      	subs	r3, r3, r4
 80037f4:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80037f6:	698b      	ldr	r3, [r1, #24]
 80037f8:	b97b      	cbnz	r3, 800381a <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037fa:	6805      	ldr	r5, [r0, #0]
 80037fc:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800380e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003816:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800381a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800381e:	d10f      	bne.n	8003840 <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003820:	6802      	ldr	r2, [r0, #0]
 8003822:	f891 c000 	ldrb.w	ip, [r1]
 8003826:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003838:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800383c:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8003840:	2c00      	cmp	r4, #0
 8003842:	d0b8      	beq.n	80037b6 <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003844:	4623      	mov	r3, r4
 8003846:	894a      	ldrh	r2, [r1, #10]
 8003848:	6949      	ldr	r1, [r1, #20]
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	f002 ffa7 	bl	800679e <USB_ReadPMA>
 8003850:	e7b1      	b.n	80037b6 <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	618b      	str	r3, [r1, #24]
 8003856:	e7ce      	b.n	80037f6 <HAL_PCD_EP_DB_Receive+0xba>

08003858 <HAL_PCD_Init>:
{
 8003858:	b538      	push	{r3, r4, r5, lr}
  if (hpcd == NULL)
 800385a:	2800      	cmp	r0, #0
 800385c:	d06e      	beq.n	800393c <HAL_PCD_Init+0xe4>
 800385e:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003860:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8003864:	b1a3      	cbz	r3, 8003890 <HAL_PCD_Init+0x38>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003866:	2303      	movs	r3, #3
 8003868:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  hpcd->Init.dma_enable = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	f002 f827 	bl	80058c4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003876:	4623      	mov	r3, r4
 8003878:	f853 0b04 	ldr.w	r0, [r3], #4
 800387c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800387e:	f002 f811 	bl	80058a4 <USB_CoreInit>
 8003882:	b150      	cbz	r0, 800389a <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003884:	2302      	movs	r3, #2
 8003886:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 800388a:	2501      	movs	r5, #1
}
 800388c:	4628      	mov	r0, r5
 800388e:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003890:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 8003894:	f003 fba8 	bl	8006fe8 <HAL_PCD_MspInit>
 8003898:	e7e5      	b.n	8003866 <HAL_PCD_Init+0xe>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800389a:	2100      	movs	r1, #0
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	f002 f81b 	bl	80058d8 <USB_SetCurrentMode>
 80038a2:	4603      	mov	r3, r0
 80038a4:	b908      	cbnz	r0, 80038aa <HAL_PCD_Init+0x52>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a6:	4602      	mov	r2, r0
 80038a8:	e015      	b.n	80038d6 <HAL_PCD_Init+0x7e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038aa:	2302      	movs	r3, #2
 80038ac:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80038b0:	2501      	movs	r5, #1
 80038b2:	e7eb      	b.n	800388c <HAL_PCD_Init+0x34>
    hpcd->IN_ep[i].is_in = 1U;
 80038b4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80038b8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80038bc:	2001      	movs	r0, #1
 80038be:	7448      	strb	r0, [r1, #17]
    hpcd->IN_ep[i].num = i;
 80038c0:	740a      	strb	r2, [r1, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c2:	2000      	movs	r0, #0
 80038c4:	74c8      	strb	r0, [r1, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038c6:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038c8:	6248      	str	r0, [r1, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 80038ca:	3201      	adds	r2, #1
 80038cc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80038d0:	00c9      	lsls	r1, r1, #3
 80038d2:	5060      	str	r0, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	7920      	ldrb	r0, [r4, #4]
 80038d8:	4290      	cmp	r0, r2
 80038da:	d8eb      	bhi.n	80038b4 <HAL_PCD_Init+0x5c>
 80038dc:	e016      	b.n	800390c <HAL_PCD_Init+0xb4>
    hpcd->OUT_ep[i].is_in = 0U;
 80038de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80038e2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80038e6:	2100      	movs	r1, #0
 80038e8:	f882 1151 	strb.w	r1, [r2, #337]	@ 0x151
    hpcd->OUT_ep[i].num = i;
 80038ec:	f882 3150 	strb.w	r3, [r2, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038f0:	f882 1153 	strb.w	r1, [r2, #339]	@ 0x153
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038f4:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038f8:	f8c2 1164 	str.w	r1, [r2, #356]	@ 0x164
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003900:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003904:	f8c2 1168 	str.w	r1, [r2, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003908:	3301      	adds	r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4298      	cmp	r0, r3
 800390e:	d8e6      	bhi.n	80038de <HAL_PCD_Init+0x86>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003910:	4623      	mov	r3, r4
 8003912:	f853 0b04 	ldr.w	r0, [r3], #4
 8003916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003918:	f001 ffe0 	bl	80058dc <USB_DevInit>
 800391c:	4605      	mov	r5, r0
 800391e:	b120      	cbz	r0, 800392a <HAL_PCD_Init+0xd2>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003920:	2302      	movs	r3, #2
 8003922:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8003926:	2501      	movs	r5, #1
 8003928:	e7b0      	b.n	800388c <HAL_PCD_Init+0x34>
  hpcd->USB_Address = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	7363      	strb	r3, [r4, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800392e:	2301      	movs	r3, #1
 8003930:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	f002 fb30 	bl	8005f9a <USB_DevDisconnect>
  return HAL_OK;
 800393a:	e7a7      	b.n	800388c <HAL_PCD_Init+0x34>
    return HAL_ERROR;
 800393c:	2501      	movs	r5, #1
 800393e:	e7a5      	b.n	800388c <HAL_PCD_Init+0x34>

08003940 <HAL_PCD_Start>:
{
 8003940:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8003942:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 8003946:	2b01      	cmp	r3, #1
 8003948:	d011      	beq.n	800396e <HAL_PCD_Start+0x2e>
 800394a:	4604      	mov	r4, r0
 800394c:	2501      	movs	r5, #1
 800394e:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003952:	6800      	ldr	r0, [r0, #0]
 8003954:	f001 ffad 	bl	80058b2 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003958:	4629      	mov	r1, r5
 800395a:	4620      	mov	r0, r4
 800395c:	f003 fc59 	bl	8007212 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	f002 fb18 	bl	8005f96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003966:	2000      	movs	r0, #0
 8003968:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800396c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800396e:	2002      	movs	r0, #2
 8003970:	e7fc      	b.n	800396c <HAL_PCD_Start+0x2c>

08003972 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003972:	b570      	push	{r4, r5, r6, lr}
 8003974:	4605      	mov	r5, r0
 8003976:	460c      	mov	r4, r1
 8003978:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800397a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800397e:	f000 810e 	beq.w	8003b9e <HAL_PCD_EP_DB_Transmit+0x22c>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003982:	6802      	ldr	r2, [r0, #0]
 8003984:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8003988:	b29b      	uxth	r3, r3
 800398a:	7809      	ldrb	r1, [r1, #0]
 800398c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003990:	3302      	adds	r3, #2
 8003992:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003996:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 800399a:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 800399e:	69a3      	ldr	r3, [r4, #24]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d94e      	bls.n	8003a42 <HAL_PCD_EP_DB_Transmit+0xd0>
    {
      ep->xfer_len -= TxPctSize;
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039a8:	69a3      	ldr	r3, [r4, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d166      	bne.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039ae:	7863      	ldrb	r3, [r4, #1]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d149      	bne.n	8003a48 <HAL_PCD_EP_DB_Transmit+0xd6>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80039ba:	b292      	uxth	r2, r2
 80039bc:	4413      	add	r3, r2
 80039be:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80039c2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80039c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80039ca:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80039ce:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80039d2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80039d6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80039da:	b292      	uxth	r2, r2
 80039dc:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	7862      	ldrb	r2, [r4, #1]
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	d13c      	bne.n	8003a62 <HAL_PCD_EP_DB_Transmit+0xf0>
 80039e8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80039ec:	b292      	uxth	r2, r2
 80039ee:	4413      	add	r3, r2
 80039f0:	7822      	ldrb	r2, [r4, #0]
 80039f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80039f6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80039fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80039fe:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003a02:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003a06:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003a0a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a14:	7821      	ldrb	r1, [r4, #0]
 8003a16:	4628      	mov	r0, r5
 8003a18:	f003 fb1a 	bl	8007050 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a1c:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8003a20:	d041      	beq.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a22:	682a      	ldr	r2, [r5, #0]
 8003a24:	7821      	ldrb	r1, [r4, #0]
 8003a26:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003a40:	e031      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61a3      	str	r3, [r4, #24]
 8003a46:	e7af      	b.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d1c9      	bne.n	80039e0 <HAL_PCD_EP_DB_Transmit+0x6e>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003a52:	b292      	uxth	r2, r2
 8003a54:	4413      	add	r3, r2
 8003a56:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003a60:	e7be      	b.n	80039e0 <HAL_PCD_EP_DB_Transmit+0x6e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a62:	2a01      	cmp	r2, #1
 8003a64:	d1d6      	bne.n	8003a14 <HAL_PCD_EP_DB_Transmit+0xa2>
 8003a66:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	7822      	ldrb	r2, [r4, #0]
 8003a70:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003a7a:	e7cb      	b.n	8003a14 <HAL_PCD_EP_DB_Transmit+0xa2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a7c:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8003a80:	d00d      	beq.n	8003a9e <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a82:	6828      	ldr	r0, [r5, #0]
 8003a84:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a9e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d012      	beq.n	8003acc <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003aa6:	682a      	ldr	r2, [r5, #0]
 8003aa8:	7821      	ldrb	r1, [r4, #0]
 8003aaa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab8:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8003abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8003ac8:	2000      	movs	r0, #0
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8003acc:	6963      	ldr	r3, [r4, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8003ad2:	69e3      	ldr	r3, [r4, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ad8:	6a21      	ldr	r1, [r4, #32]
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	4299      	cmp	r1, r3
 8003ade:	d324      	bcc.n	8003b2a <HAL_PCD_EP_DB_Transmit+0x1b8>
          ep->xfer_len_db -= len;
 8003ae0:	1ac9      	subs	r1, r1, r3
 8003ae2:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ae4:	7862      	ldrb	r2, [r4, #1]
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	d144      	bne.n	8003b74 <HAL_PCD_EP_DB_Transmit+0x202>
 8003aea:	682a      	ldr	r2, [r5, #0]
 8003aec:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8003af0:	b289      	uxth	r1, r1
 8003af2:	440a      	add	r2, r1
 8003af4:	7821      	ldrb	r1, [r4, #0]
 8003af6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003afa:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8003afe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003b02:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003b06:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b08:	d91b      	bls.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x1d0>
 8003b0a:	0958      	lsrs	r0, r3, #5
 8003b0c:	f013 0f1f 	tst.w	r3, #31
 8003b10:	d100      	bne.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x1a2>
 8003b12:	3801      	subs	r0, #1
 8003b14:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8003b18:	b289      	uxth	r1, r1
 8003b1a:	0280      	lsls	r0, r0, #10
 8003b1c:	b280      	uxth	r0, r0
 8003b1e:	4301      	orrs	r1, r0
 8003b20:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003b24:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003b28:	e026      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x206>
        else if (ep->xfer_len_db == 0U)
 8003b2a:	b921      	cbnz	r1, 8003b36 <HAL_PCD_EP_DB_Transmit+0x1c4>
          ep->xfer_fill_db = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8003b32:	4613      	mov	r3, r2
 8003b34:	e7d6      	b.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003b3c:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8003b3e:	460b      	mov	r3, r1
 8003b40:	e7d0      	b.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b42:	b94b      	cbnz	r3, 8003b58 <HAL_PCD_EP_DB_Transmit+0x1e6>
 8003b44:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8003b48:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003b4c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003b50:	b289      	uxth	r1, r1
 8003b52:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003b56:	e00f      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x206>
 8003b58:	0859      	lsrs	r1, r3, #1
 8003b5a:	f013 0f01 	tst.w	r3, #1
 8003b5e:	d000      	beq.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8003b60:	3101      	adds	r1, #1
 8003b62:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	@ 0x404
 8003b66:	b280      	uxth	r0, r0
 8003b68:	0289      	lsls	r1, r1, #10
 8003b6a:	b289      	uxth	r1, r1
 8003b6c:	4301      	orrs	r1, r0
 8003b6e:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003b72:	e001      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x206>
 8003b74:	2a01      	cmp	r2, #1
 8003b76:	d006      	beq.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x214>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	8922      	ldrh	r2, [r4, #8]
 8003b7c:	6961      	ldr	r1, [r4, #20]
 8003b7e:	6828      	ldr	r0, [r5, #0]
 8003b80:	f002 fa13 	bl	8005faa <USB_WritePMA>
 8003b84:	e78f      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b86:	682a      	ldr	r2, [r5, #0]
 8003b88:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8003b8c:	b289      	uxth	r1, r1
 8003b8e:	440a      	add	r2, r1
 8003b90:	7821      	ldrb	r1, [r4, #0]
 8003b92:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003b96:	b299      	uxth	r1, r3
 8003b98:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003b9c:	e7ec      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x206>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b9e:	6802      	ldr	r2, [r0, #0]
 8003ba0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	7809      	ldrb	r1, [r1, #0]
 8003ba8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003bac:	3306      	adds	r3, #6
 8003bae:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003bb2:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 8003bb6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8003bba:	69a3      	ldr	r3, [r4, #24]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d34f      	bcc.n	8003c60 <HAL_PCD_EP_DB_Transmit+0x2ee>
      ep->xfer_len -= TxPctSize;
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8003bc4:	69a3      	ldr	r3, [r4, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d167      	bne.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x328>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bca:	7863      	ldrb	r3, [r4, #1]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d14a      	bne.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	4413      	add	r3, r2
 8003bda:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003bde:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8003be2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003be6:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003bea:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8003bee:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003bf2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	7862      	ldrb	r2, [r4, #1]
 8003c00:	2a00      	cmp	r2, #0
 8003c02:	d13d      	bne.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x30e>
 8003c04:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	7822      	ldrb	r2, [r4, #0]
 8003c0e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003c12:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003c16:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c1a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003c1e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003c22:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003c26:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c2a:	b292      	uxth	r2, r2
 8003c2c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c30:	7821      	ldrb	r1, [r4, #0]
 8003c32:	4628      	mov	r0, r5
 8003c34:	f003 fa0c 	bl	8007050 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c38:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8003c3c:	f47f af33 	bne.w	8003aa6 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c40:	682a      	ldr	r2, [r5, #0]
 8003c42:	7821      	ldrb	r1, [r4, #0]
 8003c44:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003c5e:	e722      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61a3      	str	r3, [r4, #24]
 8003c64:	e7ae      	b.n	8003bc4 <HAL_PCD_EP_DB_Transmit+0x252>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d1c8      	bne.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x28a>
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003c70:	b292      	uxth	r2, r2
 8003c72:	4413      	add	r3, r2
 8003c74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003c7e:	e7bd      	b.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x28a>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c80:	2a01      	cmp	r2, #1
 8003c82:	d1d5      	bne.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x2be>
 8003c84:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003c88:	b292      	uxth	r2, r2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	7822      	ldrb	r2, [r4, #0]
 8003c8e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003c98:	e7ca      	b.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x2be>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c9a:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8003c9e:	d10d      	bne.n	8003cbc <HAL_PCD_EP_DB_Transmit+0x34a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ca0:	6828      	ldr	r0, [r5, #0]
 8003ca2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003cbc:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f47f aef0 	bne.w	8003aa6 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8003cc6:	6963      	ldr	r3, [r4, #20]
 8003cc8:	4413      	add	r3, r2
 8003cca:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8003ccc:	69e3      	ldr	r3, [r4, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cd2:	6a21      	ldr	r1, [r4, #32]
 8003cd4:	6923      	ldr	r3, [r4, #16]
 8003cd6:	4299      	cmp	r1, r3
 8003cd8:	d324      	bcc.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x3b2>
          ep->xfer_len_db -= len;
 8003cda:	1ac9      	subs	r1, r1, r3
 8003cdc:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cde:	682a      	ldr	r2, [r5, #0]
 8003ce0:	7861      	ldrb	r1, [r4, #1]
 8003ce2:	2900      	cmp	r1, #0
 8003ce4:	d143      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x3fc>
 8003ce6:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8003cea:	b289      	uxth	r1, r1
 8003cec:	440a      	add	r2, r1
 8003cee:	7821      	ldrb	r1, [r4, #0]
 8003cf0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003cf4:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8003cf8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003cfc:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8003d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d02:	d91b      	bls.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003d04:	0958      	lsrs	r0, r3, #5
 8003d06:	f013 0f1f 	tst.w	r3, #31
 8003d0a:	d100      	bne.n	8003d0e <HAL_PCD_EP_DB_Transmit+0x39c>
 8003d0c:	3801      	subs	r0, #1
 8003d0e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8003d12:	b289      	uxth	r1, r1
 8003d14:	0280      	lsls	r0, r0, #10
 8003d16:	b280      	uxth	r0, r0
 8003d18:	4301      	orrs	r1, r0
 8003d1a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003d1e:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8003d22:	e026      	b.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x400>
        else if (ep->xfer_len_db == 0U)
 8003d24:	b921      	cbnz	r1, 8003d30 <HAL_PCD_EP_DB_Transmit+0x3be>
          ep->xfer_fill_db = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	e7d6      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x36c>
          ep->xfer_len_db = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8003d34:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003d38:	460b      	mov	r3, r1
 8003d3a:	e7d0      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x36c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d3c:	b94b      	cbnz	r3, 8003d52 <HAL_PCD_EP_DB_Transmit+0x3e0>
 8003d3e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8003d42:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003d46:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003d4a:	b289      	uxth	r1, r1
 8003d4c:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8003d50:	e00f      	b.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x400>
 8003d52:	0859      	lsrs	r1, r3, #1
 8003d54:	f013 0f01 	tst.w	r3, #1
 8003d58:	d000      	beq.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x3ea>
 8003d5a:	3101      	adds	r1, #1
 8003d5c:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	@ 0x40c
 8003d60:	b280      	uxth	r0, r0
 8003d62:	0289      	lsls	r1, r1, #10
 8003d64:	b289      	uxth	r1, r1
 8003d66:	4301      	orrs	r1, r0
 8003d68:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8003d6c:	e001      	b.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x400>
 8003d6e:	2901      	cmp	r1, #1
 8003d70:	d006      	beq.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x40e>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8962      	ldrh	r2, [r4, #10]
 8003d76:	6961      	ldr	r1, [r4, #20]
 8003d78:	6828      	ldr	r0, [r5, #0]
 8003d7a:	f002 f916 	bl	8005faa <USB_WritePMA>
 8003d7e:	e692      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d80:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8003d84:	b289      	uxth	r1, r1
 8003d86:	440a      	add	r2, r1
 8003d88:	7821      	ldrb	r1, [r4, #0]
 8003d8a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003d8e:	b299      	uxth	r1, r3
 8003d90:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8003d94:	e7ed      	b.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x400>

08003d96 <PCD_EP_ISR_Handler>:
{
 8003d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9a:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d9c:	6828      	ldr	r0, [r5, #0]
 8003d9e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8003da2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003da6:	f000 829d 	beq.w	80042e4 <PCD_EP_ISR_Handler+0x54e>
    wIstr = hpcd->Instance->ISTR;
 8003daa:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 8003dae:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8003db0:	f014 040f 	ands.w	r4, r4, #15
 8003db4:	f040 80de 	bne.w	8003f74 <PCD_EP_ISR_Handler+0x1de>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003db8:	f013 0f10 	tst.w	r3, #16
 8003dbc:	d06b      	beq.n	8003e96 <PCD_EP_ISR_Handler+0x100>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dbe:	8803      	ldrh	r3, [r0, #0]
 8003dc0:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dc2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003dc6:	f040 8099 	bne.w	8003efc <PCD_EP_ISR_Handler+0x166>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dca:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8003dce:	d0e5      	beq.n	8003d9c <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dd0:	8803      	ldrh	r3, [r0, #0]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd6:	051b      	lsls	r3, r3, #20
 8003dd8:	0d1b      	lsrs	r3, r3, #20
 8003dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dde:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003de0:	6828      	ldr	r0, [r5, #0]
 8003de2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8003dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003df0:	3306      	adds	r3, #6
 8003df2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003df6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8003dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfe:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e02:	b18b      	cbz	r3, 8003e28 <PCD_EP_ISR_Handler+0x92>
 8003e04:	f8d5 1164 	ldr.w	r1, [r5, #356]	@ 0x164
 8003e08:	b171      	cbz	r1, 8003e28 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e0a:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8003e0e:	f002 fcc6 	bl	800679e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003e12:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
 8003e16:	f8d5 216c 	ldr.w	r2, [r5, #364]	@ 0x16c
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f8c5 3164 	str.w	r3, [r5, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e20:	2100      	movs	r1, #0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f003 f908 	bl	8007038 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e28:	682a      	ldr	r2, [r5, #0]
 8003e2a:	8813      	ldrh	r3, [r2, #0]
 8003e2c:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e2e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003e32:	d1b3      	bne.n	8003d9c <PCD_EP_ISR_Handler+0x6>
 8003e34:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 8003e38:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8003e3c:	d0ae      	beq.n	8003d9c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e3e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	441a      	add	r2, r3
 8003e46:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8003e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4e:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8003e52:	f8d5 3160 	ldr.w	r3, [r5, #352]	@ 0x160
 8003e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e58:	d973      	bls.n	8003f42 <PCD_EP_ISR_Handler+0x1ac>
 8003e5a:	0959      	lsrs	r1, r3, #5
 8003e5c:	f013 0f1f 	tst.w	r3, #31
 8003e60:	d100      	bne.n	8003e64 <PCD_EP_ISR_Handler+0xce>
 8003e62:	3901      	subs	r1, #1
 8003e64:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	0289      	lsls	r1, r1, #10
 8003e6c:	b289      	uxth	r1, r1
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e74:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e78:	682a      	ldr	r2, [r5, #0]
 8003e7a:	8813      	ldrh	r3, [r2, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e86:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e92:	8013      	strh	r3, [r2, #0]
 8003e94:	e782      	b.n	8003d9c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e96:	8803      	ldrh	r3, [r0, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003eae:	682a      	ldr	r2, [r5, #0]
 8003eb0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	7c29      	ldrb	r1, [r5, #16]
 8003eb8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003ec2:	f8b2 3400 	ldrh.w	r3, [r2, #1024]	@ 0x400
 8003ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eca:	62eb      	str	r3, [r5, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8003ecc:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8003ece:	441a      	add	r2, r3
 8003ed0:	626a      	str	r2, [r5, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f003 f8bb 	bl	8007050 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003eda:	7b6b      	ldrb	r3, [r5, #13]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f43f af5d 	beq.w	8003d9c <PCD_EP_ISR_Handler+0x6>
 8003ee2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af59 	bne.w	8003d9c <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003eea:	7b6b      	ldrb	r3, [r5, #13]
 8003eec:	682a      	ldr	r2, [r5, #0]
 8003eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef2:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	736b      	strb	r3, [r5, #13]
 8003efa:	e74f      	b.n	8003d9c <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003efc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8003f06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f0a:	3306      	adds	r3, #6
 8003f0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003f10:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8003f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f18:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f1c:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8003f20:	f505 7126 	add.w	r1, r5, #664	@ 0x298
 8003f24:	f002 fc3b 	bl	800679e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f28:	682a      	ldr	r2, [r5, #0]
 8003f2a:	8813      	ldrh	r3, [r2, #0]
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f30:	051b      	lsls	r3, r3, #20
 8003f32:	0d1b      	lsrs	r3, r3, #20
 8003f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f38:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f003 f874 	bl	8007028 <HAL_PCD_SetupStageCallback>
 8003f40:	e72c      	b.n	8003d9c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f42:	b94b      	cbnz	r3, 8003f58 <PCD_EP_ISR_Handler+0x1c2>
 8003f44:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8003f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8003f56:	e78f      	b.n	8003e78 <PCD_EP_ISR_Handler+0xe2>
 8003f58:	0859      	lsrs	r1, r3, #1
 8003f5a:	f013 0f01 	tst.w	r3, #1
 8003f5e:	d000      	beq.n	8003f62 <PCD_EP_ISR_Handler+0x1cc>
 8003f60:	3101      	adds	r1, #1
 8003f62:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8003f66:	b298      	uxth	r0, r3
 8003f68:	028b      	lsls	r3, r1, #10
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4303      	orrs	r3, r0
 8003f6e:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8003f72:	e781      	b.n	8003e78 <PCD_EP_ISR_Handler+0xe2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f74:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003f78:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f7a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003f7e:	d150      	bne.n	8004022 <PCD_EP_ISR_Handler+0x28c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f80:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003f84:	f43f af0a 	beq.w	8003d9c <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8003f88:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003f8c:	00c9      	lsls	r1, r1, #3
 8003f8e:	3110      	adds	r1, #16
 8003f90:	4429      	add	r1, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f92:	682a      	ldr	r2, [r5, #0]
 8003f94:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003fb0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003fb4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003fb8:	7cdb      	ldrb	r3, [r3, #19]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	f000 80f2 	beq.w	80041a4 <PCD_EP_ISR_Handler+0x40e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003fc0:	f416 7f80 	tst.w	r6, #256	@ 0x100
 8003fc4:	f040 8189 	bne.w	80042da <PCD_EP_ISR_Handler+0x544>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fc8:	6828      	ldr	r0, [r5, #0]
 8003fca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003fd4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003fd8:	7c16      	ldrb	r6, [r2, #16]
 8003fda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003fde:	3302      	adds	r3, #2
 8003fe0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003fe4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8003fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8003fec:	1c62      	adds	r2, r4, #1
 8003fee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ff2:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f240 8152 	bls.w	80042a0 <PCD_EP_ISR_Handler+0x50a>
              ep->xfer_len -= TxPctSize;
 8003ffc:	1c67      	adds	r7, r4, #1
 8003ffe:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
            if (ep->xfer_len == 0U)
 8004008:	1c62      	adds	r2, r4, #1
 800400a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800400e:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8004012:	2a00      	cmp	r2, #0
 8004014:	f040 814b 	bne.w	80042ae <PCD_EP_ISR_Handler+0x518>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	f003 f818 	bl	8007050 <HAL_PCD_DataInStageCallback>
 8004020:	e6bc      	b.n	8003d9c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004022:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	051b      	lsls	r3, r3, #20
 800402c:	0d1b      	lsrs	r3, r3, #20
 800402e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004032:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8004036:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800403a:	00c9      	lsls	r1, r1, #3
 800403c:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004040:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8004044:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004048:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800404c:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d142      	bne.n	80040da <PCD_EP_ISR_Handler+0x344>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004054:	6828      	ldr	r0, [r5, #0]
 8004056:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800405a:	b29b      	uxth	r3, r3
 800405c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004060:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004064:	f892 2150 	ldrb.w	r2, [r2, #336]	@ 0x150
 8004068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800406c:	3306      	adds	r3, #6
 800406e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004072:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 8004076:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 800407a:	bb17      	cbnz	r7, 80040c2 <PCD_EP_ISR_Handler+0x32c>
        ep->xfer_count += count;
 800407c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004080:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004084:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8004088:	443a      	add	r2, r7
 800408a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 800408e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8004092:	443a      	add	r2, r7
 8004094:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004098:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800409c:	b13b      	cbz	r3, 80040ae <PCD_EP_ISR_Handler+0x318>
 800409e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80040a2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80040a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80040aa:	429f      	cmp	r7, r3
 80040ac:	d275      	bcs.n	800419a <PCD_EP_ISR_Handler+0x404>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80040ae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80040b2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80040b6:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 80040ba:	4628      	mov	r0, r5
 80040bc:	f002 ffbc 	bl	8007038 <HAL_PCD_DataOutStageCallback>
 80040c0:	e75e      	b.n	8003f80 <PCD_EP_ISR_Handler+0x1ea>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040c2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80040c6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80040ca:	463b      	mov	r3, r7
 80040cc:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 80040d0:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 80040d4:	f002 fb63 	bl	800679e <USB_ReadPMA>
 80040d8:	e7d0      	b.n	800407c <PCD_EP_ISR_Handler+0x2e6>
          if (ep->type == EP_TYPE_BULK)
 80040da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80040de:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80040e2:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d035      	beq.n	8004156 <PCD_EP_ISR_Handler+0x3c0>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040ea:	6829      	ldr	r1, [r5, #0]
 80040ec:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80040f0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80040f4:	f892 0150 	ldrb.w	r0, [r2, #336]	@ 0x150
 80040f8:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800410e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004112:	6828      	ldr	r0, [r5, #0]
 8004114:	f892 2150 	ldrb.w	r2, [r2, #336]	@ 0x150
 8004118:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800411c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004120:	d020      	beq.n	8004164 <PCD_EP_ISR_Handler+0x3ce>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004122:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800412c:	3302      	adds	r3, #2
 800412e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004132:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 8004136:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800413a:	2f00      	cmp	r7, #0
 800413c:	d09e      	beq.n	800407c <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800413e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004142:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004146:	463b      	mov	r3, r7
 8004148:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 800414c:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004150:	f002 fb25 	bl	800679e <USB_ReadPMA>
 8004154:	e792      	b.n	800407c <PCD_EP_ISR_Handler+0x2e6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004156:	4632      	mov	r2, r6
 8004158:	4641      	mov	r1, r8
 800415a:	4628      	mov	r0, r5
 800415c:	f7ff faee 	bl	800373c <HAL_PCD_EP_DB_Receive>
 8004160:	4607      	mov	r7, r0
 8004162:	e78b      	b.n	800407c <PCD_EP_ISR_Handler+0x2e6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004164:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004168:	b29b      	uxth	r3, r3
 800416a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800416e:	3306      	adds	r3, #6
 8004170:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004174:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 8004178:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800417c:	2f00      	cmp	r7, #0
 800417e:	f43f af7d 	beq.w	800407c <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004182:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004186:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800418a:	463b      	mov	r3, r7
 800418c:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8004190:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004194:	f002 fb03 	bl	800679e <USB_ReadPMA>
 8004198:	e770      	b.n	800407c <PCD_EP_ISR_Handler+0x2e6>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800419a:	4641      	mov	r1, r8
 800419c:	6828      	ldr	r0, [r5, #0]
 800419e:	f001 ff17 	bl	8005fd0 <USB_EPStartXfer>
 80041a2:	e6ed      	b.n	8003f80 <PCD_EP_ISR_Handler+0x1ea>
          ep->xfer_len = 0U;
 80041a4:	1c63      	adds	r3, r4, #1
 80041a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	2200      	movs	r2, #0
 80041ae:	50ea      	str	r2, [r5, r3]
          if (ep->doublebuffer != 0U)
 80041b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80041b4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80041b8:	7f1b      	ldrb	r3, [r3, #28]
 80041ba:	b31b      	cbz	r3, 8004204 <PCD_EP_ISR_Handler+0x46e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041bc:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80041c0:	d03b      	beq.n	800423a <PCD_EP_ISR_Handler+0x4a4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80041c6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80041ca:	7c5b      	ldrb	r3, [r3, #17]
 80041cc:	bb1b      	cbnz	r3, 8004216 <PCD_EP_ISR_Handler+0x480>
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80041d4:	b292      	uxth	r2, r2
 80041d6:	4413      	add	r3, r2
 80041d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80041dc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80041e0:	7c12      	ldrb	r2, [r2, #16]
 80041e2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80041e6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80041ea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80041ee:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80041f2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80041f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80041fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80041fe:	b292      	uxth	r2, r2
 8004200:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004204:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004208:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800420c:	7c21      	ldrb	r1, [r4, #16]
 800420e:	4628      	mov	r0, r5
 8004210:	f002 ff1e 	bl	8007050 <HAL_PCD_DataInStageCallback>
 8004214:	e5c2      	b.n	8003d9c <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004216:	2b01      	cmp	r3, #1
 8004218:	d1f4      	bne.n	8004204 <PCD_EP_ISR_Handler+0x46e>
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004220:	b292      	uxth	r2, r2
 8004222:	4413      	add	r3, r2
 8004224:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004228:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800422c:	7c12      	ldrb	r2, [r2, #16]
 800422e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004232:	2200      	movs	r2, #0
 8004234:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004238:	e7e4      	b.n	8004204 <PCD_EP_ISR_Handler+0x46e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004240:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004244:	7c52      	ldrb	r2, [r2, #17]
 8004246:	b9d2      	cbnz	r2, 800427e <PCD_EP_ISR_Handler+0x4e8>
 8004248:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800424c:	b292      	uxth	r2, r2
 800424e:	4413      	add	r3, r2
 8004250:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004254:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004258:	7c12      	ldrb	r2, [r2, #16]
 800425a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800425e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004262:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004266:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800426a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800426e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004272:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004276:	b292      	uxth	r2, r2
 8004278:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800427c:	e7c2      	b.n	8004204 <PCD_EP_ISR_Handler+0x46e>
 800427e:	2a01      	cmp	r2, #1
 8004280:	d1c0      	bne.n	8004204 <PCD_EP_ISR_Handler+0x46e>
 8004282:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004286:	b292      	uxth	r2, r2
 8004288:	4413      	add	r3, r2
 800428a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800428e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004292:	7c12      	ldrb	r2, [r2, #16]
 8004294:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004298:	2200      	movs	r2, #0
 800429a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800429e:	e7b1      	b.n	8004204 <PCD_EP_ISR_Handler+0x46e>
              ep->xfer_len = 0U;
 80042a0:	1c62      	adds	r2, r4, #1
 80042a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042a6:	00d2      	lsls	r2, r2, #3
 80042a8:	2700      	movs	r7, #0
 80042aa:	50af      	str	r7, [r5, r2]
 80042ac:	e6ac      	b.n	8004008 <PCD_EP_ISR_Handler+0x272>
              ep->xfer_buff += TxPctSize;
 80042ae:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80042b2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80042b6:	6a56      	ldr	r6, [r2, #36]	@ 0x24
 80042b8:	441e      	add	r6, r3
 80042ba:	6256      	str	r6, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80042bc:	3401      	adds	r4, #1
 80042be:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80042c2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80042c6:	6852      	ldr	r2, [r2, #4]
 80042c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80042cc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80042d0:	4413      	add	r3, r2
 80042d2:	6063      	str	r3, [r4, #4]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042d4:	f001 fe7c 	bl	8005fd0 <USB_EPStartXfer>
 80042d8:	e560      	b.n	8003d9c <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042da:	4632      	mov	r2, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	f7ff fb48 	bl	8003972 <HAL_PCD_EP_DB_Transmit>
 80042e2:	e55b      	b.n	8003d9c <PCD_EP_ISR_Handler+0x6>
}
 80042e4:	2000      	movs	r0, #0
 80042e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042ea <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80042ea:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d00c      	beq.n	800430c <HAL_PCD_SetAddress+0x22>
{
 80042f2:	b510      	push	{r4, lr}
 80042f4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80042f6:	2301      	movs	r3, #1
 80042f8:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  hpcd->USB_Address = address;
 80042fc:	7341      	strb	r1, [r0, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042fe:	6800      	ldr	r0, [r0, #0]
 8004300:	f001 fe43 	bl	8005f8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004304:	2000      	movs	r0, #0
 8004306:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800430a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800430c:	2002      	movs	r0, #2
}
 800430e:	4770      	bx	lr

08004310 <HAL_PCD_IRQHandler>:
{
 8004310:	b510      	push	{r4, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004316:	6800      	ldr	r0, [r0, #0]
 8004318:	f001 fe41 	bl	8005f9e <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800431c:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8004320:	d120      	bne.n	8004364 <HAL_PCD_IRQHandler+0x54>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004322:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8004326:	d121      	bne.n	800436c <HAL_PCD_IRQHandler+0x5c>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004328:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 800432c:	d12f      	bne.n	800438e <HAL_PCD_IRQHandler+0x7e>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800432e:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8004332:	d137      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x94>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004334:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8004338:	d13e      	bne.n	80043b8 <HAL_PCD_IRQHandler+0xa8>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800433a:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800433e:	f040 8087 	bne.w	8004450 <HAL_PCD_IRQHandler+0x140>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004342:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8004346:	f040 80ae 	bne.w	80044a6 <HAL_PCD_IRQHandler+0x196>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800434a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800434e:	d027      	beq.n	80043a0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800435c:	b29b      	uxth	r3, r3
 800435e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8004362:	e01d      	b.n	80043a0 <HAL_PCD_IRQHandler+0x90>
    (void)PCD_EP_ISR_Handler(hpcd);
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff fd16 	bl	8003d96 <PCD_EP_ISR_Handler>
    return;
 800436a:	e019      	b.n	80043a0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004372:	b29b      	uxth	r3, r3
 8004374:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004378:	b29b      	uxth	r3, r3
 800437a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 800437e:	4620      	mov	r0, r4
 8004380:	f002 fe77 	bl	8007072 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004384:	2100      	movs	r1, #0
 8004386:	4620      	mov	r0, r4
 8004388:	f7ff ffaf 	bl	80042ea <HAL_PCD_SetAddress>
    return;
 800438c:	e008      	b.n	80043a0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800439a:	b29b      	uxth	r3, r3
 800439c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 80043a0:	b004      	add	sp, #16
 80043a2:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80043b6:	e7f3      	b.n	80043a0 <HAL_PCD_IRQHandler+0x90>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80043b8:	6822      	ldr	r2, [r4, #0]
 80043ba:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f023 0308 	bic.w	r3, r3, #8
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80043dc:	4620      	mov	r0, r4
 80043de:	f002 fe6b 	bl	80070b8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80043f4:	e7d4      	b.n	80043a0 <HAL_PCD_IRQHandler+0x90>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80043fc:	aa04      	add	r2, sp, #16
 80043fe:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004402:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 8004406:	3301      	adds	r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b07      	cmp	r3, #7
 800440c:	d9f3      	bls.n	80043f6 <HAL_PCD_IRQHandler+0xe6>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004414:	b29b      	uxth	r3, r3
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004424:	b29b      	uxth	r3, r3
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	b29b      	uxth	r3, r3
 800442c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004436:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800443a:	d0f9      	beq.n	8004430 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800443c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004440:	b292      	uxth	r2, r2
 8004442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004446:	b292      	uxth	r2, r2
 8004448:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    for (i = 0U; i < 8U; i++)
 800444c:	2300      	movs	r3, #0
 800444e:	e00b      	b.n	8004468 <HAL_PCD_IRQHandler+0x158>
    for (i = 0U; i < 8U; i++)
 8004450:	2300      	movs	r3, #0
 8004452:	e7da      	b.n	800440a <HAL_PCD_IRQHandler+0xfa>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	a904      	add	r1, sp, #16
 8004458:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800445c:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8004460:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 8004464:	3301      	adds	r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b07      	cmp	r3, #7
 800446a:	d9f3      	bls.n	8004454 <HAL_PCD_IRQHandler+0x144>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004472:	b29b      	uxth	r3, r3
 8004474:	f043 0308 	orr.w	r3, r3, #8
 8004478:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004488:	b29b      	uxth	r3, r3
 800448a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004494:	b29b      	uxth	r3, r3
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800449e:	4620      	mov	r0, r4
 80044a0:	f002 fdfa 	bl	8007098 <HAL_PCD_SuspendCallback>
    return;
 80044a4:	e77c      	b.n	80043a0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80044b8:	4620      	mov	r0, r4
 80044ba:	f002 fdd4 	bl	8007066 <HAL_PCD_SOFCallback>
    return;
 80044be:	e76f      	b.n	80043a0 <HAL_PCD_IRQHandler+0x90>

080044c0 <HAL_PCD_EP_Open>:
{
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4604      	mov	r4, r0
 80044c4:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80044c6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80044ca:	d126      	bne.n	800451a <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044cc:	f001 0c07 	and.w	ip, r1, #7
 80044d0:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80044d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80044d8:	f50e 7ea8 	add.w	lr, lr, #336	@ 0x150
 80044dc:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80044e0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80044e4:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80044e8:	f04f 0e00 	mov.w	lr, #0
 80044ec:	f88c e151 	strb.w	lr, [ip, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f0:	f000 0007 	and.w	r0, r0, #7
 80044f4:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 80044f6:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80044f8:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d01d      	beq.n	800453a <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 80044fe:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8004502:	2b01      	cmp	r3, #1
 8004504:	d01c      	beq.n	8004540 <HAL_PCD_EP_Open+0x80>
 8004506:	2301      	movs	r3, #1
 8004508:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	f001 f9f6 	bl	80058fe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004512:	2000      	movs	r0, #0
 8004514:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8004518:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451a:	f001 0c07 	and.w	ip, r1, #7
 800451e:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8004522:	00c9      	lsls	r1, r1, #3
 8004524:	3110      	adds	r1, #16
 8004526:	4421      	add	r1, r4
    ep->is_in = 1U;
 8004528:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800452c:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8004530:	f04f 0e01 	mov.w	lr, #1
 8004534:	f88c e011 	strb.w	lr, [ip, #17]
 8004538:	e7da      	b.n	80044f0 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	710b      	strb	r3, [r1, #4]
 800453e:	e7de      	b.n	80044fe <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8004540:	2002      	movs	r0, #2
 8004542:	e7e9      	b.n	8004518 <HAL_PCD_EP_Open+0x58>

08004544 <HAL_PCD_EP_Close>:
{
 8004544:	b510      	push	{r4, lr}
 8004546:	4604      	mov	r4, r0
 8004548:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800454a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800454e:	d11f      	bne.n	8004590 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004550:	f001 0007 	and.w	r0, r1, #7
 8004554:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800455e:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8004560:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004564:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8004568:	2300      	movs	r3, #0
 800456a:	f880 3151 	strb.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800456e:	f002 0207 	and.w	r2, r2, #7
 8004572:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004574:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8004578:	2b01      	cmp	r3, #1
 800457a:	d017      	beq.n	80045ac <HAL_PCD_EP_Close+0x68>
 800457c:	2301      	movs	r3, #1
 800457e:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	f001 fba0 	bl	8005cc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004588:	2000      	movs	r0, #0
 800458a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800458e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004590:	f001 0007 	and.w	r0, r1, #7
 8004594:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	3310      	adds	r3, #16
 800459c:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800459e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045a2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80045a6:	2301      	movs	r3, #1
 80045a8:	7443      	strb	r3, [r0, #17]
 80045aa:	e7e0      	b.n	800456e <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80045ac:	2002      	movs	r0, #2
 80045ae:	e7ee      	b.n	800458e <HAL_PCD_EP_Close+0x4a>

080045b0 <HAL_PCD_EP_Receive>:
{
 80045b0:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	f001 0c07 	and.w	ip, r1, #7
 80045b6:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80045ba:	00c9      	lsls	r1, r1, #3
 80045bc:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
  ep->xfer_buff = pBuf;
 80045c0:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80045c4:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80045c8:	f8ce 2164 	str.w	r2, [lr, #356]	@ 0x164
  ep->xfer_len = len;
 80045cc:	f8ce 3168 	str.w	r3, [lr, #360]	@ 0x168
  ep->xfer_count = 0U;
 80045d0:	2400      	movs	r4, #0
 80045d2:	f8ce 416c 	str.w	r4, [lr, #364]	@ 0x16c
  ep->is_in = 0U;
 80045d6:	f88e 4151 	strb.w	r4, [lr, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80045da:	f88e c150 	strb.w	ip, [lr, #336]	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045de:	4401      	add	r1, r0
 80045e0:	6800      	ldr	r0, [r0, #0]
 80045e2:	f001 fcf5 	bl	8005fd0 <USB_EPStartXfer>
}
 80045e6:	4620      	mov	r0, r4
 80045e8:	bd10      	pop	{r4, pc}

080045ea <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045ea:	f001 0107 	and.w	r1, r1, #7
 80045ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80045f2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 80045f6:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80045fa:	4770      	bx	lr

080045fc <HAL_PCD_EP_Transmit>:
{
 80045fc:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045fe:	f001 0c07 	and.w	ip, r1, #7
 8004602:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8004606:	00c9      	lsls	r1, r1, #3
 8004608:	3110      	adds	r1, #16
  ep->xfer_buff = pBuf;
 800460a:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 800460e:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8004612:	f8ce 2024 	str.w	r2, [lr, #36]	@ 0x24
  ep->xfer_len = len;
 8004616:	f10c 0201 	add.w	r2, ip, #1
 800461a:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 800461e:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
  ep->xfer_fill_db = 1U;
 8004622:	2501      	movs	r5, #1
 8004624:	f88e 5034 	strb.w	r5, [lr, #52]	@ 0x34
  ep->xfer_len_db = len;
 8004628:	f8ce 3030 	str.w	r3, [lr, #48]	@ 0x30
  ep->xfer_count = 0U;
 800462c:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 8004630:	2400      	movs	r4, #0
 8004632:	6054      	str	r4, [r2, #4]
  ep->is_in = 1U;
 8004634:	f88e 5011 	strb.w	r5, [lr, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004638:	f88e c010 	strb.w	ip, [lr, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800463c:	4401      	add	r1, r0
 800463e:	6800      	ldr	r0, [r0, #0]
 8004640:	f001 fcc6 	bl	8005fd0 <USB_EPStartXfer>
}
 8004644:	4620      	mov	r0, r4
 8004646:	bd38      	pop	{r3, r4, r5, pc}

08004648 <HAL_PCD_EP_SetStall>:
{
 8004648:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800464a:	f001 0507 	and.w	r5, r1, #7
 800464e:	7902      	ldrb	r2, [r0, #4]
 8004650:	42aa      	cmp	r2, r5
 8004652:	d335      	bcc.n	80046c0 <HAL_PCD_EP_SetStall+0x78>
 8004654:	4604      	mov	r4, r0
 8004656:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8004658:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800465c:	d11e      	bne.n	800469c <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800465e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004662:	00c9      	lsls	r1, r1, #3
 8004664:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004668:	4401      	add	r1, r0
    ep->is_in = 0U;
 800466a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800466e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
  ep->is_stall = 1U;
 8004678:	2301      	movs	r3, #1
 800467a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800467c:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800467e:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8004682:	2b01      	cmp	r3, #1
 8004684:	d01e      	beq.n	80046c4 <HAL_PCD_EP_SetStall+0x7c>
 8004686:	2301      	movs	r3, #1
 8004688:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	f001 fc06 	bl	8005e9e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004692:	b17d      	cbz	r5, 80046b4 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8004694:	2000      	movs	r0, #0
 8004696:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800469a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80046a0:	00c9      	lsls	r1, r1, #3
 80046a2:	3110      	adds	r1, #16
 80046a4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80046a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80046aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80046ae:	2201      	movs	r2, #1
 80046b0:	745a      	strb	r2, [r3, #17]
 80046b2:	e7e1      	b.n	8004678 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80046b4:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	f001 fc74 	bl	8005fa6 <USB_EP0_OutStart>
 80046be:	e7e9      	b.n	8004694 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80046c0:	2001      	movs	r0, #1
 80046c2:	e7ea      	b.n	800469a <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80046c4:	2002      	movs	r0, #2
 80046c6:	e7e8      	b.n	800469a <HAL_PCD_EP_SetStall+0x52>

080046c8 <HAL_PCD_EP_ClrStall>:
{
 80046c8:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046ca:	7901      	ldrb	r1, [r0, #4]
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	4291      	cmp	r1, r2
 80046d2:	d334      	bcc.n	800473e <HAL_PCD_EP_ClrStall+0x76>
{
 80046d4:	b510      	push	{r4, lr}
 80046d6:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80046d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80046dc:	d121      	bne.n	8004722 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046de:	f003 0207 	and.w	r2, r3, #7
 80046e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80046e6:	00c9      	lsls	r1, r1, #3
 80046e8:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80046ec:	4401      	add	r1, r0
    ep->is_in = 0U;
 80046ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80046f2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80046f6:	2000      	movs	r0, #0
 80046f8:	f882 0151 	strb.w	r0, [r2, #337]	@ 0x151
  ep->is_stall = 0U;
 80046fc:	2200      	movs	r2, #0
 80046fe:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004706:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800470a:	2b01      	cmp	r3, #1
 800470c:	d019      	beq.n	8004742 <HAL_PCD_EP_ClrStall+0x7a>
 800470e:	2301      	movs	r3, #1
 8004710:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	f001 fbe7 	bl	8005ee8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800471a:	2000      	movs	r0, #0
 800471c:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8004720:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004722:	f003 0207 	and.w	r2, r3, #7
 8004726:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800472a:	00c9      	lsls	r1, r1, #3
 800472c:	3110      	adds	r1, #16
 800472e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004730:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004734:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004738:	2001      	movs	r0, #1
 800473a:	7450      	strb	r0, [r2, #17]
 800473c:	e7de      	b.n	80046fc <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800473e:	2001      	movs	r0, #1
}
 8004740:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004742:	2002      	movs	r0, #2
 8004744:	e7ec      	b.n	8004720 <HAL_PCD_EP_ClrStall+0x58>

08004746 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004746:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800474a:	d00b      	beq.n	8004764 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474c:	f001 0107 	and.w	r1, r1, #7
 8004750:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004754:	00c9      	lsls	r1, r1, #3
 8004756:	3110      	adds	r1, #16
 8004758:	4408      	add	r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800475a:	b952      	cbnz	r2, 8004772 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800475c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800475e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004760:	2000      	movs	r0, #0
 8004762:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8004764:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004768:	00c9      	lsls	r1, r1, #3
 800476a:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800476e:	4408      	add	r0, r1
 8004770:	e7f3      	b.n	800475a <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8004772:	2201      	movs	r2, #1
 8004774:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004776:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	8143      	strh	r3, [r0, #10]
 800477c:	e7f0      	b.n	8004760 <HAL_PCDEx_PMAConfig+0x1a>
	...

08004780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004780:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <RCC_Delay+0x24>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <RCC_Delay+0x28>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	fb00 f303 	mul.w	r3, r0, r3
 8004792:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004794:	bf00      	nop
  }
  while (Delay --);
 8004796:	9b01      	ldr	r3, [sp, #4]
 8004798:	1e5a      	subs	r2, r3, #1
 800479a:	9201      	str	r2, [sp, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f9      	bne.n	8004794 <RCC_Delay+0x14>
}
 80047a0:	b002      	add	sp, #8
 80047a2:	4770      	bx	lr
 80047a4:	20000068 	.word	0x20000068
 80047a8:	10624dd3 	.word	0x10624dd3

080047ac <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80047ac:	2800      	cmp	r0, #0
 80047ae:	f000 81f1 	beq.w	8004b94 <HAL_RCC_OscConfig+0x3e8>
{
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b8:	6803      	ldr	r3, [r0, #0]
 80047ba:	f013 0f01 	tst.w	r3, #1
 80047be:	d02c      	beq.n	800481a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047c0:	4b99      	ldr	r3, [pc, #612]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d01d      	beq.n	8004808 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047cc:	4b96      	ldr	r3, [pc, #600]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d012      	beq.n	80047fe <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047de:	d041      	beq.n	8004864 <HAL_RCC_OscConfig+0xb8>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d155      	bne.n	8004890 <HAL_RCC_OscConfig+0xe4>
 80047e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047e8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e037      	b.n	800486e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047fe:	4b8a      	ldr	r3, [pc, #552]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004806:	d0e7      	beq.n	80047d8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	4b87      	ldr	r3, [pc, #540]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004810:	d003      	beq.n	800481a <HAL_RCC_OscConfig+0x6e>
 8004812:	6863      	ldr	r3, [r4, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 81bf 	beq.w	8004b98 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f013 0f02 	tst.w	r3, #2
 8004820:	d075      	beq.n	800490e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004822:	4b81      	ldr	r3, [pc, #516]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f013 0f0c 	tst.w	r3, #12
 800482a:	d05f      	beq.n	80048ec <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800482c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b08      	cmp	r3, #8
 8004836:	d054      	beq.n	80048e2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004838:	6923      	ldr	r3, [r4, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 808a 	beq.w	8004954 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8004840:	4b7a      	ldr	r3, [pc, #488]	@ (8004a2c <HAL_RCC_OscConfig+0x280>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004846:	f7fe fa09 	bl	8002c5c <HAL_GetTick>
 800484a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484c:	4b76      	ldr	r3, [pc, #472]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f013 0f02 	tst.w	r3, #2
 8004854:	d175      	bne.n	8004942 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004856:	f7fe fa01 	bl	8002c5c <HAL_GetTick>
 800485a:	1b40      	subs	r0, r0, r5
 800485c:	2802      	cmp	r0, #2
 800485e:	d9f5      	bls.n	800484c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8004860:	2003      	movs	r0, #3
 8004862:	e19e      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004864:	4a70      	ldr	r2, [pc, #448]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486e:	6863      	ldr	r3, [r4, #4]
 8004870:	b343      	cbz	r3, 80048c4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8004872:	f7fe f9f3 	bl	8002c5c <HAL_GetTick>
 8004876:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004878:	4b6b      	ldr	r3, [pc, #428]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004880:	d1cb      	bne.n	800481a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004882:	f7fe f9eb 	bl	8002c5c <HAL_GetTick>
 8004886:	1b40      	subs	r0, r0, r5
 8004888:	2864      	cmp	r0, #100	@ 0x64
 800488a:	d9f5      	bls.n	8004878 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800488c:	2003      	movs	r0, #3
 800488e:	e188      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004894:	d009      	beq.n	80048aa <HAL_RCC_OscConfig+0xfe>
 8004896:	4b64      	ldr	r3, [pc, #400]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e7e1      	b.n	800486e <HAL_RCC_OscConfig+0xc2>
 80048aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048ae:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	e7d4      	b.n	800486e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80048c4:	f7fe f9ca 	bl	8002c5c <HAL_GetTick>
 80048c8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	4b57      	ldr	r3, [pc, #348]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80048d2:	d0a2      	beq.n	800481a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d4:	f7fe f9c2 	bl	8002c5c <HAL_GetTick>
 80048d8:	1b40      	subs	r0, r0, r5
 80048da:	2864      	cmp	r0, #100	@ 0x64
 80048dc:	d9f5      	bls.n	80048ca <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80048de:	2003      	movs	r0, #3
 80048e0:	e15f      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048e2:	4b51      	ldr	r3, [pc, #324]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80048ea:	d1a5      	bne.n	8004838 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f013 0f02 	tst.w	r3, #2
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_OscConfig+0x152>
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 814f 	bne.w	8004b9c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004900:	6813      	ldr	r3, [r2, #0]
 8004902:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004906:	6961      	ldr	r1, [r4, #20]
 8004908:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800490c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	f013 0f08 	tst.w	r3, #8
 8004914:	d033      	beq.n	800497e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004916:	69a3      	ldr	r3, [r4, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05c      	beq.n	80049d6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 800491c:	4b43      	ldr	r3, [pc, #268]	@ (8004a2c <HAL_RCC_OscConfig+0x280>)
 800491e:	2201      	movs	r2, #1
 8004920:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004924:	f7fe f99a 	bl	8002c5c <HAL_GetTick>
 8004928:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	f013 0f02 	tst.w	r3, #2
 8004932:	d121      	bne.n	8004978 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004934:	f7fe f992 	bl	8002c5c <HAL_GetTick>
 8004938:	1b40      	subs	r0, r0, r5
 800493a:	2802      	cmp	r0, #2
 800493c:	d9f5      	bls.n	800492a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800493e:	2003      	movs	r0, #3
 8004940:	e12f      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4a39      	ldr	r2, [pc, #228]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004944:	6813      	ldr	r3, [r2, #0]
 8004946:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800494a:	6961      	ldr	r1, [r4, #20]
 800494c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e7dc      	b.n	800490e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8004954:	4b35      	ldr	r3, [pc, #212]	@ (8004a2c <HAL_RCC_OscConfig+0x280>)
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800495a:	f7fe f97f 	bl	8002c5c <HAL_GetTick>
 800495e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004960:	4b31      	ldr	r3, [pc, #196]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f013 0f02 	tst.w	r3, #2
 8004968:	d0d1      	beq.n	800490e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496a:	f7fe f977 	bl	8002c5c <HAL_GetTick>
 800496e:	1b40      	subs	r0, r0, r5
 8004970:	2802      	cmp	r0, #2
 8004972:	d9f5      	bls.n	8004960 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8004974:	2003      	movs	r0, #3
 8004976:	e114      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8004978:	2001      	movs	r0, #1
 800497a:	f7ff ff01 	bl	8004780 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	f013 0f04 	tst.w	r3, #4
 8004984:	f000 8096 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004988:	4b27      	ldr	r3, [pc, #156]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004990:	d134      	bne.n	80049fc <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	4b25      	ldr	r3, [pc, #148]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800499a:	61da      	str	r2, [r3, #28]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049a6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	4b21      	ldr	r3, [pc, #132]	@ (8004a30 <HAL_RCC_OscConfig+0x284>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80049b0:	d026      	beq.n	8004a00 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d03d      	beq.n	8004a34 <HAL_RCC_OscConfig+0x288>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d153      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2b8>
 80049bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049c0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80049c4:	6a1a      	ldr	r2, [r3, #32]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	621a      	str	r2, [r3, #32]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	621a      	str	r2, [r3, #32]
 80049d4:	e033      	b.n	8004a3e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <HAL_RCC_OscConfig+0x280>)
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80049de:	f7fe f93d 	bl	8002c5c <HAL_GetTick>
 80049e2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e4:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <HAL_RCC_OscConfig+0x27c>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	f013 0f02 	tst.w	r3, #2
 80049ec:	d0c7      	beq.n	800497e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ee:	f7fe f935 	bl	8002c5c <HAL_GetTick>
 80049f2:	1b40      	subs	r0, r0, r5
 80049f4:	2802      	cmp	r0, #2
 80049f6:	d9f5      	bls.n	80049e4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80049f8:	2003      	movs	r0, #3
 80049fa:	e0d2      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80049fc:	2500      	movs	r5, #0
 80049fe:	e7d3      	b.n	80049a8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a00:	4a0b      	ldr	r2, [pc, #44]	@ (8004a30 <HAL_RCC_OscConfig+0x284>)
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a08:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004a0a:	f7fe f927 	bl	8002c5c <HAL_GetTick>
 8004a0e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <HAL_RCC_OscConfig+0x284>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004a18:	d1cb      	bne.n	80049b2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1a:	f7fe f91f 	bl	8002c5c <HAL_GetTick>
 8004a1e:	1b80      	subs	r0, r0, r6
 8004a20:	2864      	cmp	r0, #100	@ 0x64
 8004a22:	d9f5      	bls.n	8004a10 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8004a24:	2003      	movs	r0, #3
 8004a26:	e0bc      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	42420000 	.word	0x42420000
 8004a30:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a34:	4a5f      	ldr	r2, [pc, #380]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004a36:	6a13      	ldr	r3, [r2, #32]
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3e:	68e3      	ldr	r3, [r4, #12]
 8004a40:	b333      	cbz	r3, 8004a90 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8004a42:	f7fe f90b 	bl	8002c5c <HAL_GetTick>
 8004a46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b5a      	ldr	r3, [pc, #360]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f013 0f02 	tst.w	r3, #2
 8004a50:	d12f      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fe f903 	bl	8002c5c <HAL_GetTick>
 8004a56:	1b80      	subs	r0, r0, r6
 8004a58:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a5c:	4298      	cmp	r0, r3
 8004a5e:	d9f3      	bls.n	8004a48 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8004a60:	2003      	movs	r0, #3
 8004a62:	e09e      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d009      	beq.n	8004a7c <HAL_RCC_OscConfig+0x2d0>
 8004a68:	4b52      	ldr	r3, [pc, #328]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	621a      	str	r2, [r3, #32]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	f022 0204 	bic.w	r2, r2, #4
 8004a78:	621a      	str	r2, [r3, #32]
 8004a7a:	e7e0      	b.n	8004a3e <HAL_RCC_OscConfig+0x292>
 8004a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	f042 0204 	orr.w	r2, r2, #4
 8004a84:	621a      	str	r2, [r3, #32]
 8004a86:	6a1a      	ldr	r2, [r3, #32]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	621a      	str	r2, [r3, #32]
 8004a8e:	e7d6      	b.n	8004a3e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8004a90:	f7fe f8e4 	bl	8002c5c <HAL_GetTick>
 8004a94:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a96:	4b47      	ldr	r3, [pc, #284]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f013 0f02 	tst.w	r3, #2
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa0:	f7fe f8dc 	bl	8002c5c <HAL_GetTick>
 8004aa4:	1b80      	subs	r0, r0, r6
 8004aa6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004aaa:	4298      	cmp	r0, r3
 8004aac:	d9f3      	bls.n	8004a96 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8004aae:	2003      	movs	r0, #3
 8004ab0:	e077      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8004ab2:	b9e5      	cbnz	r5, 8004aee <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab4:	69e3      	ldr	r3, [r4, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d072      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aba:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004abc:	6852      	ldr	r2, [r2, #4]
 8004abe:	f002 020c 	and.w	r2, r2, #12
 8004ac2:	2a08      	cmp	r2, #8
 8004ac4:	d056      	beq.n	8004b74 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d017      	beq.n	8004afa <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb8 <HAL_RCC_OscConfig+0x40c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004ad0:	f7fe f8c4 	bl	8002c5c <HAL_GetTick>
 8004ad4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad6:	4b37      	ldr	r3, [pc, #220]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004ade:	d047      	beq.n	8004b70 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fe f8bc 	bl	8002c5c <HAL_GetTick>
 8004ae4:	1b00      	subs	r0, r0, r4
 8004ae6:	2802      	cmp	r0, #2
 8004ae8:	d9f5      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004aea:	2003      	movs	r0, #3
 8004aec:	e059      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aee:	4a31      	ldr	r2, [pc, #196]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004af0:	69d3      	ldr	r3, [r2, #28]
 8004af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004af6:	61d3      	str	r3, [r2, #28]
 8004af8:	e7dc      	b.n	8004ab4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8004afa:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb8 <HAL_RCC_OscConfig+0x40c>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004b00:	f7fe f8ac 	bl	8002c5c <HAL_GetTick>
 8004b04:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b06:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004b0e:	d006      	beq.n	8004b1e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fe f8a4 	bl	8002c5c <HAL_GetTick>
 8004b14:	1b40      	subs	r0, r0, r5
 8004b16:	2802      	cmp	r0, #2
 8004b18:	d9f5      	bls.n	8004b06 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004b1a:	2003      	movs	r0, #3
 8004b1c:	e041      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b1e:	6a23      	ldr	r3, [r4, #32]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b24:	d01a      	beq.n	8004b5c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b26:	4923      	ldr	r1, [pc, #140]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004b28:	684b      	ldr	r3, [r1, #4]
 8004b2a:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8004b2e:	6a22      	ldr	r2, [r4, #32]
 8004b30:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004b32:	4302      	orrs	r2, r0
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b38:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb8 <HAL_RCC_OscConfig+0x40c>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004b3e:	f7fe f88d 	bl	8002c5c <HAL_GetTick>
 8004b42:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b44:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004b4c:	d10e      	bne.n	8004b6c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7fe f885 	bl	8002c5c <HAL_GetTick>
 8004b52:	1b00      	subs	r0, r0, r4
 8004b54:	2802      	cmp	r0, #2
 8004b56:	d9f5      	bls.n	8004b44 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8004b58:	2003      	movs	r0, #3
 8004b5a:	e022      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b5c:	4a15      	ldr	r2, [pc, #84]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004b5e:	6853      	ldr	r3, [r2, #4]
 8004b60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b64:	68a1      	ldr	r1, [r4, #8]
 8004b66:	430b      	orrs	r3, r1
 8004b68:	6053      	str	r3, [r2, #4]
 8004b6a:	e7dc      	b.n	8004b26 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e018      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
 8004b70:	2000      	movs	r0, #0
 8004b72:	e016      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d016      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8004b78:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HAL_RCC_OscConfig+0x408>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8004b80:	6a22      	ldr	r2, [r4, #32]
 8004b82:	4291      	cmp	r1, r2
 8004b84:	d111      	bne.n	8004baa <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b86:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004b8a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10e      	bne.n	8004bae <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8004b90:	2000      	movs	r0, #0
 8004b92:	e006      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8004b94:	2001      	movs	r0, #1
}
 8004b96:	4770      	bx	lr
        return HAL_ERROR;
 8004b98:	2001      	movs	r0, #1
 8004b9a:	e002      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8004ba0:	2000      	movs	r0, #0
}
 8004ba2:	b002      	add	sp, #8
 8004ba4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	e7fb      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8004baa:	2001      	movs	r0, #1
 8004bac:	e7f9      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
 8004bae:	2001      	movs	r0, #1
 8004bb0:	e7f7      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3f6>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	42420000 	.word	0x42420000

08004bbc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x40>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004bc0:	f003 020c 	and.w	r2, r3, #12
 8004bc4:	2a08      	cmp	r2, #8
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004bc8:	480d      	ldr	r0, [pc, #52]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8004bca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bcc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004bd0:	490c      	ldr	r1, [pc, #48]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0x48>)
 8004bd2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bd4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004bd8:	d00b      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bda:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x40>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004be2:	4a09      	ldr	r2, [pc, #36]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x4c>)
 8004be4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004be6:	4a06      	ldr	r2, [pc, #24]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x44>)
 8004be8:	fb02 f000 	mul.w	r0, r2, r0
 8004bec:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bf0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x50>)
 8004bf4:	fb03 f000 	mul.w	r0, r3, r0
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	007a1200 	.word	0x007a1200
 8004c04:	08007de0 	.word	0x08007de0
 8004c08:	08007ddc 	.word	0x08007ddc
 8004c0c:	003d0900 	.word	0x003d0900

08004c10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004c10:	2800      	cmp	r0, #0
 8004c12:	f000 80a0 	beq.w	8004d56 <HAL_RCC_ClockConfig+0x146>
{
 8004c16:	b570      	push	{r4, r5, r6, lr}
 8004c18:	460d      	mov	r5, r1
 8004c1a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b52      	ldr	r3, [pc, #328]	@ (8004d68 <HAL_RCC_ClockConfig+0x158>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	428b      	cmp	r3, r1
 8004c26:	d20b      	bcs.n	8004c40 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c28:	4a4f      	ldr	r2, [pc, #316]	@ (8004d68 <HAL_RCC_ClockConfig+0x158>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	f023 0307 	bic.w	r3, r3, #7
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c34:	6813      	ldr	r3, [r2, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	428b      	cmp	r3, r1
 8004c3c:	f040 808d 	bne.w	8004d5a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	f013 0f02 	tst.w	r3, #2
 8004c46:	d017      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	f013 0f04 	tst.w	r3, #4
 8004c4c:	d004      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c4e:	4a47      	ldr	r2, [pc, #284]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004c50:	6853      	ldr	r3, [r2, #4]
 8004c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c56:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f013 0f08 	tst.w	r3, #8
 8004c5e:	d004      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c60:	4a42      	ldr	r2, [pc, #264]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004c62:	6853      	ldr	r3, [r2, #4]
 8004c64:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c68:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6a:	4a40      	ldr	r2, [pc, #256]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004c6c:	6853      	ldr	r3, [r2, #4]
 8004c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c72:	68a1      	ldr	r1, [r4, #8]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	f013 0f01 	tst.w	r3, #1
 8004c7e:	d031      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d020      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d025      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4a38      	ldr	r2, [pc, #224]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	f012 0f02 	tst.w	r2, #2
 8004c92:	d064      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c94:	4935      	ldr	r1, [pc, #212]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004c96:	684a      	ldr	r2, [r1, #4]
 8004c98:	f022 0203 	bic.w	r2, r2, #3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004ca0:	f7fd ffdc 	bl	8002c5c <HAL_GetTick>
 8004ca4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	4b31      	ldr	r3, [pc, #196]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004cb4:	d016      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb6:	f7fd ffd1 	bl	8002c5c <HAL_GetTick>
 8004cba:	1b80      	subs	r0, r0, r6
 8004cbc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004cc0:	4298      	cmp	r0, r3
 8004cc2:	d9f0      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004cc4:	2003      	movs	r0, #3
 8004cc6:	e045      	b.n	8004d54 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc8:	4a28      	ldr	r2, [pc, #160]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004cd0:	d1e0      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	e03e      	b.n	8004d54 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd6:	4a25      	ldr	r2, [pc, #148]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004cde:	d1d9      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	e037      	b.n	8004d54 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <HAL_RCC_ClockConfig+0x158>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	d90a      	bls.n	8004d06 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <HAL_RCC_ClockConfig+0x158>)
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	f023 0307 	bic.w	r3, r3, #7
 8004cf8:	432b      	orrs	r3, r5
 8004cfa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfc:	6813      	ldr	r3, [r2, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	42ab      	cmp	r3, r5
 8004d04:	d12d      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f013 0f04 	tst.w	r3, #4
 8004d0c:	d006      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d0e:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004d10:	6853      	ldr	r3, [r2, #4]
 8004d12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d16:	68e1      	ldr	r1, [r4, #12]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	f013 0f08 	tst.w	r3, #8
 8004d22:	d007      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d24:	4a11      	ldr	r2, [pc, #68]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004d26:	6853      	ldr	r3, [r2, #4]
 8004d28:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004d2c:	6921      	ldr	r1, [r4, #16]
 8004d2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d32:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d34:	f7ff ff42 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_RCC_ClockConfig+0x15c>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d40:	4a0b      	ldr	r2, [pc, #44]	@ (8004d70 <HAL_RCC_ClockConfig+0x160>)
 8004d42:	5cd3      	ldrb	r3, [r2, r3]
 8004d44:	40d8      	lsrs	r0, r3
 8004d46:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <HAL_RCC_ClockConfig+0x164>)
 8004d48:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCC_ClockConfig+0x168>)
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	f7fd ff41 	bl	8002bd4 <HAL_InitTick>
  return HAL_OK;
 8004d52:	2000      	movs	r0, #0
}
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004d56:	2001      	movs	r0, #1
}
 8004d58:	4770      	bx	lr
    return HAL_ERROR;
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	e7fa      	b.n	8004d54 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004d5e:	2001      	movs	r0, #1
 8004d60:	e7f8      	b.n	8004d54 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004d62:	2001      	movs	r0, #1
 8004d64:	e7f6      	b.n	8004d54 <HAL_RCC_ClockConfig+0x144>
 8004d66:	bf00      	nop
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	08007df0 	.word	0x08007df0
 8004d74:	20000068 	.word	0x20000068
 8004d78:	20000064 	.word	0x20000064

08004d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d82:	6803      	ldr	r3, [r0, #0]
 8004d84:	f013 0f01 	tst.w	r3, #1
 8004d88:	d036      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004d92:	d149      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b3c      	ldr	r3, [pc, #240]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d9c:	61da      	str	r2, [r3, #28]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004da8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004daa:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004db2:	d03b      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004db4:	4b34      	ldr	r3, [pc, #208]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004db6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004db8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004dbc:	d013      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004dbe:	6862      	ldr	r2, [r4, #4]
 8004dc0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d00e      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004dca:	6a13      	ldr	r3, [r2, #32]
 8004dcc:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dd0:	492f      	ldr	r1, [pc, #188]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004dd2:	2601      	movs	r6, #1
 8004dd4:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd8:	2600      	movs	r6, #0
 8004dda:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dde:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004de0:	f013 0f01 	tst.w	r3, #1
 8004de4:	d136      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de6:	4a28      	ldr	r2, [pc, #160]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004de8:	6a13      	ldr	r3, [r2, #32]
 8004dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dee:	6861      	ldr	r1, [r4, #4]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	d13e      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f013 0f02 	tst.w	r3, #2
 8004dfe:	d006      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e00:	4a21      	ldr	r2, [pc, #132]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004e02:	6853      	ldr	r3, [r2, #4]
 8004e04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004e08:	68a1      	ldr	r1, [r4, #8]
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	f013 0f10 	tst.w	r3, #16
 8004e14:	d034      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e16:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004e18:	6853      	ldr	r3, [r2, #4]
 8004e1a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004e1e:	68e1      	ldr	r1, [r4, #12]
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e24:	2000      	movs	r0, #0
 8004e26:	e02c      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004e28:	2500      	movs	r5, #0
 8004e2a:	e7be      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2c:	4a17      	ldr	r2, [pc, #92]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004e36:	f7fd ff11 	bl	8002c5c <HAL_GetTick>
 8004e3a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	4b13      	ldr	r3, [pc, #76]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004e44:	d1b6      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fd ff09 	bl	8002c5c <HAL_GetTick>
 8004e4a:	1b80      	subs	r0, r0, r6
 8004e4c:	2864      	cmp	r0, #100	@ 0x64
 8004e4e:	d9f5      	bls.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004e50:	2003      	movs	r0, #3
 8004e52:	e016      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004e54:	f7fd ff02 	bl	8002c5c <HAL_GetTick>
 8004e58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f013 0f02 	tst.w	r3, #2
 8004e62:	d1c0      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e64:	f7fd fefa 	bl	8002c5c <HAL_GetTick>
 8004e68:	1b80      	subs	r0, r0, r6
 8004e6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	d9f3      	bls.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004e72:	2003      	movs	r0, #3
 8004e74:	e005      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	69d3      	ldr	r3, [r2, #28]
 8004e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	61d3      	str	r3, [r2, #28]
 8004e7e:	e7bb      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004e80:	2000      	movs	r0, #0
}
 8004e82:	b002      	add	sp, #8
 8004e84:	bd70      	pop	{r4, r5, r6, pc}
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	42420000 	.word	0x42420000

08004e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e98:	6a03      	ldr	r3, [r0, #32]
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea8:	680c      	ldr	r4, [r1, #0]
 8004eaa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eac:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eb0:	688b      	ldr	r3, [r1, #8]
 8004eb2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee4 <TIM_OC1_SetConfig+0x50>)
 8004eb6:	4290      	cmp	r0, r2
 8004eb8:	d006      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eba:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ebc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ebe:	684a      	ldr	r2, [r1, #4]
 8004ec0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec2:	6203      	str	r3, [r0, #32]
}
 8004ec4:	bc30      	pop	{r4, r5}
 8004ec6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004ecc:	68ca      	ldr	r2, [r1, #12]
 8004ece:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ed0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ed4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004ed8:	694a      	ldr	r2, [r1, #20]
 8004eda:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004edc:	698d      	ldr	r5, [r1, #24]
 8004ede:	4315      	orrs	r5, r2
 8004ee0:	e7eb      	b.n	8004eba <TIM_OC1_SetConfig+0x26>
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00

08004ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eec:	6a02      	ldr	r2, [r0, #32]
 8004eee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ef2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	680d      	ldr	r5, [r1, #0]
 8004efe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f04:	688a      	ldr	r2, [r1, #8]
 8004f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <TIM_OC3_SetConfig+0x58>)
 8004f0c:	4290      	cmp	r0, r2
 8004f0e:	d006      	beq.n	8004f1e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f12:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f14:	684a      	ldr	r2, [r1, #4]
 8004f16:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f18:	6203      	str	r3, [r0, #32]
}
 8004f1a:	bc30      	pop	{r4, r5}
 8004f1c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f22:	68ca      	ldr	r2, [r1, #12]
 8004f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f2c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f30:	694a      	ldr	r2, [r1, #20]
 8004f32:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f36:	698a      	ldr	r2, [r1, #24]
 8004f38:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8004f3c:	e7e8      	b.n	8004f10 <TIM_OC3_SetConfig+0x28>
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00

08004f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f48:	6a02      	ldr	r2, [r0, #32]
 8004f4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f4e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f52:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f54:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	680d      	ldr	r5, [r1, #0]
 8004f5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f62:	688d      	ldr	r5, [r1, #8]
 8004f64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f68:	4d07      	ldr	r5, [pc, #28]	@ (8004f88 <TIM_OC4_SetConfig+0x44>)
 8004f6a:	42a8      	cmp	r0, r5
 8004f6c:	d006      	beq.n	8004f7c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f70:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f72:	684a      	ldr	r2, [r1, #4]
 8004f74:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f76:	6203      	str	r3, [r0, #32]
}
 8004f78:	bc30      	pop	{r4, r5}
 8004f7a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f7c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f80:	694d      	ldr	r5, [r1, #20]
 8004f82:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004f86:	e7f2      	b.n	8004f6e <TIM_OC4_SetConfig+0x2a>
 8004f88:	40012c00 	.word	0x40012c00

08004f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f90:	6a04      	ldr	r4, [r0, #32]
 8004f92:	f024 0401 	bic.w	r4, r4, #1
 8004f96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f98:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f9e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004fa6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004faa:	6203      	str	r3, [r0, #32]
}
 8004fac:	bc10      	pop	{r4}
 8004fae:	4770      	bx	lr

08004fb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fb2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb4:	6a04      	ldr	r4, [r0, #32]
 8004fb6:	f024 0410 	bic.w	r4, r4, #16
 8004fba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fbc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fbe:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fce:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004fd0:	6203      	str	r3, [r0, #32]
}
 8004fd2:	bc10      	pop	{r4}
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe2:	6083      	str	r3, [r0, #8]
}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d127      	bne.n	8005042 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff8:	6802      	ldr	r2, [r0, #0]
 8004ffa:	68d3      	ldr	r3, [r2, #12]
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	6803      	ldr	r3, [r0, #0]
 8005004:	4a11      	ldr	r2, [pc, #68]	@ (800504c <HAL_TIM_Base_Start_IT+0x64>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d010      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x44>
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500e:	d00d      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x44>
 8005010:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x44>
 8005018:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800501c:	4293      	cmp	r3, r2
 800501e:	d005      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005028:	2000      	movs	r0, #0
 800502a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	2a06      	cmp	r2, #6
 8005034:	d007      	beq.n	8005046 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800503e:	2000      	movs	r0, #0
 8005040:	4770      	bx	lr
    return HAL_ERROR;
 8005042:	2001      	movs	r0, #1
 8005044:	4770      	bx	lr
  return HAL_OK;
 8005046:	2000      	movs	r0, #0
}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00

08005050 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005050:	6802      	ldr	r2, [r0, #0]
 8005052:	68d3      	ldr	r3, [r2, #12]
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800505a:	6803      	ldr	r3, [r0, #0]
 800505c:	6a19      	ldr	r1, [r3, #32]
 800505e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8005062:	4211      	tst	r1, r2
 8005064:	d108      	bne.n	8005078 <HAL_TIM_Base_Stop_IT+0x28>
 8005066:	6a19      	ldr	r1, [r3, #32]
 8005068:	f240 4244 	movw	r2, #1092	@ 0x444
 800506c:	4211      	tst	r1, r2
 800506e:	d103      	bne.n	8005078 <HAL_TIM_Base_Stop_IT+0x28>
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005078:	2301      	movs	r3, #1
 800507a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800507e:	2000      	movs	r0, #0
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_MspInit>:
}
 8005082:	4770      	bx	lr

08005084 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_IC_CaptureCallback>:
}
 8005086:	4770      	bx	lr

08005088 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005088:	4770      	bx	lr

0800508a <HAL_TIM_TriggerCallback>:
}
 800508a:	4770      	bx	lr

0800508c <HAL_TIM_IRQHandler>:
{
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8005090:	6803      	ldr	r3, [r0, #0]
 8005092:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005094:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005096:	f015 0f02 	tst.w	r5, #2
 800509a:	d010      	beq.n	80050be <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800509c:	f016 0f02 	tst.w	r6, #2
 80050a0:	d00d      	beq.n	80050be <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050a2:	f06f 0202 	mvn.w	r2, #2
 80050a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050a8:	2301      	movs	r3, #1
 80050aa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ac:	6803      	ldr	r3, [r0, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f013 0f03 	tst.w	r3, #3
 80050b4:	d05e      	beq.n	8005174 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	f7ff ffe6 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	2300      	movs	r3, #0
 80050bc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050be:	f015 0f04 	tst.w	r5, #4
 80050c2:	d012      	beq.n	80050ea <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050c4:	f016 0f04 	tst.w	r6, #4
 80050c8:	d00f      	beq.n	80050ea <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f06f 0204 	mvn.w	r2, #4
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d2:	2302      	movs	r3, #2
 80050d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80050de:	d04f      	beq.n	8005180 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7ff ffd0 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	2300      	movs	r3, #0
 80050e8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050ea:	f015 0f08 	tst.w	r5, #8
 80050ee:	d012      	beq.n	8005116 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050f0:	f016 0f08 	tst.w	r6, #8
 80050f4:	d00f      	beq.n	8005116 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f06f 0208 	mvn.w	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fe:	2304      	movs	r3, #4
 8005100:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f013 0f03 	tst.w	r3, #3
 800510a:	d040      	beq.n	800518e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800510c:	4620      	mov	r0, r4
 800510e:	f7ff ffba 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	2300      	movs	r3, #0
 8005114:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005116:	f015 0f10 	tst.w	r5, #16
 800511a:	d012      	beq.n	8005142 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800511c:	f016 0f10 	tst.w	r6, #16
 8005120:	d00f      	beq.n	8005142 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	f06f 0210 	mvn.w	r2, #16
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512a:	2308      	movs	r3, #8
 800512c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005136:	d031      	beq.n	800519c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8005138:	4620      	mov	r0, r4
 800513a:	f7ff ffa4 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	2300      	movs	r3, #0
 8005140:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005142:	f015 0f01 	tst.w	r5, #1
 8005146:	d002      	beq.n	800514e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005148:	f016 0f01 	tst.w	r6, #1
 800514c:	d12d      	bne.n	80051aa <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800514e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8005152:	d002      	beq.n	800515a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005154:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005158:	d12f      	bne.n	80051ba <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800515a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800515e:	d002      	beq.n	8005166 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005160:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8005164:	d131      	bne.n	80051ca <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005166:	f015 0f20 	tst.w	r5, #32
 800516a:	d002      	beq.n	8005172 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800516c:	f016 0f20 	tst.w	r6, #32
 8005170:	d133      	bne.n	80051da <HAL_TIM_IRQHandler+0x14e>
}
 8005172:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005174:	f7ff ff86 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff ff85 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
 800517e:	e79c      	b.n	80050ba <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005180:	4620      	mov	r0, r4
 8005182:	f7ff ff7f 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005186:	4620      	mov	r0, r4
 8005188:	f7ff ff7e 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
 800518c:	e7ab      	b.n	80050e6 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff ff78 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	4620      	mov	r0, r4
 8005196:	f7ff ff77 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
 800519a:	e7ba      	b.n	8005112 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff ff71 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff ff70 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
 80051a8:	e7c9      	b.n	800513e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f06f 0201 	mvn.w	r2, #1
 80051b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80051b2:	4620      	mov	r0, r4
 80051b4:	f7fd fc6e 	bl	8002a94 <HAL_TIM_PeriodElapsedCallback>
 80051b8:	e7c9      	b.n	800514e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 fb2a 	bl	800581c <HAL_TIMEx_BreakCallback>
 80051c8:	e7c7      	b.n	800515a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80051d2:	4620      	mov	r0, r4
 80051d4:	f7ff ff59 	bl	800508a <HAL_TIM_TriggerCallback>
 80051d8:	e7c5      	b.n	8005166 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f06f 0220 	mvn.w	r2, #32
 80051e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 fb19 	bl	800581a <HAL_TIMEx_CommutCallback>
}
 80051e8:	e7c3      	b.n	8005172 <HAL_TIM_IRQHandler+0xe6>
	...

080051ec <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80051ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ee:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <TIM_Base_SetConfig+0x80>)
 80051f0:	4290      	cmp	r0, r2
 80051f2:	d00a      	beq.n	800520a <TIM_Base_SetConfig+0x1e>
 80051f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80051f8:	d007      	beq.n	800520a <TIM_Base_SetConfig+0x1e>
 80051fa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80051fe:	4290      	cmp	r0, r2
 8005200:	d003      	beq.n	800520a <TIM_Base_SetConfig+0x1e>
 8005202:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005206:	4290      	cmp	r0, r2
 8005208:	d103      	bne.n	8005212 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800520e:	684a      	ldr	r2, [r1, #4]
 8005210:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005212:	4a16      	ldr	r2, [pc, #88]	@ (800526c <TIM_Base_SetConfig+0x80>)
 8005214:	4290      	cmp	r0, r2
 8005216:	d00a      	beq.n	800522e <TIM_Base_SetConfig+0x42>
 8005218:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800521c:	d007      	beq.n	800522e <TIM_Base_SetConfig+0x42>
 800521e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005222:	4290      	cmp	r0, r2
 8005224:	d003      	beq.n	800522e <TIM_Base_SetConfig+0x42>
 8005226:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800522a:	4290      	cmp	r0, r2
 800522c:	d103      	bne.n	8005236 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800522e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005232:	68ca      	ldr	r2, [r1, #12]
 8005234:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800523a:	694a      	ldr	r2, [r1, #20]
 800523c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800523e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005240:	688b      	ldr	r3, [r1, #8]
 8005242:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005244:	680b      	ldr	r3, [r1, #0]
 8005246:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005248:	4b08      	ldr	r3, [pc, #32]	@ (800526c <TIM_Base_SetConfig+0x80>)
 800524a:	4298      	cmp	r0, r3
 800524c:	d00a      	beq.n	8005264 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 800524e:	2301      	movs	r3, #1
 8005250:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005252:	6903      	ldr	r3, [r0, #16]
 8005254:	f013 0f01 	tst.w	r3, #1
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800525a:	6903      	ldr	r3, [r0, #16]
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6103      	str	r3, [r0, #16]
}
 8005262:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	690b      	ldr	r3, [r1, #16]
 8005266:	6303      	str	r3, [r0, #48]	@ 0x30
 8005268:	e7f1      	b.n	800524e <TIM_Base_SetConfig+0x62>
 800526a:	bf00      	nop
 800526c:	40012c00 	.word	0x40012c00

08005270 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005270:	b340      	cbz	r0, 80052c4 <HAL_TIM_Base_Init+0x54>
{
 8005272:	b510      	push	{r4, lr}
 8005274:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005276:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800527a:	b1f3      	cbz	r3, 80052ba <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	2302      	movs	r3, #2
 800527e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005282:	4621      	mov	r1, r4
 8005284:	f851 0b04 	ldr.w	r0, [r1], #4
 8005288:	f7ff ffb0 	bl	80051ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	2301      	movs	r3, #1
 800528e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005292:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005296:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800529a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800529e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80052ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80052b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80052b6:	2000      	movs	r0, #0
}
 80052b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80052ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80052be:	f001 fb55 	bl	800696c <HAL_TIM_Base_MspInit>
 80052c2:	e7db      	b.n	800527c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80052c4:	2001      	movs	r0, #1
}
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80052c8:	b340      	cbz	r0, 800531c <HAL_TIM_PWM_Init+0x54>
{
 80052ca:	b510      	push	{r4, lr}
 80052cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80052ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80052d2:	b1f3      	cbz	r3, 8005312 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	2302      	movs	r3, #2
 80052d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052da:	4621      	mov	r1, r4
 80052dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80052e0:	f7ff ff84 	bl	80051ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80052ee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80052f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80052f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005302:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005306:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800530a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800530e:	2000      	movs	r0, #0
}
 8005310:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005312:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005316:	f7ff feb4 	bl	8005082 <HAL_TIM_PWM_MspInit>
 800531a:	e7db      	b.n	80052d4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800531c:	2001      	movs	r0, #1
}
 800531e:	4770      	bx	lr

08005320 <TIM_OC2_SetConfig>:
{
 8005320:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8005322:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005324:	6a02      	ldr	r2, [r0, #32]
 8005326:	f022 0210 	bic.w	r2, r2, #16
 800532a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800532c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800532e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005330:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005334:	680d      	ldr	r5, [r1, #0]
 8005336:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800533a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800533e:	688d      	ldr	r5, [r1, #8]
 8005340:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005344:	4d0c      	ldr	r5, [pc, #48]	@ (8005378 <TIM_OC2_SetConfig+0x58>)
 8005346:	42a8      	cmp	r0, r5
 8005348:	d006      	beq.n	8005358 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800534a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800534c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800534e:	684a      	ldr	r2, [r1, #4]
 8005350:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005352:	6203      	str	r3, [r0, #32]
}
 8005354:	bc30      	pop	{r4, r5}
 8005356:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800535c:	68cd      	ldr	r5, [r1, #12]
 800535e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005366:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800536a:	694d      	ldr	r5, [r1, #20]
 800536c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005370:	698d      	ldr	r5, [r1, #24]
 8005372:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005376:	e7e8      	b.n	800534a <TIM_OC2_SetConfig+0x2a>
 8005378:	40012c00 	.word	0x40012c00

0800537c <HAL_TIM_PWM_ConfigChannel>:
{
 800537c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800537e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d066      	beq.n	8005454 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005386:	4604      	mov	r4, r0
 8005388:	460d      	mov	r5, r1
 800538a:	2301      	movs	r3, #1
 800538c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005390:	2a0c      	cmp	r2, #12
 8005392:	d85a      	bhi.n	800544a <HAL_TIM_PWM_ConfigChannel+0xce>
 8005394:	e8df f002 	tbb	[pc, r2]
 8005398:	59595907 	.word	0x59595907
 800539c:	5959591b 	.word	0x5959591b
 80053a0:	59595930 	.word	0x59595930
 80053a4:	44          	.byte	0x44
 80053a5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053a6:	6800      	ldr	r0, [r0, #0]
 80053a8:	f7ff fd74 	bl	8004e94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053ac:	6822      	ldr	r2, [r4, #0]
 80053ae:	6993      	ldr	r3, [r2, #24]
 80053b0:	f043 0308 	orr.w	r3, r3, #8
 80053b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	6993      	ldr	r3, [r2, #24]
 80053ba:	f023 0304 	bic.w	r3, r3, #4
 80053be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	6993      	ldr	r3, [r2, #24]
 80053c4:	6929      	ldr	r1, [r5, #16]
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2000      	movs	r0, #0
      break;
 80053cc:	e03e      	b.n	800544c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ce:	6800      	ldr	r0, [r0, #0]
 80053d0:	f7ff ffa6 	bl	8005320 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	6993      	ldr	r3, [r2, #24]
 80053d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	6993      	ldr	r3, [r2, #24]
 80053e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	6993      	ldr	r3, [r2, #24]
 80053ec:	6929      	ldr	r1, [r5, #16]
 80053ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053f2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80053f4:	2000      	movs	r0, #0
      break;
 80053f6:	e029      	b.n	800544c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f8:	6800      	ldr	r0, [r0, #0]
 80053fa:	f7ff fd75 	bl	8004ee8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	69d3      	ldr	r3, [r2, #28]
 8005402:	f043 0308 	orr.w	r3, r3, #8
 8005406:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	69d3      	ldr	r3, [r2, #28]
 800540c:	f023 0304 	bic.w	r3, r3, #4
 8005410:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	69d3      	ldr	r3, [r2, #28]
 8005416:	6929      	ldr	r1, [r5, #16]
 8005418:	430b      	orrs	r3, r1
 800541a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2000      	movs	r0, #0
      break;
 800541e:	e015      	b.n	800544c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005420:	6800      	ldr	r0, [r0, #0]
 8005422:	f7ff fd8f 	bl	8004f44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	69d3      	ldr	r3, [r2, #28]
 800542a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800542e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	69d3      	ldr	r3, [r2, #28]
 8005434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005438:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	69d3      	ldr	r3, [r2, #28]
 800543e:	6929      	ldr	r1, [r5, #16]
 8005440:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005444:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005446:	2000      	movs	r0, #0
      break;
 8005448:	e000      	b.n	800544c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800544a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800544c:	2300      	movs	r3, #0
 800544e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005452:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005454:	2002      	movs	r0, #2
 8005456:	e7fc      	b.n	8005452 <HAL_TIM_PWM_ConfigChannel+0xd6>

08005458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005458:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800545a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800545c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005460:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005464:	430a      	orrs	r2, r1
 8005466:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	6082      	str	r2, [r0, #8]
}
 800546c:	bc10      	pop	{r4}
 800546e:	4770      	bx	lr

08005470 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005470:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d078      	beq.n	800556a <HAL_TIM_ConfigClockSource+0xfa>
{
 8005478:	b510      	push	{r4, lr}
 800547a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800547c:	2301      	movs	r3, #1
 800547e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005488:	6802      	ldr	r2, [r0, #0]
 800548a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005490:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005494:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005496:	680b      	ldr	r3, [r1, #0]
 8005498:	2b60      	cmp	r3, #96	@ 0x60
 800549a:	d04c      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0xc6>
 800549c:	d823      	bhi.n	80054e6 <HAL_TIM_ConfigClockSource+0x76>
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d054      	beq.n	800554c <HAL_TIM_ConfigClockSource+0xdc>
 80054a2:	d811      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x58>
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d003      	beq.n	80054b0 <HAL_TIM_ConfigClockSource+0x40>
 80054a8:	d80a      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x50>
 80054aa:	b10b      	cbz	r3, 80054b0 <HAL_TIM_ConfigClockSource+0x40>
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d105      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b0:	4619      	mov	r1, r3
 80054b2:	6820      	ldr	r0, [r4, #0]
 80054b4:	f7ff fd8f 	bl	8004fd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80054b8:	2000      	movs	r0, #0
      break;
 80054ba:	e028      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80054bc:	2001      	movs	r0, #1
 80054be:	e026      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80054c0:	2b30      	cmp	r3, #48	@ 0x30
 80054c2:	d0f5      	beq.n	80054b0 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 80054c4:	2001      	movs	r0, #1
 80054c6:	e022      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80054c8:	2b50      	cmp	r3, #80	@ 0x50
 80054ca:	d10a      	bne.n	80054e2 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054cc:	68ca      	ldr	r2, [r1, #12]
 80054ce:	6849      	ldr	r1, [r1, #4]
 80054d0:	6800      	ldr	r0, [r0, #0]
 80054d2:	f7ff fd5b 	bl	8004f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d6:	2150      	movs	r1, #80	@ 0x50
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	f7ff fd7c 	bl	8004fd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80054de:	2000      	movs	r0, #0
      break;
 80054e0:	e015      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80054e2:	2001      	movs	r0, #1
 80054e4:	e013      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	d03a      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0xf2>
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054f0:	d014      	beq.n	800551c <HAL_TIM_ConfigClockSource+0xac>
 80054f2:	2b70      	cmp	r3, #112	@ 0x70
 80054f4:	d137      	bne.n	8005566 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	68cb      	ldr	r3, [r1, #12]
 80054f8:	684a      	ldr	r2, [r1, #4]
 80054fa:	6889      	ldr	r1, [r1, #8]
 80054fc:	6800      	ldr	r0, [r0, #0]
 80054fe:	f7ff ffab 	bl	8005458 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005506:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800550a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800550c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800550e:	2301      	movs	r3, #1
 8005510:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005514:	2300      	movs	r3, #0
 8005516:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800551a:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800551c:	68cb      	ldr	r3, [r1, #12]
 800551e:	684a      	ldr	r2, [r1, #4]
 8005520:	6889      	ldr	r1, [r1, #8]
 8005522:	6800      	ldr	r0, [r0, #0]
 8005524:	f7ff ff98 	bl	8005458 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	6893      	ldr	r3, [r2, #8]
 800552c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005530:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005532:	2000      	movs	r0, #0
      break;
 8005534:	e7eb      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005536:	68ca      	ldr	r2, [r1, #12]
 8005538:	6849      	ldr	r1, [r1, #4]
 800553a:	6800      	ldr	r0, [r0, #0]
 800553c:	f7ff fd38 	bl	8004fb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005540:	2160      	movs	r1, #96	@ 0x60
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	f7ff fd47 	bl	8004fd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2000      	movs	r0, #0
      break;
 800554a:	e7e0      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800554c:	68ca      	ldr	r2, [r1, #12]
 800554e:	6849      	ldr	r1, [r1, #4]
 8005550:	6800      	ldr	r0, [r0, #0]
 8005552:	f7ff fd1b 	bl	8004f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005556:	2140      	movs	r1, #64	@ 0x40
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	f7ff fd3c 	bl	8004fd6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2000      	movs	r0, #0
      break;
 8005560:	e7d5      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8005562:	2000      	movs	r0, #0
 8005564:	e7d3      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8005566:	2001      	movs	r0, #1
 8005568:	e7d1      	b.n	800550e <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 800556a:	2002      	movs	r0, #2
}
 800556c:	4770      	bx	lr

0800556e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800556e:	f001 011f 	and.w	r1, r1, #31
 8005572:	f04f 0c01 	mov.w	ip, #1
 8005576:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800557a:	6a03      	ldr	r3, [r0, #32]
 800557c:	ea23 030c 	bic.w	r3, r3, ip
 8005580:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005582:	6a03      	ldr	r3, [r0, #32]
 8005584:	408a      	lsls	r2, r1
 8005586:	4313      	orrs	r3, r2
 8005588:	6203      	str	r3, [r0, #32]
}
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_PWM_Start>:
{
 800558c:	b510      	push	{r4, lr}
 800558e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005590:	4608      	mov	r0, r1
 8005592:	bb51      	cbnz	r1, 80055ea <HAL_TIM_PWM_Start+0x5e>
 8005594:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8005598:	b2db      	uxtb	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	bf18      	it	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d15b      	bne.n	800565c <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d139      	bne.n	800561c <HAL_TIM_PWM_Start+0x90>
 80055a8:	2302      	movs	r3, #2
 80055aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ae:	2201      	movs	r2, #1
 80055b0:	4601      	mov	r1, r0
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	f7ff ffdb 	bl	800556e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <HAL_TIM_PWM_Start+0xd8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d03d      	beq.n	800563c <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	4a28      	ldr	r2, [pc, #160]	@ (8005664 <HAL_TIM_PWM_Start+0xd8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d03e      	beq.n	8005646 <HAL_TIM_PWM_Start+0xba>
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055cc:	d03b      	beq.n	8005646 <HAL_TIM_PWM_Start+0xba>
 80055ce:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d037      	beq.n	8005646 <HAL_TIM_PWM_Start+0xba>
 80055d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055da:	4293      	cmp	r3, r2
 80055dc:	d033      	beq.n	8005646 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80055e6:	2000      	movs	r0, #0
 80055e8:	e039      	b.n	800565e <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ea:	2904      	cmp	r1, #4
 80055ec:	d008      	beq.n	8005600 <HAL_TIM_PWM_Start+0x74>
 80055ee:	2908      	cmp	r1, #8
 80055f0:	d00d      	beq.n	800560e <HAL_TIM_PWM_Start+0x82>
 80055f2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	bf18      	it	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	e7cf      	b.n	80055a0 <HAL_TIM_PWM_Start+0x14>
 8005600:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8005604:	b2db      	uxtb	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	bf18      	it	ne
 800560a:	2301      	movne	r3, #1
 800560c:	e7c8      	b.n	80055a0 <HAL_TIM_PWM_Start+0x14>
 800560e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	bf18      	it	ne
 8005618:	2301      	movne	r3, #1
 800561a:	e7c1      	b.n	80055a0 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561c:	2804      	cmp	r0, #4
 800561e:	d005      	beq.n	800562c <HAL_TIM_PWM_Start+0xa0>
 8005620:	2808      	cmp	r0, #8
 8005622:	d007      	beq.n	8005634 <HAL_TIM_PWM_Start+0xa8>
 8005624:	2302      	movs	r3, #2
 8005626:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800562a:	e7c0      	b.n	80055ae <HAL_TIM_PWM_Start+0x22>
 800562c:	2302      	movs	r3, #2
 800562e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005632:	e7bc      	b.n	80055ae <HAL_TIM_PWM_Start+0x22>
 8005634:	2302      	movs	r3, #2
 8005636:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800563a:	e7b8      	b.n	80055ae <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800563c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005642:	645a      	str	r2, [r3, #68]	@ 0x44
 8005644:	e7bc      	b.n	80055c0 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	2a06      	cmp	r2, #6
 800564e:	d007      	beq.n	8005660 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005658:	2000      	movs	r0, #0
 800565a:	e000      	b.n	800565e <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 800565c:	2001      	movs	r0, #1
}
 800565e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005660:	2000      	movs	r0, #0
 8005662:	e7fc      	b.n	800565e <HAL_TIM_PWM_Start+0xd2>
 8005664:	40012c00 	.word	0x40012c00

08005668 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005668:	f001 010f 	and.w	r1, r1, #15
 800566c:	f04f 0c04 	mov.w	ip, #4
 8005670:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005674:	6a03      	ldr	r3, [r0, #32]
 8005676:	ea23 030c 	bic.w	r3, r3, ip
 800567a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800567c:	6a03      	ldr	r3, [r0, #32]
 800567e:	408a      	lsls	r2, r1
 8005680:	4313      	orrs	r3, r2
 8005682:	6203      	str	r3, [r0, #32]
}
 8005684:	4770      	bx	lr
	...

08005688 <HAL_TIMEx_PWMN_Start>:
{
 8005688:	b510      	push	{r4, lr}
 800568a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568c:	4608      	mov	r0, r1
 800568e:	bb59      	cbnz	r1, 80056e8 <HAL_TIMEx_PWMN_Start+0x60>
 8005690:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8005694:	b2db      	uxtb	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	bf18      	it	ne
 800569a:	2301      	movne	r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d157      	bne.n	8005750 <HAL_TIMEx_PWMN_Start+0xc8>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d13a      	bne.n	800571a <HAL_TIMEx_PWMN_Start+0x92>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80056aa:	2204      	movs	r2, #4
 80056ac:	4601      	mov	r1, r0
 80056ae:	6820      	ldr	r0, [r4, #0]
 80056b0:	f7ff ffda 	bl	8005668 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056bc:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	4a25      	ldr	r2, [pc, #148]	@ (8005758 <HAL_TIMEx_PWMN_Start+0xd0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d039      	beq.n	800573a <HAL_TIMEx_PWMN_Start+0xb2>
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d036      	beq.n	800573a <HAL_TIMEx_PWMN_Start+0xb2>
 80056cc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d032      	beq.n	800573a <HAL_TIMEx_PWMN_Start+0xb2>
 80056d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056d8:	4293      	cmp	r3, r2
 80056da:	d02e      	beq.n	800573a <HAL_TIMEx_PWMN_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056e4:	2000      	movs	r0, #0
 80056e6:	e034      	b.n	8005752 <HAL_TIMEx_PWMN_Start+0xca>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056e8:	2904      	cmp	r1, #4
 80056ea:	d008      	beq.n	80056fe <HAL_TIMEx_PWMN_Start+0x76>
 80056ec:	2908      	cmp	r1, #8
 80056ee:	d00d      	beq.n	800570c <HAL_TIMEx_PWMN_Start+0x84>
 80056f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	bf18      	it	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	e7ce      	b.n	800569c <HAL_TIMEx_PWMN_Start+0x14>
 80056fe:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005702:	b2db      	uxtb	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	bf18      	it	ne
 8005708:	2301      	movne	r3, #1
 800570a:	e7c7      	b.n	800569c <HAL_TIMEx_PWMN_Start+0x14>
 800570c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005710:	b2db      	uxtb	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	bf18      	it	ne
 8005716:	2301      	movne	r3, #1
 8005718:	e7c0      	b.n	800569c <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800571a:	2804      	cmp	r0, #4
 800571c:	d005      	beq.n	800572a <HAL_TIMEx_PWMN_Start+0xa2>
 800571e:	2808      	cmp	r0, #8
 8005720:	d007      	beq.n	8005732 <HAL_TIMEx_PWMN_Start+0xaa>
 8005722:	2302      	movs	r3, #2
 8005724:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005728:	e7bf      	b.n	80056aa <HAL_TIMEx_PWMN_Start+0x22>
 800572a:	2302      	movs	r3, #2
 800572c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005730:	e7bb      	b.n	80056aa <HAL_TIMEx_PWMN_Start+0x22>
 8005732:	2302      	movs	r3, #2
 8005734:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005738:	e7b7      	b.n	80056aa <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	2a06      	cmp	r2, #6
 8005742:	d007      	beq.n	8005754 <HAL_TIMEx_PWMN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800574c:	2000      	movs	r0, #0
 800574e:	e000      	b.n	8005752 <HAL_TIMEx_PWMN_Start+0xca>
    return HAL_ERROR;
 8005750:	2001      	movs	r0, #1
}
 8005752:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005754:	2000      	movs	r0, #0
 8005756:	e7fc      	b.n	8005752 <HAL_TIMEx_PWMN_Start+0xca>
 8005758:	40012c00 	.word	0x40012c00

0800575c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800575c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005760:	2a01      	cmp	r2, #1
 8005762:	d02c      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8005764:	b410      	push	{r4}
 8005766:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005768:	2201      	movs	r2, #1
 800576a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800576e:	2202      	movs	r2, #2
 8005770:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005774:	6802      	ldr	r2, [r0, #0]
 8005776:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005778:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800577a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800577e:	6808      	ldr	r0, [r1, #0]
 8005780:	ea40 000c 	orr.w	r0, r0, ip
  htim->Instance->CR2 = tmpcr2;
 8005784:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	480e      	ldr	r0, [pc, #56]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800578a:	4282      	cmp	r2, r0
 800578c:	d00a      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800578e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005792:	d007      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005794:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8005798:	4282      	cmp	r2, r0
 800579a:	d003      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800579c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80057a0:	4282      	cmp	r2, r0
 80057a2:	d104      	bne.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0x52>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a8:	6849      	ldr	r1, [r1, #4]
 80057aa:	4321      	orrs	r1, r4
    htim->Instance->SMCR = tmpsmcr;
 80057ac:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80057b4:	2000      	movs	r0, #0
 80057b6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80057ba:	bc10      	pop	{r4}
 80057bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80057be:	2002      	movs	r0, #2
}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00

080057c8 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 80057c8:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80057ca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d021      	beq.n	8005816 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80057d2:	2301      	movs	r3, #1
 80057d4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057d8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057de:	6888      	ldr	r0, [r1, #8]
 80057e0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057e6:	6848      	ldr	r0, [r1, #4]
 80057e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057ee:	6808      	ldr	r0, [r1, #0]
 80057f0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057f6:	6908      	ldr	r0, [r1, #16]
 80057f8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057fe:	6948      	ldr	r0, [r1, #20]
 8005800:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005806:	69c9      	ldr	r1, [r1, #28]
 8005808:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800580a:	6811      	ldr	r1, [r2, #0]
 800580c:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800580e:	2000      	movs	r0, #0
 8005810:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  return HAL_OK;
 8005814:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005816:	2002      	movs	r0, #2
}
 8005818:	4770      	bx	lr

0800581a <HAL_TIMEx_CommutCallback>:
}
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_BreakCallback>:
}
 800581c:	4770      	bx	lr

0800581e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800581e:	e7fe      	b.n	800581e <NMI_Handler>

08005820 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005820:	e7fe      	b.n	8005820 <HardFault_Handler>

08005822 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005822:	e7fe      	b.n	8005822 <MemManage_Handler>

08005824 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <BusFault_Handler>

08005826 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005826:	e7fe      	b.n	8005826 <UsageFault_Handler>

08005828 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005828:	4770      	bx	lr

0800582a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800582a:	4770      	bx	lr

0800582c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800582c:	4770      	bx	lr

0800582e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800582e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005830:	f7fd fa08 	bl	8002c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005834:	bd08      	pop	{r3, pc}

08005836 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005836:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_1_Pin);
 8005838:	2001      	movs	r0, #1
 800583a:	f7fd ff4f 	bl	80036dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800583e:	bd08      	pop	{r3, pc}

08005840 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_2_Pin);
 8005842:	2002      	movs	r0, #2
 8005844:	f7fd ff4a 	bl	80036dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005848:	bd08      	pop	{r3, pc}

0800584a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800584a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_3_Pin);
 800584c:	2004      	movs	r0, #4
 800584e:	f7fd ff45 	bl	80036dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005852:	bd08      	pop	{r3, pc}

08005854 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005854:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005856:	4802      	ldr	r0, [pc, #8]	@ (8005860 <DMA1_Channel1_IRQHandler+0xc>)
 8005858:	f7fd fd82 	bl	8003360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800585c:	bd08      	pop	{r3, pc}
 800585e:	bf00      	nop
 8005860:	20000340 	.word	0x20000340

08005864 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005866:	4802      	ldr	r0, [pc, #8]	@ (8005870 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8005868:	f7fe fd52 	bl	8004310 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800586c:	bd08      	pop	{r3, pc}
 800586e:	bf00      	nop
 8005870:	200014a0 	.word	0x200014a0

08005874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005876:	4802      	ldr	r0, [pc, #8]	@ (8005880 <TIM2_IRQHandler+0xc>)
 8005878:	f7ff fc08 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800587c:	bd08      	pop	{r3, pc}
 800587e:	bf00      	nop
 8005880:	2000072c 	.word	0x2000072c

08005884 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005886:	4802      	ldr	r0, [pc, #8]	@ (8005890 <TIM3_IRQHandler+0xc>)
 8005888:	f7ff fc00 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800588c:	bd08      	pop	{r3, pc}
 800588e:	bf00      	nop
 8005890:	200006e4 	.word	0x200006e4

08005894 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005896:	4802      	ldr	r0, [pc, #8]	@ (80058a0 <TIM4_IRQHandler+0xc>)
 8005898:	f7ff fbf8 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800589c:	bd08      	pop	{r3, pc}
 800589e:	bf00      	nop
 80058a0:	2000069c 	.word	0x2000069c

080058a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058a4:	b084      	sub	sp, #16
 80058a6:	a804      	add	r0, sp, #16
 80058a8:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80058ac:	2000      	movs	r0, #0
 80058ae:	b004      	add	sp, #16
 80058b0:	4770      	bx	lr

080058b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058b2:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058b4:	2000      	movs	r0, #0
 80058b6:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058ba:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
 80058be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80058c2:	4770      	bx	lr

080058c4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058c4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80058c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058cc:	045b      	lsls	r3, r3, #17
 80058ce:	0c5b      	lsrs	r3, r3, #17
 80058d0:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80058d4:	2000      	movs	r0, #0
 80058d6:	4770      	bx	lr

080058d8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80058d8:	2000      	movs	r0, #0
 80058da:	4770      	bx	lr

080058dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058dc:	b084      	sub	sp, #16
 80058de:	4684      	mov	ip, r0
 80058e0:	a804      	add	r0, sp, #16
 80058e2:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058ec:	2000      	movs	r0, #0
 80058ee:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058f2:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058f6:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 80058fa:	b004      	add	sp, #16
 80058fc:	4770      	bx	lr

080058fe <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058fe:	b510      	push	{r4, lr}
 8005900:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005902:	f891 c000 	ldrb.w	ip, [r1]
 8005906:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800590a:	b292      	uxth	r2, r2
 800590c:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 8005910:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005914:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8005916:	78c8      	ldrb	r0, [r1, #3]
 8005918:	2803      	cmp	r0, #3
 800591a:	d861      	bhi.n	80059e0 <USB_ActivateEndpoint+0xe2>
 800591c:	e8df f000 	tbb	[pc, r0]
 8005920:	58025c55 	.word	0x58025c55
 8005924:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005926:	f248 0e80 	movw	lr, #32896	@ 0x8080
 800592a:	ea42 020e 	orr.w	r2, r2, lr
 800592e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005932:	f891 c000 	ldrb.w	ip, [r1]
 8005936:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800593a:	b292      	uxth	r2, r2
 800593c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005940:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005944:	ea42 020c 	orr.w	r2, r2, ip
 8005948:	ea42 020e 	orr.w	r2, r2, lr
 800594c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8005950:	7b0a      	ldrb	r2, [r1, #12]
 8005952:	2a00      	cmp	r2, #0
 8005954:	f040 80dc 	bne.w	8005b10 <USB_ActivateEndpoint+0x212>
  {
    if (ep->is_in != 0U)
 8005958:	784a      	ldrb	r2, [r1, #1]
 800595a:	2a00      	cmp	r2, #0
 800595c:	d051      	beq.n	8005a02 <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800595e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8005962:	b292      	uxth	r2, r2
 8005964:	441a      	add	r2, r3
 8005966:	780c      	ldrb	r4, [r1, #0]
 8005968:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800596c:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8005970:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005974:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005978:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597c:	780c      	ldrb	r4, [r1, #0]
 800597e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005982:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005986:	d00c      	beq.n	80059a2 <USB_ActivateEndpoint+0xa4>
 8005988:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800598c:	b292      	uxth	r2, r2
 800598e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005992:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800599a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800599e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80059a2:	78ca      	ldrb	r2, [r1, #3]
 80059a4:	2a01      	cmp	r2, #1
 80059a6:	d01d      	beq.n	80059e4 <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059a8:	7809      	ldrb	r1, [r1, #0]
 80059aa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80059ae:	b292      	uxth	r2, r2
 80059b0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80059b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b8:	f082 0220 	eor.w	r2, r2, #32
 80059bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059c4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80059c8:	e117      	b.n	8005bfa <USB_ActivateEndpoint+0x2fc>
      wEpRegVal |= USB_EP_CONTROL;
 80059ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 80059ce:	e7aa      	b.n	8005926 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 80059d0:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80059d4:	2000      	movs	r0, #0
      break;
 80059d6:	e7a6      	b.n	8005926 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80059dc:	2000      	movs	r0, #0
      break;
 80059de:	e7a2      	b.n	8005926 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80059e0:	2001      	movs	r0, #1
 80059e2:	e7a0      	b.n	8005926 <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059e4:	7809      	ldrb	r1, [r1, #0]
 80059e6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80059ea:	b292      	uxth	r2, r2
 80059ec:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80059f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059fc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005a00:	e0fb      	b.n	8005bfa <USB_ActivateEndpoint+0x2fc>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a02:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8005a06:	b292      	uxth	r2, r2
 8005a08:	441a      	add	r2, r3
 8005a0a:	780c      	ldrb	r4, [r1, #0]
 8005a0c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8005a10:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8005a14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005a18:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005a1c:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a20:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8005a24:	b292      	uxth	r2, r2
 8005a26:	441a      	add	r2, r3
 8005a28:	780c      	ldrb	r4, [r1, #0]
 8005a2a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8005a2e:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 8005a32:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005a36:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
 8005a3a:	690c      	ldr	r4, [r1, #16]
 8005a3c:	2c3e      	cmp	r4, #62	@ 0x3e
 8005a3e:	d939      	bls.n	8005ab4 <USB_ActivateEndpoint+0x1b6>
 8005a40:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 8005a44:	f014 0f1f 	tst.w	r4, #31
 8005a48:	d101      	bne.n	8005a4e <USB_ActivateEndpoint+0x150>
 8005a4a:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 8005a4e:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 8005a52:	fa1f fc8c 	uxth.w	ip, ip
 8005a56:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8005a5a:	fa1f fe8e 	uxth.w	lr, lr
 8005a5e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8005a62:	f44c 4c00 	orr.w	ip, ip, #32768	@ 0x8000
 8005a66:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a6a:	780c      	ldrb	r4, [r1, #0]
 8005a6c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a70:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8005a74:	d00c      	beq.n	8005a90 <USB_ActivateEndpoint+0x192>
 8005a76:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005a80:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005a84:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005a88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a8c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->num == 0U)
 8005a90:	7809      	ldrb	r1, [r1, #0]
 8005a92:	bb69      	cbnz	r1, 8005af0 <USB_ActivateEndpoint+0x1f2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a94:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005aa2:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8005aa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005aaa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005aae:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005ab2:	e0a2      	b.n	8005bfa <USB_ActivateEndpoint+0x2fc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ab4:	b94c      	cbnz	r4, 8005aca <USB_ActivateEndpoint+0x1cc>
 8005ab6:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	@ 0x40c
 8005aba:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005abe:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005ac2:	b2a4      	uxth	r4, r4
 8005ac4:	f8a2 440c 	strh.w	r4, [r2, #1036]	@ 0x40c
 8005ac8:	e7cf      	b.n	8005a6a <USB_ActivateEndpoint+0x16c>
 8005aca:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8005ace:	f014 0f01 	tst.w	r4, #1
 8005ad2:	d001      	beq.n	8005ad8 <USB_ActivateEndpoint+0x1da>
 8005ad4:	f10c 0c01 	add.w	ip, ip, #1
 8005ad8:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	@ 0x40c
 8005adc:	b2a4      	uxth	r4, r4
 8005ade:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8005ae2:	fa1f fc8c 	uxth.w	ip, ip
 8005ae6:	ea44 040c 	orr.w	r4, r4, ip
 8005aea:	f8a2 440c 	strh.w	r4, [r2, #1036]	@ 0x40c
 8005aee:	e7bc      	b.n	8005a6a <USB_ActivateEndpoint+0x16c>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005af0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005af4:	b292      	uxth	r2, r2
 8005af6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005afa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005afe:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8005b02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b0a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005b0e:	e074      	b.n	8005bfa <USB_ActivateEndpoint+0x2fc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b10:	78ca      	ldrb	r2, [r1, #3]
 8005b12:	2a02      	cmp	r2, #2
 8005b14:	d072      	beq.n	8005bfc <USB_ActivateEndpoint+0x2fe>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b16:	780c      	ldrb	r4, [r1, #0]
 8005b18:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8005b22:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b2e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b32:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8005b36:	b292      	uxth	r2, r2
 8005b38:	441a      	add	r2, r3
 8005b3a:	f891 c000 	ldrb.w	ip, [r1]
 8005b3e:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8005b42:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8005b46:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005b4a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005b4e:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
 8005b52:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8005b56:	b292      	uxth	r2, r2
 8005b58:	441a      	add	r2, r3
 8005b5a:	f891 c000 	ldrb.w	ip, [r1]
 8005b5e:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8005b62:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8005b66:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005b6a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005b6e:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408

    if (ep->is_in == 0U)
 8005b72:	784a      	ldrb	r2, [r1, #1]
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	d150      	bne.n	8005c1a <USB_ActivateEndpoint+0x31c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b78:	780c      	ldrb	r4, [r1, #0]
 8005b7a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005b7e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8005b82:	d00c      	beq.n	8005b9e <USB_ActivateEndpoint+0x2a0>
 8005b84:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005b8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b92:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005b96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b9a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b9e:	780c      	ldrb	r4, [r1, #0]
 8005ba0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ba4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005ba8:	d00c      	beq.n	8005bc4 <USB_ActivateEndpoint+0x2c6>
 8005baa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005bb4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005bb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bbc:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005bc0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bc4:	f891 c000 	ldrb.w	ip, [r1]
 8005bc8:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bd2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005bd6:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8005bda:	f248 0480 	movw	r4, #32896	@ 0x8080
 8005bde:	4322      	orrs	r2, r4
 8005be0:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005be4:	7809      	ldrb	r1, [r1, #0]
 8005be6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005bea:	b292      	uxth	r2, r2
 8005bec:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf4:	4322      	orrs	r2, r4
 8005bf6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005bfa:	bd10      	pop	{r4, pc}
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bfc:	780c      	ldrb	r4, [r1, #0]
 8005bfe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c02:	b292      	uxth	r2, r2
 8005c04:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005c08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c0c:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8005c10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c14:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8005c18:	e78b      	b.n	8005b32 <USB_ActivateEndpoint+0x234>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c1a:	780c      	ldrb	r4, [r1, #0]
 8005c1c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c20:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8005c24:	d00c      	beq.n	8005c40 <USB_ActivateEndpoint+0x342>
 8005c26:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c2a:	b292      	uxth	r2, r2
 8005c2c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005c30:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c34:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005c38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c3c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c40:	780c      	ldrb	r4, [r1, #0]
 8005c42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c46:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005c4a:	d00c      	beq.n	8005c66 <USB_ActivateEndpoint+0x368>
 8005c4c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c50:	b292      	uxth	r2, r2
 8005c52:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005c56:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c5e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005c62:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005c66:	78ca      	ldrb	r2, [r1, #3]
 8005c68:	2a01      	cmp	r2, #1
 8005c6a:	d01e      	beq.n	8005caa <USB_ActivateEndpoint+0x3ac>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c6c:	780c      	ldrb	r4, [r1, #0]
 8005c6e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c72:	b292      	uxth	r2, r2
 8005c74:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c7c:	f082 0220 	eor.w	r2, r2, #32
 8005c80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c88:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c8c:	7809      	ldrb	r1, [r1, #0]
 8005c8e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005c92:	b292      	uxth	r2, r2
 8005c94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c98:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ca0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ca4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005ca8:	e7a7      	b.n	8005bfa <USB_ActivateEndpoint+0x2fc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005caa:	780c      	ldrb	r4, [r1, #0]
 8005cac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cc2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8005cc6:	e7e1      	b.n	8005c8c <USB_ActivateEndpoint+0x38e>

08005cc8 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005cc8:	7b0b      	ldrb	r3, [r1, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d146      	bne.n	8005d5c <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8005cce:	784b      	ldrb	r3, [r1, #1]
 8005cd0:	b313      	cbz	r3, 8005d18 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd2:	780a      	ldrb	r2, [r1, #0]
 8005cd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005cd8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005cdc:	d00c      	beq.n	8005cf8 <USB_DeactivateEndpoint+0x30>
 8005cde:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cf4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf8:	780a      	ldrb	r2, [r1, #0]
 8005cfa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005d14:	2000      	movs	r0, #0
 8005d16:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d18:	780a      	ldrb	r2, [r1, #0]
 8005d1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d1e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8005d22:	d00c      	beq.n	8005d3e <USB_DeactivateEndpoint+0x76>
 8005d24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d3e:	780a      	ldrb	r2, [r1, #0]
 8005d40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d56:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005d5a:	e7db      	b.n	8005d14 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8005d5c:	784b      	ldrb	r3, [r1, #1]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d14e      	bne.n	8005e00 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d62:	780a      	ldrb	r2, [r1, #0]
 8005d64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d68:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8005d6c:	d00c      	beq.n	8005d88 <USB_DeactivateEndpoint+0xc0>
 8005d6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d88:	780a      	ldrb	r2, [r1, #0]
 8005d8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d8e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005d92:	d00c      	beq.n	8005dae <USB_DeactivateEndpoint+0xe6>
 8005d94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005daa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005dae:	780a      	ldrb	r2, [r1, #0]
 8005db0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dca:	780a      	ldrb	r2, [r1, #0]
 8005dcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dda:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8005dde:	ea43 030c 	orr.w	r3, r3, ip
 8005de2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005de6:	780a      	ldrb	r2, [r1, #0]
 8005de8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df6:	ea43 030c 	orr.w	r3, r3, ip
 8005dfa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005dfe:	e789      	b.n	8005d14 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e00:	780a      	ldrb	r2, [r1, #0]
 8005e02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e06:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8005e0a:	d00c      	beq.n	8005e26 <USB_DeactivateEndpoint+0x15e>
 8005e0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e26:	780a      	ldrb	r2, [r1, #0]
 8005e28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e2c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005e30:	d00c      	beq.n	8005e4c <USB_DeactivateEndpoint+0x184>
 8005e32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005e4c:	780a      	ldrb	r2, [r1, #0]
 8005e4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e68:	780a      	ldrb	r2, [r1, #0]
 8005e6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e78:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8005e7c:	ea43 030c 	orr.w	r3, r3, ip
 8005e80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e84:	780a      	ldrb	r2, [r1, #0]
 8005e86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e94:	ea43 030c 	orr.w	r3, r3, ip
 8005e98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005e9c:	e73a      	b.n	8005d14 <USB_DeactivateEndpoint+0x4c>

08005e9e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005e9e:	784b      	ldrb	r3, [r1, #1]
 8005ea0:	b18b      	cbz	r3, 8005ec6 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ea2:	780a      	ldrb	r2, [r1, #0]
 8005ea4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb2:	f083 0310 	eor.w	r3, r3, #16
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ebe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ec6:	780a      	ldrb	r2, [r1, #0]
 8005ec8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005ee6:	e7ec      	b.n	8005ec2 <USB_EPSetStall+0x24>

08005ee8 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005ee8:	7b0b      	ldrb	r3, [r1, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d14b      	bne.n	8005f86 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8005eee:	784b      	ldrb	r3, [r1, #1]
 8005ef0:	b333      	cbz	r3, 8005f40 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ef2:	780a      	ldrb	r2, [r1, #0]
 8005ef4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ef8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005efc:	d00c      	beq.n	8005f18 <USB_EPClearStall+0x30>
 8005efe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005f18:	78cb      	ldrb	r3, [r1, #3]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d033      	beq.n	8005f86 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f1e:	780a      	ldrb	r2, [r1, #0]
 8005f20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f2e:	f083 0320 	eor.w	r3, r3, #32
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005f3e:	e022      	b.n	8005f86 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f40:	780a      	ldrb	r2, [r1, #0]
 8005f42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f46:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8005f4a:	d00c      	beq.n	8005f66 <USB_EPClearStall+0x7e>
 8005f4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f62:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f66:	780a      	ldrb	r2, [r1, #0]
 8005f68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005f86:	2000      	movs	r0, #0
 8005f88:	4770      	bx	lr

08005f8a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005f8a:	b911      	cbnz	r1, 8005f92 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f8c:	2380      	movs	r3, #128	@ 0x80
 8005f8e:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8005f92:	2000      	movs	r0, #0
 8005f94:	4770      	bx	lr

08005f96 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005f96:	2000      	movs	r0, #0
 8005f98:	4770      	bx	lr

08005f9a <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	4770      	bx	lr

08005f9e <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f9e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8005fa2:	b280      	uxth	r0, r0
 8005fa4:	4770      	bx	lr

08005fa6 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	4770      	bx	lr

08005faa <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005faa:	3301      	adds	r3, #1
 8005fac:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fae:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005fb2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 8005fb6:	e008      	b.n	8005fca <USB_WritePMA+0x20>
  {
    WrVal = pBuf[0];
 8005fb8:	780a      	ldrb	r2, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005fba:	f891 c001 	ldrb.w	ip, [r1, #1]
 8005fbe:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8005fc2:	f820 2b04 	strh.w	r2, [r0], #4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8005fc6:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f4      	bne.n	8005fb8 <USB_WritePMA+0xe>
  }
}
 8005fce:	4770      	bx	lr

08005fd0 <USB_EPStartXfer>:
{
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8005fd6:	784a      	ldrb	r2, [r1, #1]
 8005fd8:	2a01      	cmp	r2, #1
 8005fda:	d03b      	beq.n	8006054 <USB_EPStartXfer+0x84>
    if (ep->doublebuffer == 0U)
 8005fdc:	7b0b      	ldrb	r3, [r1, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 82a6 	bne.w	8006530 <USB_EPStartXfer+0x560>
      if (ep->xfer_len > ep->maxpacket)
 8005fe4:	698b      	ldr	r3, [r1, #24]
 8005fe6:	690a      	ldr	r2, [r1, #16]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	f240 8284 	bls.w	80064f6 <USB_EPStartXfer+0x526>
        ep->xfer_len -= len;
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ff2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	442b      	add	r3, r5
 8005ffa:	7821      	ldrb	r1, [r4, #0]
 8005ffc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006000:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 8006004:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006008:	f8a3 140c 	strh.w	r1, [r3, #1036]	@ 0x40c
 800600c:	2a3e      	cmp	r2, #62	@ 0x3e
 800600e:	f240 8276 	bls.w	80064fe <USB_EPStartXfer+0x52e>
 8006012:	0951      	lsrs	r1, r2, #5
 8006014:	f012 0f1f 	tst.w	r2, #31
 8006018:	d100      	bne.n	800601c <USB_EPStartXfer+0x4c>
 800601a:	3901      	subs	r1, #1
 800601c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006020:	b292      	uxth	r2, r2
 8006022:	0289      	lsls	r1, r1, #10
 8006024:	b289      	uxth	r1, r1
 8006026:	430a      	orrs	r2, r1
 8006028:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800602c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006030:	7822      	ldrb	r2, [r4, #0]
 8006032:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800603c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006040:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8006044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006050:	2000      	movs	r0, #0
}
 8006052:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006054:	698e      	ldr	r6, [r1, #24]
 8006056:	6909      	ldr	r1, [r1, #16]
 8006058:	428e      	cmp	r6, r1
 800605a:	d900      	bls.n	800605e <USB_EPStartXfer+0x8e>
      len = ep->maxpacket;
 800605c:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800605e:	7b23      	ldrb	r3, [r4, #12]
 8006060:	b373      	cbz	r3, 80060c0 <USB_EPStartXfer+0xf0>
      if (ep->type == EP_TYPE_BULK)
 8006062:	78e3      	ldrb	r3, [r4, #3]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d04d      	beq.n	8006104 <USB_EPStartXfer+0x134>
        ep->xfer_len_db -= len;
 8006068:	6a23      	ldr	r3, [r4, #32]
 800606a:	1b9b      	subs	r3, r3, r6
 800606c:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800606e:	7821      	ldrb	r1, [r4, #0]
 8006070:	f835 3021 	ldrh.w	r3, [r5, r1, lsl #2]
 8006074:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006078:	f000 81f5 	beq.w	8006466 <USB_EPStartXfer+0x496>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800607c:	2a00      	cmp	r2, #0
 800607e:	f040 81e2 	bne.w	8006446 <USB_EPStartXfer+0x476>
 8006082:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	442b      	add	r3, r5
 800608a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800608e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006092:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006096:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800609a:	2e3e      	cmp	r6, #62	@ 0x3e
 800609c:	f240 81ba 	bls.w	8006414 <USB_EPStartXfer+0x444>
 80060a0:	0971      	lsrs	r1, r6, #5
 80060a2:	f016 0f1f 	tst.w	r6, #31
 80060a6:	d100      	bne.n	80060aa <USB_EPStartXfer+0xda>
 80060a8:	3901      	subs	r1, #1
 80060aa:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80060ae:	b292      	uxth	r2, r2
 80060b0:	0289      	lsls	r1, r1, #10
 80060b2:	b289      	uxth	r1, r1
 80060b4:	430a      	orrs	r2, r1
 80060b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060ba:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80060be:	e1cb      	b.n	8006458 <USB_EPStartXfer+0x488>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060c0:	b2b6      	uxth	r6, r6
 80060c2:	4633      	mov	r3, r6
 80060c4:	88e2      	ldrh	r2, [r4, #6]
 80060c6:	6961      	ldr	r1, [r4, #20]
 80060c8:	4628      	mov	r0, r5
 80060ca:	f7ff ff6e 	bl	8005faa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060ce:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	442b      	add	r3, r5
 80060d6:	7822      	ldrb	r2, [r4, #0]
 80060d8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80060dc:	f8a3 6404 	strh.w	r6, [r3, #1028]	@ 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060e0:	7822      	ldrb	r2, [r4, #0]
 80060e2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f0:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80060f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006100:	2000      	movs	r0, #0
 8006102:	e7a6      	b.n	8006052 <USB_EPStartXfer+0x82>
        if (ep->xfer_len_db > ep->maxpacket)
 8006104:	6a23      	ldr	r3, [r4, #32]
 8006106:	4299      	cmp	r1, r3
 8006108:	f080 8166 	bcs.w	80063d8 <USB_EPStartXfer+0x408>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800610c:	7822      	ldrb	r2, [r4, #0]
 800610e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006124:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8006128:	6a23      	ldr	r3, [r4, #32]
 800612a:	1b9b      	subs	r3, r3, r6
 800612c:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800612e:	7822      	ldrb	r2, [r4, #0]
 8006130:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006134:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006138:	f000 80a7 	beq.w	800628a <USB_EPStartXfer+0x2ba>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800613c:	7863      	ldrb	r3, [r4, #1]
 800613e:	bbb3      	cbnz	r3, 80061ae <USB_EPStartXfer+0x1de>
 8006140:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	442b      	add	r3, r5
 8006148:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800614c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006150:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006154:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006158:	2e3e      	cmp	r6, #62	@ 0x3e
 800615a:	d90f      	bls.n	800617c <USB_EPStartXfer+0x1ac>
 800615c:	0971      	lsrs	r1, r6, #5
 800615e:	f016 0f1f 	tst.w	r6, #31
 8006162:	d100      	bne.n	8006166 <USB_EPStartXfer+0x196>
 8006164:	3901      	subs	r1, #1
 8006166:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800616a:	b292      	uxth	r2, r2
 800616c:	0289      	lsls	r1, r1, #10
 800616e:	b289      	uxth	r1, r1
 8006170:	430a      	orrs	r2, r1
 8006172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006176:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800617a:	e01a      	b.n	80061b2 <USB_EPStartXfer+0x1e2>
 800617c:	b94e      	cbnz	r6, 8006192 <USB_EPStartXfer+0x1c2>
 800617e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006182:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006186:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800618a:	b292      	uxth	r2, r2
 800618c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006190:	e00f      	b.n	80061b2 <USB_EPStartXfer+0x1e2>
 8006192:	0872      	lsrs	r2, r6, #1
 8006194:	f016 0f01 	tst.w	r6, #1
 8006198:	d000      	beq.n	800619c <USB_EPStartXfer+0x1cc>
 800619a:	3201      	adds	r2, #1
 800619c:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 80061a0:	b289      	uxth	r1, r1
 80061a2:	0292      	lsls	r2, r2, #10
 80061a4:	b292      	uxth	r2, r2
 80061a6:	430a      	orrs	r2, r1
 80061a8:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80061ac:	e001      	b.n	80061b2 <USB_EPStartXfer+0x1e2>
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d030      	beq.n	8006214 <USB_EPStartXfer+0x244>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061b2:	b2b3      	uxth	r3, r6
 80061b4:	8962      	ldrh	r2, [r4, #10]
 80061b6:	6961      	ldr	r1, [r4, #20]
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7ff fef6 	bl	8005faa <USB_WritePMA>
            ep->xfer_buff += len;
 80061be:	6963      	ldr	r3, [r4, #20]
 80061c0:	4433      	add	r3, r6
 80061c2:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80061c4:	6a23      	ldr	r3, [r4, #32]
 80061c6:	6922      	ldr	r2, [r4, #16]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d92d      	bls.n	8006228 <USB_EPStartXfer+0x258>
              ep->xfer_len_db -= len;
 80061cc:	1b9b      	subs	r3, r3, r6
 80061ce:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061d0:	7863      	ldrb	r3, [r4, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d145      	bne.n	8006262 <USB_EPStartXfer+0x292>
 80061d6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	442b      	add	r3, r5
 80061de:	7822      	ldrb	r2, [r4, #0]
 80061e0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80061e4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80061e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80061ec:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80061f0:	2e3e      	cmp	r6, #62	@ 0x3e
 80061f2:	d91d      	bls.n	8006230 <USB_EPStartXfer+0x260>
 80061f4:	0971      	lsrs	r1, r6, #5
 80061f6:	f016 0f1f 	tst.w	r6, #31
 80061fa:	d100      	bne.n	80061fe <USB_EPStartXfer+0x22e>
 80061fc:	3901      	subs	r1, #1
 80061fe:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8006202:	b292      	uxth	r2, r2
 8006204:	0289      	lsls	r1, r1, #10
 8006206:	b289      	uxth	r1, r1
 8006208:	430a      	orrs	r2, r1
 800620a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800620e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006212:	e028      	b.n	8006266 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006214:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	442b      	add	r3, r5
 800621c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006220:	b2b2      	uxth	r2, r6
 8006222:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006226:	e7c4      	b.n	80061b2 <USB_EPStartXfer+0x1e2>
              ep->xfer_len_db = 0U;
 8006228:	2200      	movs	r2, #0
 800622a:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800622c:	461e      	mov	r6, r3
 800622e:	e7cf      	b.n	80061d0 <USB_EPStartXfer+0x200>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006230:	b94e      	cbnz	r6, 8006246 <USB_EPStartXfer+0x276>
 8006232:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8006236:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800623a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800623e:	b292      	uxth	r2, r2
 8006240:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006244:	e00f      	b.n	8006266 <USB_EPStartXfer+0x296>
 8006246:	0872      	lsrs	r2, r6, #1
 8006248:	f016 0f01 	tst.w	r6, #1
 800624c:	d000      	beq.n	8006250 <USB_EPStartXfer+0x280>
 800624e:	3201      	adds	r2, #1
 8006250:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 8006254:	b289      	uxth	r1, r1
 8006256:	0292      	lsls	r2, r2, #10
 8006258:	b292      	uxth	r2, r2
 800625a:	430a      	orrs	r2, r1
 800625c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006260:	e001      	b.n	8006266 <USB_EPStartXfer+0x296>
 8006262:	2b01      	cmp	r3, #1
 8006264:	d006      	beq.n	8006274 <USB_EPStartXfer+0x2a4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006266:	b2b3      	uxth	r3, r6
 8006268:	8922      	ldrh	r2, [r4, #8]
 800626a:	6961      	ldr	r1, [r4, #20]
 800626c:	4628      	mov	r0, r5
 800626e:	f7ff fe9c 	bl	8005faa <USB_WritePMA>
 8006272:	e735      	b.n	80060e0 <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006274:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	442b      	add	r3, r5
 800627c:	7822      	ldrb	r2, [r4, #0]
 800627e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006282:	b2b2      	uxth	r2, r6
 8006284:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006288:	e7ed      	b.n	8006266 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800628a:	7863      	ldrb	r3, [r4, #1]
 800628c:	bbb3      	cbnz	r3, 80062fc <USB_EPStartXfer+0x32c>
 800628e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006292:	b29b      	uxth	r3, r3
 8006294:	442b      	add	r3, r5
 8006296:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800629a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800629e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80062a2:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80062a6:	2e3e      	cmp	r6, #62	@ 0x3e
 80062a8:	d90f      	bls.n	80062ca <USB_EPStartXfer+0x2fa>
 80062aa:	0971      	lsrs	r1, r6, #5
 80062ac:	f016 0f1f 	tst.w	r6, #31
 80062b0:	d100      	bne.n	80062b4 <USB_EPStartXfer+0x2e4>
 80062b2:	3901      	subs	r1, #1
 80062b4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80062b8:	b292      	uxth	r2, r2
 80062ba:	0289      	lsls	r1, r1, #10
 80062bc:	b289      	uxth	r1, r1
 80062be:	430a      	orrs	r2, r1
 80062c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062c4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80062c8:	e01a      	b.n	8006300 <USB_EPStartXfer+0x330>
 80062ca:	b94e      	cbnz	r6, 80062e0 <USB_EPStartXfer+0x310>
 80062cc:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80062d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80062d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80062d8:	b292      	uxth	r2, r2
 80062da:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80062de:	e00f      	b.n	8006300 <USB_EPStartXfer+0x330>
 80062e0:	0872      	lsrs	r2, r6, #1
 80062e2:	f016 0f01 	tst.w	r6, #1
 80062e6:	d000      	beq.n	80062ea <USB_EPStartXfer+0x31a>
 80062e8:	3201      	adds	r2, #1
 80062ea:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 80062ee:	b289      	uxth	r1, r1
 80062f0:	0292      	lsls	r2, r2, #10
 80062f2:	b292      	uxth	r2, r2
 80062f4:	430a      	orrs	r2, r1
 80062f6:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80062fa:	e001      	b.n	8006300 <USB_EPStartXfer+0x330>
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d030      	beq.n	8006362 <USB_EPStartXfer+0x392>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006300:	b2b3      	uxth	r3, r6
 8006302:	8922      	ldrh	r2, [r4, #8]
 8006304:	6961      	ldr	r1, [r4, #20]
 8006306:	4628      	mov	r0, r5
 8006308:	f7ff fe4f 	bl	8005faa <USB_WritePMA>
            ep->xfer_buff += len;
 800630c:	6963      	ldr	r3, [r4, #20]
 800630e:	4433      	add	r3, r6
 8006310:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006312:	6a23      	ldr	r3, [r4, #32]
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	4293      	cmp	r3, r2
 8006318:	d92d      	bls.n	8006376 <USB_EPStartXfer+0x3a6>
              ep->xfer_len_db -= len;
 800631a:	1b9b      	subs	r3, r3, r6
 800631c:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800631e:	7863      	ldrb	r3, [r4, #1]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d145      	bne.n	80063b0 <USB_EPStartXfer+0x3e0>
 8006324:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006328:	b29b      	uxth	r3, r3
 800632a:	442b      	add	r3, r5
 800632c:	7822      	ldrb	r2, [r4, #0]
 800632e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006332:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006336:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800633a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800633e:	2e3e      	cmp	r6, #62	@ 0x3e
 8006340:	d91d      	bls.n	800637e <USB_EPStartXfer+0x3ae>
 8006342:	0971      	lsrs	r1, r6, #5
 8006344:	f016 0f1f 	tst.w	r6, #31
 8006348:	d100      	bne.n	800634c <USB_EPStartXfer+0x37c>
 800634a:	3901      	subs	r1, #1
 800634c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006350:	b292      	uxth	r2, r2
 8006352:	0289      	lsls	r1, r1, #10
 8006354:	b289      	uxth	r1, r1
 8006356:	430a      	orrs	r2, r1
 8006358:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800635c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006360:	e028      	b.n	80063b4 <USB_EPStartXfer+0x3e4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006362:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	442b      	add	r3, r5
 800636a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800636e:	b2b2      	uxth	r2, r6
 8006370:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006374:	e7c4      	b.n	8006300 <USB_EPStartXfer+0x330>
              ep->xfer_len_db = 0U;
 8006376:	2200      	movs	r2, #0
 8006378:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800637a:	461e      	mov	r6, r3
 800637c:	e7cf      	b.n	800631e <USB_EPStartXfer+0x34e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800637e:	b94e      	cbnz	r6, 8006394 <USB_EPStartXfer+0x3c4>
 8006380:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006384:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006388:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800638c:	b292      	uxth	r2, r2
 800638e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006392:	e00f      	b.n	80063b4 <USB_EPStartXfer+0x3e4>
 8006394:	0872      	lsrs	r2, r6, #1
 8006396:	f016 0f01 	tst.w	r6, #1
 800639a:	d000      	beq.n	800639e <USB_EPStartXfer+0x3ce>
 800639c:	3201      	adds	r2, #1
 800639e:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 80063a2:	b289      	uxth	r1, r1
 80063a4:	0292      	lsls	r2, r2, #10
 80063a6:	b292      	uxth	r2, r2
 80063a8:	430a      	orrs	r2, r1
 80063aa:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80063ae:	e001      	b.n	80063b4 <USB_EPStartXfer+0x3e4>
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d006      	beq.n	80063c2 <USB_EPStartXfer+0x3f2>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b4:	b2b3      	uxth	r3, r6
 80063b6:	8962      	ldrh	r2, [r4, #10]
 80063b8:	6961      	ldr	r1, [r4, #20]
 80063ba:	4628      	mov	r0, r5
 80063bc:	f7ff fdf5 	bl	8005faa <USB_WritePMA>
 80063c0:	e68e      	b.n	80060e0 <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063c2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	442b      	add	r3, r5
 80063ca:	7822      	ldrb	r2, [r4, #0]
 80063cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80063d0:	b2b2      	uxth	r2, r6
 80063d2:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80063d6:	e7ed      	b.n	80063b4 <USB_EPStartXfer+0x3e4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80063d8:	7821      	ldrb	r1, [r4, #0]
 80063da:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80063de:	b292      	uxth	r2, r2
 80063e0:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80063e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80063e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063f0:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063f4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80063f8:	b292      	uxth	r2, r2
 80063fa:	442a      	add	r2, r5
 80063fc:	7821      	ldrb	r1, [r4, #0]
 80063fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006402:	b29b      	uxth	r3, r3
 8006404:	f8a2 3404 	strh.w	r3, [r2, #1028]	@ 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006408:	8922      	ldrh	r2, [r4, #8]
 800640a:	6961      	ldr	r1, [r4, #20]
 800640c:	4628      	mov	r0, r5
 800640e:	f7ff fdcc 	bl	8005faa <USB_WritePMA>
 8006412:	e665      	b.n	80060e0 <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006414:	b94e      	cbnz	r6, 800642a <USB_EPStartXfer+0x45a>
 8006416:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800641a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800641e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006422:	b292      	uxth	r2, r2
 8006424:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006428:	e016      	b.n	8006458 <USB_EPStartXfer+0x488>
 800642a:	0872      	lsrs	r2, r6, #1
 800642c:	f016 0f01 	tst.w	r6, #1
 8006430:	d000      	beq.n	8006434 <USB_EPStartXfer+0x464>
 8006432:	3201      	adds	r2, #1
 8006434:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 8006438:	b289      	uxth	r1, r1
 800643a:	0292      	lsls	r2, r2, #10
 800643c:	b292      	uxth	r2, r2
 800643e:	430a      	orrs	r2, r1
 8006440:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006444:	e008      	b.n	8006458 <USB_EPStartXfer+0x488>
 8006446:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	442b      	add	r3, r5
 800644e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006452:	b2b2      	uxth	r2, r6
 8006454:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006458:	b2b3      	uxth	r3, r6
 800645a:	8962      	ldrh	r2, [r4, #10]
 800645c:	6961      	ldr	r1, [r4, #20]
 800645e:	4628      	mov	r0, r5
 8006460:	f7ff fda3 	bl	8005faa <USB_WritePMA>
 8006464:	e63c      	b.n	80060e0 <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006466:	bbb2      	cbnz	r2, 80064d6 <USB_EPStartXfer+0x506>
 8006468:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800646c:	b29b      	uxth	r3, r3
 800646e:	442b      	add	r3, r5
 8006470:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006474:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8006478:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800647c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006480:	2e3e      	cmp	r6, #62	@ 0x3e
 8006482:	d90f      	bls.n	80064a4 <USB_EPStartXfer+0x4d4>
 8006484:	0971      	lsrs	r1, r6, #5
 8006486:	f016 0f1f 	tst.w	r6, #31
 800648a:	d100      	bne.n	800648e <USB_EPStartXfer+0x4be>
 800648c:	3901      	subs	r1, #1
 800648e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8006492:	b292      	uxth	r2, r2
 8006494:	0289      	lsls	r1, r1, #10
 8006496:	b289      	uxth	r1, r1
 8006498:	430a      	orrs	r2, r1
 800649a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800649e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80064a2:	e021      	b.n	80064e8 <USB_EPStartXfer+0x518>
 80064a4:	b94e      	cbnz	r6, 80064ba <USB_EPStartXfer+0x4ea>
 80064a6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80064aa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80064ae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80064b2:	b292      	uxth	r2, r2
 80064b4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80064b8:	e016      	b.n	80064e8 <USB_EPStartXfer+0x518>
 80064ba:	0872      	lsrs	r2, r6, #1
 80064bc:	f016 0f01 	tst.w	r6, #1
 80064c0:	d000      	beq.n	80064c4 <USB_EPStartXfer+0x4f4>
 80064c2:	3201      	adds	r2, #1
 80064c4:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 80064c8:	b289      	uxth	r1, r1
 80064ca:	0292      	lsls	r2, r2, #10
 80064cc:	b292      	uxth	r2, r2
 80064ce:	430a      	orrs	r2, r1
 80064d0:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80064d4:	e008      	b.n	80064e8 <USB_EPStartXfer+0x518>
 80064d6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	442b      	add	r3, r5
 80064de:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80064e2:	b2b2      	uxth	r2, r6
 80064e4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e8:	b2b3      	uxth	r3, r6
 80064ea:	8922      	ldrh	r2, [r4, #8]
 80064ec:	6961      	ldr	r1, [r4, #20]
 80064ee:	4628      	mov	r0, r5
 80064f0:	f7ff fd5b 	bl	8005faa <USB_WritePMA>
 80064f4:	e5f4      	b.n	80060e0 <USB_EPStartXfer+0x110>
        ep->xfer_len = 0U;
 80064f6:	2200      	movs	r2, #0
 80064f8:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80064fa:	461a      	mov	r2, r3
 80064fc:	e579      	b.n	8005ff2 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064fe:	b94a      	cbnz	r2, 8006514 <USB_EPStartXfer+0x544>
 8006500:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006504:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006508:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800650c:	b292      	uxth	r2, r2
 800650e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006512:	e58d      	b.n	8006030 <USB_EPStartXfer+0x60>
 8006514:	0851      	lsrs	r1, r2, #1
 8006516:	f012 0f01 	tst.w	r2, #1
 800651a:	d000      	beq.n	800651e <USB_EPStartXfer+0x54e>
 800651c:	3101      	adds	r1, #1
 800651e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006522:	b292      	uxth	r2, r2
 8006524:	0289      	lsls	r1, r1, #10
 8006526:	b289      	uxth	r1, r1
 8006528:	430a      	orrs	r2, r1
 800652a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800652e:	e57f      	b.n	8006030 <USB_EPStartXfer+0x60>
      if (ep->type == EP_TYPE_BULK)
 8006530:	78cb      	ldrb	r3, [r1, #3]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d04d      	beq.n	80065d2 <USB_EPStartXfer+0x602>
      else if (ep->type == EP_TYPE_ISOC)
 8006536:	2b01      	cmp	r3, #1
 8006538:	f040 812f 	bne.w	800679a <USB_EPStartXfer+0x7ca>
        if (ep->xfer_len > ep->maxpacket)
 800653c:	6989      	ldr	r1, [r1, #24]
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	4299      	cmp	r1, r3
 8006542:	f240 80e6 	bls.w	8006712 <USB_EPStartXfer+0x742>
          ep->xfer_len -= len;
 8006546:	1ac9      	subs	r1, r1, r3
 8006548:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800654a:	b9f2      	cbnz	r2, 800658a <USB_EPStartXfer+0x5ba>
 800654c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8006550:	b292      	uxth	r2, r2
 8006552:	442a      	add	r2, r5
 8006554:	7821      	ldrb	r1, [r4, #0]
 8006556:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800655a:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 800655e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006562:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8006566:	2b3e      	cmp	r3, #62	@ 0x3e
 8006568:	f240 80d7 	bls.w	800671a <USB_EPStartXfer+0x74a>
 800656c:	0958      	lsrs	r0, r3, #5
 800656e:	f013 0f1f 	tst.w	r3, #31
 8006572:	d100      	bne.n	8006576 <USB_EPStartXfer+0x5a6>
 8006574:	3801      	subs	r0, #1
 8006576:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 800657a:	b289      	uxth	r1, r1
 800657c:	0280      	lsls	r0, r0, #10
 800657e:	b280      	uxth	r0, r0
 8006580:	4301      	orrs	r1, r0
 8006582:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006586:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800658a:	7862      	ldrb	r2, [r4, #1]
 800658c:	2a00      	cmp	r2, #0
 800658e:	f040 80f6 	bne.w	800677e <USB_EPStartXfer+0x7ae>
 8006592:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8006596:	b292      	uxth	r2, r2
 8006598:	442a      	add	r2, r5
 800659a:	7821      	ldrb	r1, [r4, #0]
 800659c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80065a0:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 80065a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80065a8:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 80065ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ae:	f240 80cd 	bls.w	800674c <USB_EPStartXfer+0x77c>
 80065b2:	0959      	lsrs	r1, r3, #5
 80065b4:	f013 0f1f 	tst.w	r3, #31
 80065b8:	d100      	bne.n	80065bc <USB_EPStartXfer+0x5ec>
 80065ba:	3901      	subs	r1, #1
 80065bc:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	0289      	lsls	r1, r1, #10
 80065c4:	b289      	uxth	r1, r1
 80065c6:	430b      	orrs	r3, r1
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065cc:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 80065d0:	e52e      	b.n	8006030 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065d2:	b9f2      	cbnz	r2, 8006612 <USB_EPStartXfer+0x642>
 80065d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80065d8:	b29b      	uxth	r3, r3
 80065da:	4403      	add	r3, r0
 80065dc:	780a      	ldrb	r2, [r1, #0]
 80065de:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80065e2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80065e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80065ea:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80065ee:	690a      	ldr	r2, [r1, #16]
 80065f0:	2a3e      	cmp	r2, #62	@ 0x3e
 80065f2:	d931      	bls.n	8006658 <USB_EPStartXfer+0x688>
 80065f4:	0951      	lsrs	r1, r2, #5
 80065f6:	f012 0f1f 	tst.w	r2, #31
 80065fa:	d100      	bne.n	80065fe <USB_EPStartXfer+0x62e>
 80065fc:	3901      	subs	r1, #1
 80065fe:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8006602:	b292      	uxth	r2, r2
 8006604:	0289      	lsls	r1, r1, #10
 8006606:	b289      	uxth	r1, r1
 8006608:	430a      	orrs	r2, r1
 800660a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800660e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006612:	7863      	ldrb	r3, [r4, #1]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d151      	bne.n	80066bc <USB_EPStartXfer+0x6ec>
 8006618:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800661c:	b29b      	uxth	r3, r3
 800661e:	442b      	add	r3, r5
 8006620:	7822      	ldrb	r2, [r4, #0]
 8006622:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006626:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800662a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800662e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006632:	6922      	ldr	r2, [r4, #16]
 8006634:	2a3e      	cmp	r2, #62	@ 0x3e
 8006636:	d928      	bls.n	800668a <USB_EPStartXfer+0x6ba>
 8006638:	0951      	lsrs	r1, r2, #5
 800663a:	f012 0f1f 	tst.w	r2, #31
 800663e:	d100      	bne.n	8006642 <USB_EPStartXfer+0x672>
 8006640:	3901      	subs	r1, #1
 8006642:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006646:	b292      	uxth	r2, r2
 8006648:	0289      	lsls	r1, r1, #10
 800664a:	b289      	uxth	r1, r1
 800664c:	430a      	orrs	r2, r1
 800664e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006652:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006656:	e033      	b.n	80066c0 <USB_EPStartXfer+0x6f0>
 8006658:	b94a      	cbnz	r2, 800666e <USB_EPStartXfer+0x69e>
 800665a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800665e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006662:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006666:	b292      	uxth	r2, r2
 8006668:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800666c:	e7d1      	b.n	8006612 <USB_EPStartXfer+0x642>
 800666e:	0851      	lsrs	r1, r2, #1
 8006670:	f012 0f01 	tst.w	r2, #1
 8006674:	d000      	beq.n	8006678 <USB_EPStartXfer+0x6a8>
 8006676:	3101      	adds	r1, #1
 8006678:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800667c:	b290      	uxth	r0, r2
 800667e:	028a      	lsls	r2, r1, #10
 8006680:	b292      	uxth	r2, r2
 8006682:	4302      	orrs	r2, r0
 8006684:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8006688:	e7c3      	b.n	8006612 <USB_EPStartXfer+0x642>
 800668a:	b94a      	cbnz	r2, 80066a0 <USB_EPStartXfer+0x6d0>
 800668c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8006690:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006694:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006698:	b292      	uxth	r2, r2
 800669a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800669e:	e00f      	b.n	80066c0 <USB_EPStartXfer+0x6f0>
 80066a0:	0851      	lsrs	r1, r2, #1
 80066a2:	f012 0f01 	tst.w	r2, #1
 80066a6:	d000      	beq.n	80066aa <USB_EPStartXfer+0x6da>
 80066a8:	3101      	adds	r1, #1
 80066aa:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80066ae:	b290      	uxth	r0, r2
 80066b0:	028a      	lsls	r2, r1, #10
 80066b2:	b292      	uxth	r2, r2
 80066b4:	4302      	orrs	r2, r0
 80066b6:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80066ba:	e001      	b.n	80066c0 <USB_EPStartXfer+0x6f0>
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d01d      	beq.n	80066fc <USB_EPStartXfer+0x72c>
        if (ep->xfer_count != 0U)
 80066c0:	69e3      	ldr	r3, [r4, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f43f acb4 	beq.w	8006030 <USB_EPStartXfer+0x60>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80066c8:	7822      	ldrb	r2, [r4, #0]
 80066ca:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ce:	f244 0340 	movw	r3, #16448	@ 0x4040
 80066d2:	ea03 0001 	and.w	r0, r3, r1
 80066d6:	438b      	bics	r3, r1
 80066d8:	d002      	beq.n	80066e0 <USB_EPStartXfer+0x710>
 80066da:	2800      	cmp	r0, #0
 80066dc:	f47f aca8 	bne.w	8006030 <USB_EPStartXfer+0x60>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80066e0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066f6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80066fa:	e499      	b.n	8006030 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	442b      	add	r3, r5
 8006704:	7822      	ldrb	r2, [r4, #0]
 8006706:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800670a:	8a22      	ldrh	r2, [r4, #16]
 800670c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8006710:	e7d6      	b.n	80066c0 <USB_EPStartXfer+0x6f0>
          ep->xfer_len = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 8006716:	460b      	mov	r3, r1
 8006718:	e717      	b.n	800654a <USB_EPStartXfer+0x57a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800671a:	b94b      	cbnz	r3, 8006730 <USB_EPStartXfer+0x760>
 800671c:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8006720:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8006724:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006728:	b289      	uxth	r1, r1
 800672a:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800672e:	e72c      	b.n	800658a <USB_EPStartXfer+0x5ba>
 8006730:	0859      	lsrs	r1, r3, #1
 8006732:	f013 0f01 	tst.w	r3, #1
 8006736:	d000      	beq.n	800673a <USB_EPStartXfer+0x76a>
 8006738:	3101      	adds	r1, #1
 800673a:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	@ 0x404
 800673e:	b280      	uxth	r0, r0
 8006740:	0289      	lsls	r1, r1, #10
 8006742:	b289      	uxth	r1, r1
 8006744:	4301      	orrs	r1, r0
 8006746:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800674a:	e71e      	b.n	800658a <USB_EPStartXfer+0x5ba>
 800674c:	b94b      	cbnz	r3, 8006762 <USB_EPStartXfer+0x792>
 800674e:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8006752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675a:	b29b      	uxth	r3, r3
 800675c:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8006760:	e466      	b.n	8006030 <USB_EPStartXfer+0x60>
 8006762:	0859      	lsrs	r1, r3, #1
 8006764:	f013 0f01 	tst.w	r3, #1
 8006768:	d000      	beq.n	800676c <USB_EPStartXfer+0x79c>
 800676a:	3101      	adds	r1, #1
 800676c:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8006770:	b298      	uxth	r0, r3
 8006772:	028b      	lsls	r3, r1, #10
 8006774:	b29b      	uxth	r3, r3
 8006776:	4303      	orrs	r3, r0
 8006778:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 800677c:	e458      	b.n	8006030 <USB_EPStartXfer+0x60>
 800677e:	2a01      	cmp	r2, #1
 8006780:	f47f ac56 	bne.w	8006030 <USB_EPStartXfer+0x60>
 8006784:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8006788:	b292      	uxth	r2, r2
 800678a:	442a      	add	r2, r5
 800678c:	7821      	ldrb	r1, [r4, #0]
 800678e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006792:	b29b      	uxth	r3, r3
 8006794:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8006798:	e44a      	b.n	8006030 <USB_EPStartXfer+0x60>
        return HAL_ERROR;
 800679a:	2001      	movs	r0, #1
 800679c:	e459      	b.n	8006052 <USB_EPStartXfer+0x82>

0800679e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800679e:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067a0:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067a2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80067a6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 80067aa:	e007      	b.n	80067bc <USB_ReadPMA+0x1e>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80067ac:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067b0:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80067b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80067b6:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80067b8:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80067ba:	3c01      	subs	r4, #1
 80067bc:	2c00      	cmp	r4, #0
 80067be:	d1f5      	bne.n	80067ac <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80067c0:	f013 0f01 	tst.w	r3, #1
 80067c4:	d001      	beq.n	80067ca <USB_ReadPMA+0x2c>
  {
    RdVal = *pdwVal;
 80067c6:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067c8:	700b      	strb	r3, [r1, #0]
  }
}
 80067ca:	bc10      	pop	{r4}
 80067cc:	4770      	bx	lr
	...

080067d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006808 <_sbrk+0x38>)
 80067d6:	490d      	ldr	r1, [pc, #52]	@ (800680c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067d8:	480d      	ldr	r0, [pc, #52]	@ (8006810 <_sbrk+0x40>)
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	b140      	cbz	r0, 80067f0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067de:	480c      	ldr	r0, [pc, #48]	@ (8006810 <_sbrk+0x40>)
 80067e0:	6800      	ldr	r0, [r0, #0]
 80067e2:	4403      	add	r3, r0
 80067e4:	1a52      	subs	r2, r2, r1
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d806      	bhi.n	80067f8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80067ea:	4a09      	ldr	r2, [pc, #36]	@ (8006810 <_sbrk+0x40>)
 80067ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80067ee:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80067f0:	4807      	ldr	r0, [pc, #28]	@ (8006810 <_sbrk+0x40>)
 80067f2:	4c08      	ldr	r4, [pc, #32]	@ (8006814 <_sbrk+0x44>)
 80067f4:	6004      	str	r4, [r0, #0]
 80067f6:	e7f2      	b.n	80067de <_sbrk+0xe>
    errno = ENOMEM;
 80067f8:	f7f9 fcce 	bl	8000198 <__errno>
 80067fc:	230c      	movs	r3, #12
 80067fe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006804:	e7f3      	b.n	80067ee <_sbrk+0x1e>
 8006806:	bf00      	nop
 8006808:	20005000 	.word	0x20005000
 800680c:	00000400 	.word	0x00000400
 8006810:	20000698 	.word	0x20000698
 8006814:	20001980 	.word	0x20001980

08006818 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006818:	4770      	bx	lr
	...

0800681c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800681c:	b500      	push	{lr}
 800681e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006820:	2300      	movs	r3, #0
 8006822:	9302      	str	r3, [sp, #8]
 8006824:	9303      	str	r3, [sp, #12]
 8006826:	9304      	str	r3, [sp, #16]
 8006828:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800682e:	4816      	ldr	r0, [pc, #88]	@ (8006888 <MX_TIM2_Init+0x6c>)
 8006830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006834:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 719;
 8006836:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800683a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800683c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 5000;
 800683e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006842:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006844:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006846:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006848:	f7fe fd12 	bl	8005270 <HAL_TIM_Base_Init>
 800684c:	b990      	cbnz	r0, 8006874 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800684e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006852:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006854:	a902      	add	r1, sp, #8
 8006856:	480c      	ldr	r0, [pc, #48]	@ (8006888 <MX_TIM2_Init+0x6c>)
 8006858:	f7fe fe0a 	bl	8005470 <HAL_TIM_ConfigClockSource>
 800685c:	b968      	cbnz	r0, 800687a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800685e:	2300      	movs	r3, #0
 8006860:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006862:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006864:	4669      	mov	r1, sp
 8006866:	4808      	ldr	r0, [pc, #32]	@ (8006888 <MX_TIM2_Init+0x6c>)
 8006868:	f7fe ff78 	bl	800575c <HAL_TIMEx_MasterConfigSynchronization>
 800686c:	b940      	cbnz	r0, 8006880 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800686e:	b007      	add	sp, #28
 8006870:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006874:	f7fb fcae 	bl	80021d4 <Error_Handler>
 8006878:	e7e9      	b.n	800684e <MX_TIM2_Init+0x32>
    Error_Handler();
 800687a:	f7fb fcab 	bl	80021d4 <Error_Handler>
 800687e:	e7ee      	b.n	800685e <MX_TIM2_Init+0x42>
    Error_Handler();
 8006880:	f7fb fca8 	bl	80021d4 <Error_Handler>
}
 8006884:	e7f3      	b.n	800686e <MX_TIM2_Init+0x52>
 8006886:	bf00      	nop
 8006888:	2000072c 	.word	0x2000072c

0800688c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800688c:	b500      	push	{lr}
 800688e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006890:	2300      	movs	r3, #0
 8006892:	9302      	str	r3, [sp, #8]
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800689e:	4815      	ldr	r0, [pc, #84]	@ (80068f4 <MX_TIM3_Init+0x68>)
 80068a0:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <MX_TIM3_Init+0x6c>)
 80068a2:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 359;
 80068a4:	f240 1267 	movw	r2, #359	@ 0x167
 80068a8:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068aa:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 250;
 80068ac:	22fa      	movs	r2, #250	@ 0xfa
 80068ae:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068b0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068b2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80068b4:	f7fe fcdc 	bl	8005270 <HAL_TIM_Base_Init>
 80068b8:	b990      	cbnz	r0, 80068e0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068be:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80068c0:	a902      	add	r1, sp, #8
 80068c2:	480c      	ldr	r0, [pc, #48]	@ (80068f4 <MX_TIM3_Init+0x68>)
 80068c4:	f7fe fdd4 	bl	8005470 <HAL_TIM_ConfigClockSource>
 80068c8:	b968      	cbnz	r0, 80068e6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068ca:	2300      	movs	r3, #0
 80068cc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068ce:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80068d0:	4669      	mov	r1, sp
 80068d2:	4808      	ldr	r0, [pc, #32]	@ (80068f4 <MX_TIM3_Init+0x68>)
 80068d4:	f7fe ff42 	bl	800575c <HAL_TIMEx_MasterConfigSynchronization>
 80068d8:	b940      	cbnz	r0, 80068ec <MX_TIM3_Init+0x60>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80068da:	b007      	add	sp, #28
 80068dc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80068e0:	f7fb fc78 	bl	80021d4 <Error_Handler>
 80068e4:	e7e9      	b.n	80068ba <MX_TIM3_Init+0x2e>
    Error_Handler();
 80068e6:	f7fb fc75 	bl	80021d4 <Error_Handler>
 80068ea:	e7ee      	b.n	80068ca <MX_TIM3_Init+0x3e>
    Error_Handler();
 80068ec:	f7fb fc72 	bl	80021d4 <Error_Handler>
}
 80068f0:	e7f3      	b.n	80068da <MX_TIM3_Init+0x4e>
 80068f2:	bf00      	nop
 80068f4:	200006e4 	.word	0x200006e4
 80068f8:	40000400 	.word	0x40000400

080068fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80068fc:	b500      	push	{lr}
 80068fe:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006900:	2300      	movs	r3, #0
 8006902:	9302      	str	r3, [sp, #8]
 8006904:	9303      	str	r3, [sp, #12]
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800690e:	4815      	ldr	r0, [pc, #84]	@ (8006964 <MX_TIM4_Init+0x68>)
 8006910:	4a15      	ldr	r2, [pc, #84]	@ (8006968 <MX_TIM4_Init+0x6c>)
 8006912:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 359;
 8006914:	f240 1267 	movw	r2, #359	@ 0x167
 8006918:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800691a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 19999;
 800691c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8006920:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006922:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006924:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006926:	f7fe fca3 	bl	8005270 <HAL_TIM_Base_Init>
 800692a:	b990      	cbnz	r0, 8006952 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800692c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006930:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006932:	a902      	add	r1, sp, #8
 8006934:	480b      	ldr	r0, [pc, #44]	@ (8006964 <MX_TIM4_Init+0x68>)
 8006936:	f7fe fd9b 	bl	8005470 <HAL_TIM_ConfigClockSource>
 800693a:	b968      	cbnz	r0, 8006958 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800693c:	2300      	movs	r3, #0
 800693e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006940:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006942:	4669      	mov	r1, sp
 8006944:	4807      	ldr	r0, [pc, #28]	@ (8006964 <MX_TIM4_Init+0x68>)
 8006946:	f7fe ff09 	bl	800575c <HAL_TIMEx_MasterConfigSynchronization>
 800694a:	b940      	cbnz	r0, 800695e <MX_TIM4_Init+0x62>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800694c:	b007      	add	sp, #28
 800694e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006952:	f7fb fc3f 	bl	80021d4 <Error_Handler>
 8006956:	e7e9      	b.n	800692c <MX_TIM4_Init+0x30>
    Error_Handler();
 8006958:	f7fb fc3c 	bl	80021d4 <Error_Handler>
 800695c:	e7ee      	b.n	800693c <MX_TIM4_Init+0x40>
    Error_Handler();
 800695e:	f7fb fc39 	bl	80021d4 <Error_Handler>
}
 8006962:	e7f3      	b.n	800694c <MX_TIM4_Init+0x50>
 8006964:	2000069c 	.word	0x2000069c
 8006968:	40000800 	.word	0x40000800

0800696c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800696c:	b500      	push	{lr}
 800696e:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006970:	2300      	movs	r3, #0
 8006972:	9306      	str	r3, [sp, #24]
 8006974:	9307      	str	r3, [sp, #28]
 8006976:	9308      	str	r3, [sp, #32]
 8006978:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_baseHandle->Instance==TIM1)
 800697a:	6803      	ldr	r3, [r0, #0]
 800697c:	4a31      	ldr	r2, [pc, #196]	@ (8006a44 <HAL_TIM_Base_MspInit+0xd8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <HAL_TIM_Base_MspInit+0x2e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006986:	d023      	beq.n	80069d0 <HAL_TIM_Base_MspInit+0x64>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8006988:	4a2f      	ldr	r2, [pc, #188]	@ (8006a48 <HAL_TIM_Base_MspInit+0xdc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d034      	beq.n	80069f8 <HAL_TIM_Base_MspInit+0x8c>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 800698e:	4a2f      	ldr	r2, [pc, #188]	@ (8006a4c <HAL_TIM_Base_MspInit+0xe0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d044      	beq.n	8006a1e <HAL_TIM_Base_MspInit+0xb2>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006994:	b00b      	add	sp, #44	@ 0x2c
 8006996:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800699a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a50 <HAL_TIM_Base_MspInit+0xe4>)
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069a2:	619a      	str	r2, [r3, #24]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80069aa:	9201      	str	r2, [sp, #4]
 80069ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	f042 0208 	orr.w	r2, r2, #8
 80069b4:	619a      	str	r2, [r3, #24]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	9302      	str	r3, [sp, #8]
 80069be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80069c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c6:	a906      	add	r1, sp, #24
 80069c8:	4822      	ldr	r0, [pc, #136]	@ (8006a54 <HAL_TIM_Base_MspInit+0xe8>)
 80069ca:	f7fc fd6b 	bl	80034a4 <HAL_GPIO_Init>
 80069ce:	e7e1      	b.n	8006994 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069d0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	61da      	str	r2, [r3, #28]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	9303      	str	r3, [sp, #12]
 80069e4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80069e6:	2200      	movs	r2, #0
 80069e8:	4611      	mov	r1, r2
 80069ea:	201c      	movs	r0, #28
 80069ec:	f7fc fc00 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80069f0:	201c      	movs	r0, #28
 80069f2:	f7fc fc0d 	bl	8003210 <HAL_NVIC_EnableIRQ>
 80069f6:	e7cd      	b.n	8006994 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069f8:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <HAL_TIM_Base_MspInit+0xe4>)
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	f042 0202 	orr.w	r2, r2, #2
 8006a00:	61da      	str	r2, [r3, #28]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4611      	mov	r1, r2
 8006a10:	201d      	movs	r0, #29
 8006a12:	f7fc fbed 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a16:	201d      	movs	r0, #29
 8006a18:	f7fc fbfa 	bl	8003210 <HAL_NVIC_EnableIRQ>
 8006a1c:	e7ba      	b.n	8006994 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <HAL_TIM_Base_MspInit+0xe4>)
 8006a20:	69da      	ldr	r2, [r3, #28]
 8006a22:	f042 0204 	orr.w	r2, r2, #4
 8006a26:	61da      	str	r2, [r3, #28]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006a32:	2200      	movs	r2, #0
 8006a34:	4611      	mov	r1, r2
 8006a36:	201e      	movs	r0, #30
 8006a38:	f7fc fbda 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006a3c:	201e      	movs	r0, #30
 8006a3e:	f7fc fbe7 	bl	8003210 <HAL_NVIC_EnableIRQ>
}
 8006a42:	e7a7      	b.n	8006994 <HAL_TIM_Base_MspInit+0x28>
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40000400 	.word	0x40000400
 8006a4c:	40000800 	.word	0x40000800
 8006a50:	40021000 	.word	0x40021000
 8006a54:	40010c00 	.word	0x40010c00

08006a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9302      	str	r3, [sp, #8]
 8006a60:	9303      	str	r3, [sp, #12]
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8006a66:	6802      	ldr	r2, [r0, #0]
 8006a68:	4b16      	ldr	r3, [pc, #88]	@ (8006ac4 <HAL_TIM_MspPostInit+0x6c>)
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d001      	beq.n	8006a72 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006a6e:	b006      	add	sp, #24
 8006a70:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a72:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	f042 0208 	orr.w	r2, r2, #8
 8006a7c:	619a      	str	r2, [r3, #24]
 8006a7e:	699a      	ldr	r2, [r3, #24]
 8006a80:	f002 0208 	and.w	r2, r2, #8
 8006a84:	9200      	str	r2, [sp, #0]
 8006a86:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	f042 0204 	orr.w	r2, r2, #4
 8006a8e:	619a      	str	r2, [r3, #24]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006a9a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8006a9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa0:	2402      	movs	r4, #2
 8006aa2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aa4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aa6:	a902      	add	r1, sp, #8
 8006aa8:	4807      	ldr	r0, [pc, #28]	@ (8006ac8 <HAL_TIM_MspPostInit+0x70>)
 8006aaa:	f7fc fcfb 	bl	80034a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006aae:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8006ab2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab8:	a902      	add	r1, sp, #8
 8006aba:	4804      	ldr	r0, [pc, #16]	@ (8006acc <HAL_TIM_MspPostInit+0x74>)
 8006abc:	f7fc fcf2 	bl	80034a4 <HAL_GPIO_Init>
}
 8006ac0:	e7d5      	b.n	8006a6e <HAL_TIM_MspPostInit+0x16>
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40010c00 	.word	0x40010c00
 8006acc:	40010800 	.word	0x40010800

08006ad0 <MX_TIM1_Init>:
{
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ad4:	2400      	movs	r4, #0
 8006ad6:	9412      	str	r4, [sp, #72]	@ 0x48
 8006ad8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ada:	9414      	str	r4, [sp, #80]	@ 0x50
 8006adc:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ade:	9410      	str	r4, [sp, #64]	@ 0x40
 8006ae0:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ae2:	9409      	str	r4, [sp, #36]	@ 0x24
 8006ae4:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ae6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ae8:	940c      	str	r4, [sp, #48]	@ 0x30
 8006aea:	940d      	str	r4, [sp, #52]	@ 0x34
 8006aec:	940e      	str	r4, [sp, #56]	@ 0x38
 8006aee:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006af0:	2220      	movs	r2, #32
 8006af2:	4621      	mov	r1, r4
 8006af4:	a801      	add	r0, sp, #4
 8006af6:	f7f9 fb7d 	bl	80001f4 <memset>
  htim1.Instance = TIM1;
 8006afa:	4838      	ldr	r0, [pc, #224]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006afc:	4b38      	ldr	r3, [pc, #224]	@ (8006be0 <MX_TIM1_Init+0x110>)
 8006afe:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 3;
 8006b00:	2303      	movs	r3, #3
 8006b02:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b04:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1168;
 8006b06:	f44f 6392 	mov.w	r3, #1168	@ 0x490
 8006b0a:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b0c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b0e:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b10:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006b12:	f7fe fbad 	bl	8005270 <HAL_TIM_Base_Init>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d147      	bne.n	8006baa <MX_TIM1_Init+0xda>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b1e:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006b20:	a912      	add	r1, sp, #72	@ 0x48
 8006b22:	482e      	ldr	r0, [pc, #184]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006b24:	f7fe fca4 	bl	8005470 <HAL_TIM_ConfigClockSource>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d141      	bne.n	8006bb0 <MX_TIM1_Init+0xe0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006b2c:	482b      	ldr	r0, [pc, #172]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006b2e:	f7fe fbcb 	bl	80052c8 <HAL_TIM_PWM_Init>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d13f      	bne.n	8006bb6 <MX_TIM1_Init+0xe6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b36:	2300      	movs	r3, #0
 8006b38:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b3a:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006b3c:	a910      	add	r1, sp, #64	@ 0x40
 8006b3e:	4827      	ldr	r0, [pc, #156]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006b40:	f7fe fe0c 	bl	800575c <HAL_TIMEx_MasterConfigSynchronization>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d139      	bne.n	8006bbc <MX_TIM1_Init+0xec>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b48:	2360      	movs	r3, #96	@ 0x60
 8006b4a:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b50:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006b52:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b54:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006b56:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006b58:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b5a:	a909      	add	r1, sp, #36	@ 0x24
 8006b5c:	481f      	ldr	r0, [pc, #124]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006b5e:	f7fe fc0d 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8006b62:	bb70      	cbnz	r0, 8006bc2 <MX_TIM1_Init+0xf2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006b64:	2204      	movs	r2, #4
 8006b66:	a909      	add	r1, sp, #36	@ 0x24
 8006b68:	481c      	ldr	r0, [pc, #112]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006b6a:	f7fe fc07 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8006b6e:	bb58      	cbnz	r0, 8006bc8 <MX_TIM1_Init+0xf8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006b70:	2208      	movs	r2, #8
 8006b72:	a909      	add	r1, sp, #36	@ 0x24
 8006b74:	4819      	ldr	r0, [pc, #100]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006b76:	f7fe fc01 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8006b7a:	bb40      	cbnz	r0, 8006bce <MX_TIM1_Init+0xfe>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006b80:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006b82:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 60;
 8006b84:	223c      	movs	r2, #60	@ 0x3c
 8006b86:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8006b88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006b8c:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006b8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006b92:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006b94:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006b96:	a901      	add	r1, sp, #4
 8006b98:	4810      	ldr	r0, [pc, #64]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006b9a:	f7fe fe15 	bl	80057c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006b9e:	b9c8      	cbnz	r0, 8006bd4 <MX_TIM1_Init+0x104>
  HAL_TIM_MspPostInit(&htim1);
 8006ba0:	480e      	ldr	r0, [pc, #56]	@ (8006bdc <MX_TIM1_Init+0x10c>)
 8006ba2:	f7ff ff59 	bl	8006a58 <HAL_TIM_MspPostInit>
}
 8006ba6:	b016      	add	sp, #88	@ 0x58
 8006ba8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006baa:	f7fb fb13 	bl	80021d4 <Error_Handler>
 8006bae:	e7b4      	b.n	8006b1a <MX_TIM1_Init+0x4a>
    Error_Handler();
 8006bb0:	f7fb fb10 	bl	80021d4 <Error_Handler>
 8006bb4:	e7ba      	b.n	8006b2c <MX_TIM1_Init+0x5c>
    Error_Handler();
 8006bb6:	f7fb fb0d 	bl	80021d4 <Error_Handler>
 8006bba:	e7bc      	b.n	8006b36 <MX_TIM1_Init+0x66>
    Error_Handler();
 8006bbc:	f7fb fb0a 	bl	80021d4 <Error_Handler>
 8006bc0:	e7c2      	b.n	8006b48 <MX_TIM1_Init+0x78>
    Error_Handler();
 8006bc2:	f7fb fb07 	bl	80021d4 <Error_Handler>
 8006bc6:	e7cd      	b.n	8006b64 <MX_TIM1_Init+0x94>
    Error_Handler();
 8006bc8:	f7fb fb04 	bl	80021d4 <Error_Handler>
 8006bcc:	e7d0      	b.n	8006b70 <MX_TIM1_Init+0xa0>
    Error_Handler();
 8006bce:	f7fb fb01 	bl	80021d4 <Error_Handler>
 8006bd2:	e7d3      	b.n	8006b7c <MX_TIM1_Init+0xac>
    Error_Handler();
 8006bd4:	f7fb fafe 	bl	80021d4 <Error_Handler>
 8006bd8:	e7e2      	b.n	8006ba0 <MX_TIM1_Init+0xd0>
 8006bda:	bf00      	nop
 8006bdc:	20000774 	.word	0x20000774
 8006be0:	40012c00 	.word	0x40012c00

08006be4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006be6:	2200      	movs	r2, #0
 8006be8:	490f      	ldr	r1, [pc, #60]	@ (8006c28 <MX_USB_DEVICE_Init+0x44>)
 8006bea:	4810      	ldr	r0, [pc, #64]	@ (8006c2c <MX_USB_DEVICE_Init+0x48>)
 8006bec:	f000 fb12 	bl	8007214 <USBD_Init>
 8006bf0:	b970      	cbnz	r0, 8006c10 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006bf2:	490f      	ldr	r1, [pc, #60]	@ (8006c30 <MX_USB_DEVICE_Init+0x4c>)
 8006bf4:	480d      	ldr	r0, [pc, #52]	@ (8006c2c <MX_USB_DEVICE_Init+0x48>)
 8006bf6:	f000 fb24 	bl	8007242 <USBD_RegisterClass>
 8006bfa:	b960      	cbnz	r0, 8006c16 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006bfc:	490d      	ldr	r1, [pc, #52]	@ (8006c34 <MX_USB_DEVICE_Init+0x50>)
 8006bfe:	480b      	ldr	r0, [pc, #44]	@ (8006c2c <MX_USB_DEVICE_Init+0x48>)
 8006c00:	f000 f965 	bl	8006ece <USBD_CDC_RegisterInterface>
 8006c04:	b950      	cbnz	r0, 8006c1c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c06:	4809      	ldr	r0, [pc, #36]	@ (8006c2c <MX_USB_DEVICE_Init+0x48>)
 8006c08:	f000 fb22 	bl	8007250 <USBD_Start>
 8006c0c:	b948      	cbnz	r0, 8006c22 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c0e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006c10:	f7fb fae0 	bl	80021d4 <Error_Handler>
 8006c14:	e7ed      	b.n	8006bf2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8006c16:	f7fb fadd 	bl	80021d4 <Error_Handler>
 8006c1a:	e7ef      	b.n	8006bfc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006c1c:	f7fb fada 	bl	80021d4 <Error_Handler>
 8006c20:	e7f1      	b.n	8006c06 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006c22:	f7fb fad7 	bl	80021d4 <Error_Handler>
}
 8006c26:	e7f2      	b.n	8006c0e <MX_USB_DEVICE_Init+0x2a>
 8006c28:	200001c0 	.word	0x200001c0
 8006c2c:	200007bc 	.word	0x200007bc
 8006c30:	20000138 	.word	0x20000138
 8006c34:	2000017c 	.word	0x2000017c

08006c38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c38:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c3a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c3e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8006c42:	b15b      	cbz	r3, 8006c5c <USBD_CDC_EP0_RxReady+0x24>
 8006c44:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8006c48:	28ff      	cmp	r0, #255	@ 0xff
 8006c4a:	d007      	beq.n	8006c5c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8006c52:	4621      	mov	r1, r4
 8006c54:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006c56:	23ff      	movs	r3, #255	@ 0xff
 8006c58:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	bd10      	pop	{r4, pc}

08006c60 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c60:	2343      	movs	r3, #67	@ 0x43
 8006c62:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8006c64:	4800      	ldr	r0, [pc, #0]	@ (8006c68 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006c66:	4770      	bx	lr
 8006c68:	200000b0 	.word	0x200000b0

08006c6c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c6c:	2343      	movs	r3, #67	@ 0x43
 8006c6e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006c70:	4800      	ldr	r0, [pc, #0]	@ (8006c74 <USBD_CDC_GetHSCfgDesc+0x8>)
 8006c72:	4770      	bx	lr
 8006c74:	200000f4 	.word	0x200000f4

08006c78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c78:	2343      	movs	r3, #67	@ 0x43
 8006c7a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006c7c:	4800      	ldr	r0, [pc, #0]	@ (8006c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006c7e:	4770      	bx	lr
 8006c80:	2000006c 	.word	0x2000006c

08006c84 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c84:	230a      	movs	r3, #10
 8006c86:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006c88:	4800      	ldr	r0, [pc, #0]	@ (8006c8c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006c8a:	4770      	bx	lr
 8006c8c:	20000170 	.word	0x20000170

08006c90 <USBD_CDC_DataOut>:
{
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c94:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c98:	f000 faaf 	bl	80071fa <USBD_LL_GetRxDataSize>
 8006c9c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8006ca0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006ca4:	b14b      	cbz	r3, 8006cba <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ca6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8006cb0:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8006cb4:	4798      	blx	r3
    return USBD_OK;
 8006cb6:	2000      	movs	r0, #0
}
 8006cb8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8006cba:	2002      	movs	r0, #2
 8006cbc:	e7fc      	b.n	8006cb8 <USBD_CDC_DataOut+0x28>

08006cbe <USBD_CDC_DataIn>:
{
 8006cbe:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cc0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006cc4:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0
  if (pdev->pClassData != NULL)
 8006cc8:	b1f2      	cbz	r2, 8006d08 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006cca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006cce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	b14b      	cbz	r3, 8006cea <USBD_CDC_DataIn+0x2c>
 8006cd6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8006cda:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8006cde:	6a24      	ldr	r4, [r4, #32]
 8006ce0:	fbb3 fcf4 	udiv	ip, r3, r4
 8006ce4:	fb04 331c 	mls	r3, r4, ip, r3
 8006ce8:	b123      	cbz	r3, 8006cf4 <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    return USBD_OK;
 8006cf0:	2000      	movs	r0, #0
}
 8006cf2:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8006cf4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006cf8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d00:	4613      	mov	r3, r2
 8006d02:	f000 fa6a 	bl	80071da <USBD_LL_Transmit>
 8006d06:	e7f3      	b.n	8006cf0 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8006d08:	2002      	movs	r0, #2
 8006d0a:	e7f2      	b.n	8006cf2 <USBD_CDC_DataIn+0x34>

08006d0c <USBD_CDC_Setup>:
{
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	4606      	mov	r6, r0
 8006d12:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d14:	f8d0 72b8 	ldr.w	r7, [r0, #696]	@ 0x2b8
  uint8_t ifalt = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8006d1e:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d22:	780b      	ldrb	r3, [r1, #0]
 8006d24:	f013 0560 	ands.w	r5, r3, #96	@ 0x60
 8006d28:	d027      	beq.n	8006d7a <USBD_CDC_Setup+0x6e>
 8006d2a:	2d20      	cmp	r5, #32
 8006d2c:	d153      	bne.n	8006dd6 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8006d2e:	88ca      	ldrh	r2, [r1, #6]
 8006d30:	b1da      	cbz	r2, 8006d6a <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8006d32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d36:	d00c      	beq.n	8006d52 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d38:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	4639      	mov	r1, r7
 8006d40:	7860      	ldrb	r0, [r4, #1]
 8006d42:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d44:	88e2      	ldrh	r2, [r4, #6]
 8006d46:	4639      	mov	r1, r7
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 ff8f 	bl	8007c6c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006d4e:	2500      	movs	r5, #0
 8006d50:	e044      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8006d52:	784b      	ldrb	r3, [r1, #1]
 8006d54:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d58:	798b      	ldrb	r3, [r1, #6]
 8006d5a:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d5e:	88ca      	ldrh	r2, [r1, #6]
 8006d60:	4639      	mov	r1, r7
 8006d62:	f000 ff98 	bl	8007c96 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8006d66:	2500      	movs	r5, #0
 8006d68:	e038      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d6a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2200      	movs	r2, #0
 8006d72:	7848      	ldrb	r0, [r1, #1]
 8006d74:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8006d76:	2500      	movs	r5, #0
 8006d78:	e030      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8006d7a:	784f      	ldrb	r7, [r1, #1]
 8006d7c:	2f0a      	cmp	r7, #10
 8006d7e:	d010      	beq.n	8006da2 <USBD_CDC_Setup+0x96>
 8006d80:	2f0b      	cmp	r7, #11
 8006d82:	d01c      	beq.n	8006dbe <USBD_CDC_Setup+0xb2>
 8006d84:	bb1f      	cbnz	r7, 8006dce <USBD_CDC_Setup+0xc2>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d86:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d003      	beq.n	8006d96 <USBD_CDC_Setup+0x8a>
            USBD_CtlError(pdev, req);
 8006d8e:	f000 fbc7 	bl	8007520 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d92:	2502      	movs	r5, #2
 8006d94:	e022      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d96:	2202      	movs	r2, #2
 8006d98:	a901      	add	r1, sp, #4
 8006d9a:	f000 ff67 	bl	8007c6c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006d9e:	463d      	mov	r5, r7
 8006da0:	e01c      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d003      	beq.n	8006db2 <USBD_CDC_Setup+0xa6>
            USBD_CtlError(pdev, req);
 8006daa:	f000 fbb9 	bl	8007520 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dae:	2502      	movs	r5, #2
 8006db0:	e014      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006db2:	2201      	movs	r2, #1
 8006db4:	f10d 0107 	add.w	r1, sp, #7
 8006db8:	f000 ff58 	bl	8007c6c <USBD_CtlSendData>
 8006dbc:	e00e      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dbe:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d00a      	beq.n	8006ddc <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8006dc6:	f000 fbab 	bl	8007520 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dca:	2502      	movs	r5, #2
 8006dcc:	e006      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
          USBD_CtlError(pdev, req);
 8006dce:	f000 fba7 	bl	8007520 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dd2:	2502      	movs	r5, #2
          break;
 8006dd4:	e002      	b.n	8006ddc <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8006dd6:	f000 fba3 	bl	8007520 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dda:	2502      	movs	r5, #2
}
 8006ddc:	4628      	mov	r0, r5
 8006dde:	b003      	add	sp, #12
 8006de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006de2 <USBD_CDC_DeInit>:
{
 8006de2:	b538      	push	{r3, r4, r5, lr}
 8006de4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006de6:	2181      	movs	r1, #129	@ 0x81
 8006de8:	f000 f9c1 	bl	800716e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006dec:	2500      	movs	r5, #0
 8006dee:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006df0:	2101      	movs	r1, #1
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 f9bb 	bl	800716e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006df8:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dfc:	2182      	movs	r1, #130	@ 0x82
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f9b5 	bl	800716e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e04:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8006e06:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006e0a:	b14b      	cbz	r3, 8006e20 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e0c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e14:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8006e18:	f000 f9fa 	bl	8007210 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e1c:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8006e20:	2000      	movs	r0, #0
 8006e22:	bd38      	pop	{r3, r4, r5, pc}

08006e24 <USBD_CDC_Init>:
{
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e28:	7c03      	ldrb	r3, [r0, #16]
 8006e2a:	bbab      	cbnz	r3, 8006e98 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e30:	2202      	movs	r2, #2
 8006e32:	2181      	movs	r1, #129	@ 0x81
 8006e34:	f000 f990 	bl	8007158 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e38:	2501      	movs	r5, #1
 8006e3a:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e40:	2202      	movs	r2, #2
 8006e42:	4629      	mov	r1, r5
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 f987 	bl	8007158 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e4a:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e4e:	2308      	movs	r3, #8
 8006e50:	2203      	movs	r2, #3
 8006e52:	2182      	movs	r1, #130	@ 0x82
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 f97f 	bl	8007158 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	6423      	str	r3, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e5e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e62:	f000 f9d1 	bl	8007208 <USBD_static_malloc>
 8006e66:	4605      	mov	r5, r0
 8006e68:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8006e6c:	b368      	cbz	r0, 8006eca <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e6e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4798      	blx	r3
    hcdc->TxState = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e7c:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e80:	7c26      	ldrb	r6, [r4, #16]
 8006e82:	b9ce      	cbnz	r6, 8006eb8 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e88:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 f9ab 	bl	80071ea <USBD_LL_PrepareReceive>
}
 8006e94:	4630      	mov	r0, r6
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e98:	2340      	movs	r3, #64	@ 0x40
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	2181      	movs	r1, #129	@ 0x81
 8006e9e:	f000 f95b 	bl	8007158 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ea2:	2501      	movs	r5, #1
 8006ea4:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ea6:	2340      	movs	r3, #64	@ 0x40
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 f953 	bl	8007158 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006eb2:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
 8006eb6:	e7ca      	b.n	8006e4e <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eb8:	2340      	movs	r3, #64	@ 0x40
 8006eba:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 f992 	bl	80071ea <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	e7e4      	b.n	8006e94 <USBD_CDC_Init+0x70>
    ret = 1U;
 8006eca:	2601      	movs	r6, #1
 8006ecc:	e7e2      	b.n	8006e94 <USBD_CDC_Init+0x70>

08006ece <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8006ece:	b119      	cbz	r1, 8006ed8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8006ed0:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006ed8:	2002      	movs	r0, #2
  }

  return ret;
}
 8006eda:	4770      	bx	lr

08006edc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006edc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
 8006ee0:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006ee4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
}
 8006ee8:	2000      	movs	r0, #0
 8006eea:	4770      	bx	lr

08006eec <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->RxBuffer = pbuff;
 8006ef0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return USBD_OK;
}
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	4770      	bx	lr

08006ef8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ef8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  if (pdev->pClassData != NULL)
 8006efc:	b19a      	cbz	r2, 8006f26 <USBD_CDC_TransmitPacket+0x2e>
{
 8006efe:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8006f00:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8006f04:	b10b      	cbz	r3, 8006f0a <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8006f06:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006f08:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006f10:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8006f14:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8006f1c:	2181      	movs	r1, #129	@ 0x81
 8006f1e:	f000 f95c 	bl	80071da <USBD_LL_Transmit>
      return USBD_OK;
 8006f22:	2000      	movs	r0, #0
 8006f24:	e7f0      	b.n	8006f08 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8006f26:	2002      	movs	r0, #2
}
 8006f28:	4770      	bx	lr

08006f2a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f2a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006f2e:	b192      	cbz	r2, 8006f56 <USBD_CDC_ReceivePacket+0x2c>
{
 8006f30:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f32:	7c03      	ldrb	r3, [r0, #16]
 8006f34:	b943      	cbnz	r3, 8006f48 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f3a:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8006f3e:	2101      	movs	r1, #1
 8006f40:	f000 f953 	bl	80071ea <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f44:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006f46:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8006f48:	2340      	movs	r3, #64	@ 0x40
 8006f4a:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8006f4e:	2101      	movs	r1, #1
 8006f50:	f000 f94b 	bl	80071ea <USBD_LL_PrepareReceive>
 8006f54:	e7f6      	b.n	8006f44 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8006f56:	2002      	movs	r0, #2
}
 8006f58:	4770      	bx	lr

08006f5a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	4770      	bx	lr

08006f5e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006f5e:	2000      	movs	r0, #0
 8006f60:	4770      	bx	lr
	...

08006f64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f64:	b510      	push	{r4, lr}
 8006f66:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f68:	4c04      	ldr	r4, [pc, #16]	@ (8006f7c <CDC_Receive_FS+0x18>)
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff ffbe 	bl	8006eec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7ff ffda 	bl	8006f2a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006f76:	2000      	movs	r0, #0
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200007bc 	.word	0x200007bc

08006f80 <CDC_Init_FS>:
{
 8006f80:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f82:	4c06      	ldr	r4, [pc, #24]	@ (8006f9c <CDC_Init_FS+0x1c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	4906      	ldr	r1, [pc, #24]	@ (8006fa0 <CDC_Init_FS+0x20>)
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff ffa7 	bl	8006edc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f8e:	4905      	ldr	r1, [pc, #20]	@ (8006fa4 <CDC_Init_FS+0x24>)
 8006f90:	4620      	mov	r0, r4
 8006f92:	f7ff ffab 	bl	8006eec <USBD_CDC_SetRxBuffer>
}
 8006f96:	2000      	movs	r0, #0
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200007bc 	.word	0x200007bc
 8006fa0:	20000a80 	.word	0x20000a80
 8006fa4:	20000e80 	.word	0x20000e80

08006fa8 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fa8:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <CDC_Transmit_FS+0x28>)
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8006fae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006fb2:	b10b      	cbz	r3, 8006fb8 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8006fb4:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8006fb6:	4770      	bx	lr
{
 8006fb8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fba:	4c05      	ldr	r4, [pc, #20]	@ (8006fd0 <CDC_Transmit_FS+0x28>)
 8006fbc:	460a      	mov	r2, r1
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f7ff ff8b 	bl	8006edc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f7ff ff96 	bl	8006ef8 <USBD_CDC_TransmitPacket>
}
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	bf00      	nop
 8006fd0:	200007bc 	.word	0x200007bc

08006fd4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006fd4:	2802      	cmp	r0, #2
 8006fd6:	d805      	bhi.n	8006fe4 <USBD_Get_USB_Status+0x10>
 8006fd8:	e8df f000 	tbb	[pc, r0]
 8006fdc:	0405      	.short	0x0405
 8006fde:	02          	.byte	0x02
 8006fdf:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fe0:	2001      	movs	r0, #1
    break;
 8006fe2:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8006fe4:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8006fe8:	6802      	ldr	r2, [r0, #0]
 8006fea:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <HAL_PCD_MspInit+0x3c>)
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d000      	beq.n	8006ff2 <HAL_PCD_MspInit+0xa>
 8006ff0:	4770      	bx	lr
{
 8006ff2:	b500      	push	{lr}
 8006ff4:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8006ff6:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007000:	61da      	str	r2, [r3, #28]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800700c:	2200      	movs	r2, #0
 800700e:	4611      	mov	r1, r2
 8007010:	2014      	movs	r0, #20
 8007012:	f7fc f8ed 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007016:	2014      	movs	r0, #20
 8007018:	f7fc f8fa 	bl	8003210 <HAL_NVIC_EnableIRQ>
}
 800701c:	b003      	add	sp, #12
 800701e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007022:	bf00      	nop
 8007024:	40005c00 	.word	0x40005c00

08007028 <HAL_PCD_SetupStageCallback>:
{
 8007028:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800702a:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 800702e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007032:	f000 f925 	bl	8007280 <USBD_LL_SetupStage>
}
 8007036:	bd08      	pop	{r3, pc}

08007038 <HAL_PCD_DataOutStageCallback>:
{
 8007038:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800703a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800703e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007042:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8007046:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800704a:	f000 f946 	bl	80072da <USBD_LL_DataOutStage>
}
 800704e:	bd08      	pop	{r3, pc}

08007050 <HAL_PCD_DataInStageCallback>:
{
 8007050:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007052:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007056:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800705a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800705c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007060:	f000 f981 	bl	8007366 <USBD_LL_DataInStage>
}
 8007064:	bd08      	pop	{r3, pc}

08007066 <HAL_PCD_SOFCallback>:
{
 8007066:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007068:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800706c:	f000 fa22 	bl	80074b4 <USBD_LL_SOF>
}
 8007070:	bd08      	pop	{r3, pc}

08007072 <HAL_PCD_ResetCallback>:
{
 8007072:	b510      	push	{r4, lr}
 8007074:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007076:	7983      	ldrb	r3, [r0, #6]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d109      	bne.n	8007090 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800707c:	2101      	movs	r1, #1
 800707e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8007082:	f000 fa00 	bl	8007486 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007086:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800708a:	f000 f9d4 	bl	8007436 <USBD_LL_Reset>
}
 800708e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007090:	f7fb f8a0 	bl	80021d4 <Error_Handler>
 8007094:	e7f2      	b.n	800707c <HAL_PCD_ResetCallback+0xa>
	...

08007098 <HAL_PCD_SuspendCallback>:
{
 8007098:	b510      	push	{r4, lr}
 800709a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800709c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80070a0:	f000 f9f4 	bl	800748c <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80070a4:	7aa3      	ldrb	r3, [r4, #10]
 80070a6:	b123      	cbz	r3, 80070b2 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070a8:	4a02      	ldr	r2, [pc, #8]	@ (80070b4 <HAL_PCD_SuspendCallback+0x1c>)
 80070aa:	6913      	ldr	r3, [r2, #16]
 80070ac:	f043 0306 	orr.w	r3, r3, #6
 80070b0:	6113      	str	r3, [r2, #16]
}
 80070b2:	bd10      	pop	{r4, pc}
 80070b4:	e000ed00 	.word	0xe000ed00

080070b8 <HAL_PCD_ResumeCallback>:
{
 80070b8:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070ba:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80070be:	f000 f9ee 	bl	800749e <USBD_LL_Resume>
}
 80070c2:	bd08      	pop	{r3, pc}

080070c4 <USBD_LL_Init>:
{
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80070c8:	481d      	ldr	r0, [pc, #116]	@ (8007140 <USBD_LL_Init+0x7c>)
 80070ca:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80070ce:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Instance = USB;
 80070d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007144 <USBD_LL_Init+0x80>)
 80070d4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80070d6:	2308      	movs	r3, #8
 80070d8:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80070da:	2302      	movs	r3, #2
 80070dc:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80070de:	2300      	movs	r3, #0
 80070e0:	7283      	strb	r3, [r0, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80070e2:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80070e4:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80070e6:	f7fc fbb7 	bl	8003858 <HAL_PCD_Init>
 80070ea:	bb30      	cbnz	r0, 800713a <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80070ec:	2318      	movs	r3, #24
 80070ee:	2200      	movs	r2, #0
 80070f0:	4611      	mov	r1, r2
 80070f2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80070f6:	f7fd fb26 	bl	8004746 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80070fa:	2358      	movs	r3, #88	@ 0x58
 80070fc:	2200      	movs	r2, #0
 80070fe:	2180      	movs	r1, #128	@ 0x80
 8007100:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8007104:	f7fd fb1f 	bl	8004746 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007108:	23c0      	movs	r3, #192	@ 0xc0
 800710a:	2200      	movs	r2, #0
 800710c:	2181      	movs	r1, #129	@ 0x81
 800710e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8007112:	f7fd fb18 	bl	8004746 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007116:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800711a:	2200      	movs	r2, #0
 800711c:	2101      	movs	r1, #1
 800711e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8007122:	f7fd fb10 	bl	8004746 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800712a:	2200      	movs	r2, #0
 800712c:	2182      	movs	r1, #130	@ 0x82
 800712e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8007132:	f7fd fb08 	bl	8004746 <HAL_PCDEx_PMAConfig>
}
 8007136:	2000      	movs	r0, #0
 8007138:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800713a:	f7fb f84b 	bl	80021d4 <Error_Handler>
 800713e:	e7d5      	b.n	80070ec <USBD_LL_Init+0x28>
 8007140:	200014a0 	.word	0x200014a0
 8007144:	40005c00 	.word	0x40005c00

08007148 <USBD_LL_Start>:
{
 8007148:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800714a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800714e:	f7fc fbf7 	bl	8003940 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007152:	f7ff ff3f 	bl	8006fd4 <USBD_Get_USB_Status>
}
 8007156:	bd08      	pop	{r3, pc}

08007158 <USBD_LL_OpenEP>:
{
 8007158:	b508      	push	{r3, lr}
 800715a:	4694      	mov	ip, r2
 800715c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800715e:	4663      	mov	r3, ip
 8007160:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007164:	f7fd f9ac 	bl	80044c0 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007168:	f7ff ff34 	bl	8006fd4 <USBD_Get_USB_Status>
}
 800716c:	bd08      	pop	{r3, pc}

0800716e <USBD_LL_CloseEP>:
{
 800716e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007170:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007174:	f7fd f9e6 	bl	8004544 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007178:	f7ff ff2c 	bl	8006fd4 <USBD_Get_USB_Status>
}
 800717c:	bd08      	pop	{r3, pc}

0800717e <USBD_LL_StallEP>:
{
 800717e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007180:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007184:	f7fd fa60 	bl	8004648 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007188:	f7ff ff24 	bl	8006fd4 <USBD_Get_USB_Status>
}
 800718c:	bd08      	pop	{r3, pc}

0800718e <USBD_LL_ClearStallEP>:
{
 800718e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007190:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007194:	f7fd fa98 	bl	80046c8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007198:	f7ff ff1c 	bl	8006fd4 <USBD_Get_USB_Status>
}
 800719c:	bd08      	pop	{r3, pc}

0800719e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800719e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80071a2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80071a6:	d108      	bne.n	80071ba <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80071a8:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80071ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80071b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80071b4:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
}
 80071b8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071ba:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80071be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80071c2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80071c6:	7c98      	ldrb	r0, [r3, #18]
 80071c8:	4770      	bx	lr

080071ca <USBD_LL_SetUSBAddress>:
{
 80071ca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80071d0:	f7fd f88b 	bl	80042ea <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d4:	f7ff fefe 	bl	8006fd4 <USBD_Get_USB_Status>
}
 80071d8:	bd08      	pop	{r3, pc}

080071da <USBD_LL_Transmit>:
{
 80071da:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071dc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80071e0:	f7fd fa0c 	bl	80045fc <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071e4:	f7ff fef6 	bl	8006fd4 <USBD_Get_USB_Status>
}
 80071e8:	bd08      	pop	{r3, pc}

080071ea <USBD_LL_PrepareReceive>:
{
 80071ea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071ec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80071f0:	f7fd f9de 	bl	80045b0 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071f4:	f7ff feee 	bl	8006fd4 <USBD_Get_USB_Status>
}
 80071f8:	bd08      	pop	{r3, pc}

080071fa <USBD_LL_GetRxDataSize>:
{
 80071fa:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071fc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007200:	f7fd f9f3 	bl	80045ea <HAL_PCD_EP_GetRxCount>
}
 8007204:	bd08      	pop	{r3, pc}
	...

08007208 <USBD_static_malloc>:
}
 8007208:	4800      	ldr	r0, [pc, #0]	@ (800720c <USBD_static_malloc+0x4>)
 800720a:	4770      	bx	lr
 800720c:	20001280 	.word	0x20001280

08007210 <USBD_static_free>:
}
 8007210:	4770      	bx	lr

08007212 <HAL_PCDEx_SetConnectionState>:
}
 8007212:	4770      	bx	lr

08007214 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007214:	b198      	cbz	r0, 800723e <USBD_Init+0x2a>
{
 8007216:	b508      	push	{r3, lr}
 8007218:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800721a:	f8d0 02b4 	ldr.w	r0, [r0, #692]	@ 0x2b4
 800721e:	b110      	cbz	r0, 8007226 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8007220:	2000      	movs	r0, #0
 8007222:	f8c3 02b4 	str.w	r0, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007226:	b109      	cbz	r1, 800722c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8007228:	f8c3 12b0 	str.w	r1, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800722c:	2101      	movs	r1, #1
 800722e:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007232:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ff45 	bl	80070c4 <USBD_LL_Init>

  return USBD_OK;
 800723a:	2000      	movs	r0, #0
}
 800723c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800723e:	2002      	movs	r0, #2
}
 8007240:	4770      	bx	lr

08007242 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8007242:	b119      	cbz	r1, 800724c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007244:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8007248:	2000      	movs	r0, #0
 800724a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800724c:	2002      	movs	r0, #2
  }

  return status;
}
 800724e:	4770      	bx	lr

08007250 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007250:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007252:	f7ff ff79 	bl	8007148 <USBD_LL_Start>

  return USBD_OK;
}
 8007256:	2000      	movs	r0, #0
 8007258:	bd08      	pop	{r3, pc}

0800725a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800725a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800725c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007260:	b12b      	cbz	r3, 800726e <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4798      	blx	r3
 8007266:	b900      	cbnz	r0, 800726a <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007268:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800726a:	2002      	movs	r0, #2
 800726c:	e7fc      	b.n	8007268 <USBD_SetClassConfig+0xe>
 800726e:	2002      	movs	r0, #2
 8007270:	e7fa      	b.n	8007268 <USBD_SetClassConfig+0xe>

08007272 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007272:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007274:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4798      	blx	r3

  return USBD_OK;
}
 800727c:	2000      	movs	r0, #0
 800727e:	bd08      	pop	{r3, pc}

08007280 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007284:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 8007288:	4628      	mov	r0, r5
 800728a:	f000 f935 	bl	80074f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800728e:	2301      	movs	r3, #1
 8007290:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007294:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8007298:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800729c:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 80072a0:	f001 031f 	and.w	r3, r1, #31
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d008      	beq.n	80072ba <USBD_LL_SetupStage+0x3a>
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d00b      	beq.n	80072c4 <USBD_LL_SetupStage+0x44>
 80072ac:	b97b      	cbnz	r3, 80072ce <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80072ae:	4629      	mov	r1, r5
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 facf 	bl	8007854 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80072b6:	2000      	movs	r0, #0
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80072ba:	4629      	mov	r1, r5
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fafd 	bl	80078bc <USBD_StdItfReq>
      break;
 80072c2:	e7f8      	b.n	80072b6 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80072c4:	4629      	mov	r1, r5
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fb28 	bl	800791c <USBD_StdEPReq>
      break;
 80072cc:	e7f3      	b.n	80072b6 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072ce:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7ff ff53 	bl	800717e <USBD_LL_StallEP>
      break;
 80072d8:	e7ed      	b.n	80072b6 <USBD_LL_SetupStage+0x36>

080072da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072da:	b538      	push	{r3, r4, r5, lr}
 80072dc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072de:	460d      	mov	r5, r1
 80072e0:	bb91      	cbnz	r1, 8007348 <USBD_LL_DataOutStage+0x6e>
 80072e2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072e4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80072e8:	2a03      	cmp	r2, #3
 80072ea:	d003      	beq.n	80072f4 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072ec:	2a05      	cmp	r2, #5
 80072ee:	d024      	beq.n	800733a <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80072f0:	4608      	mov	r0, r1
 80072f2:	e033      	b.n	800735c <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 80072f4:	f8d0 1160 	ldr.w	r1, [r0, #352]	@ 0x160
 80072f8:	f8d0 2164 	ldr.w	r2, [r0, #356]	@ 0x164
 80072fc:	4291      	cmp	r1, r2
 80072fe:	d90d      	bls.n	800731c <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8007300:	1a89      	subs	r1, r1, r2
 8007302:	f8c0 1160 	str.w	r1, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8007306:	428a      	cmp	r2, r1
 8007308:	d906      	bls.n	8007318 <USBD_LL_DataOutStage+0x3e>
 800730a:	b28a      	uxth	r2, r1
 800730c:	4619      	mov	r1, r3
 800730e:	4620      	mov	r0, r4
 8007310:	f000 fcd0 	bl	8007cb4 <USBD_CtlContinueRx>
  return USBD_OK;
 8007314:	4628      	mov	r0, r5
 8007316:	e021      	b.n	800735c <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 8007318:	b292      	uxth	r2, r2
 800731a:	e7f7      	b.n	800730c <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800731c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	b11b      	cbz	r3, 800732c <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007324:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007328:	2a03      	cmp	r2, #3
 800732a:	d004      	beq.n	8007336 <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fcc9 	bl	8007cc4 <USBD_CtlSendStatus>
  return USBD_OK;
 8007332:	4628      	mov	r0, r5
 8007334:	e012      	b.n	800735c <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 8007336:	4798      	blx	r3
 8007338:	e7f8      	b.n	800732c <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 800733a:	2100      	movs	r1, #0
 800733c:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007340:	f7ff ff1d 	bl	800717e <USBD_LL_StallEP>
  return USBD_OK;
 8007344:	4628      	mov	r0, r5
 8007346:	e009      	b.n	800735c <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 8007348:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	b133      	cbz	r3, 800735e <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007350:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007354:	2a03      	cmp	r2, #3
 8007356:	d104      	bne.n	8007362 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8007358:	4798      	blx	r3
  return USBD_OK;
 800735a:	2000      	movs	r0, #0
}
 800735c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800735e:	2002      	movs	r0, #2
 8007360:	e7fc      	b.n	800735c <USBD_LL_DataOutStage+0x82>
 8007362:	2002      	movs	r0, #2
 8007364:	e7fa      	b.n	800735c <USBD_LL_DataOutStage+0x82>

08007366 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007366:	b538      	push	{r3, r4, r5, lr}
 8007368:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800736a:	460d      	mov	r5, r1
 800736c:	2900      	cmp	r1, #0
 800736e:	d153      	bne.n	8007418 <USBD_LL_DataInStage+0xb2>
 8007370:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007372:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8007376:	2a02      	cmp	r2, #2
 8007378:	d00c      	beq.n	8007394 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800737a:	2a04      	cmp	r2, #4
 800737c:	d000      	beq.n	8007380 <USBD_LL_DataInStage+0x1a>
 800737e:	b91a      	cbnz	r2, 8007388 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007380:	2180      	movs	r1, #128	@ 0x80
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff fefb 	bl	800717e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007388:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800738c:	2b01      	cmp	r3, #1
 800738e:	d03e      	beq.n	800740e <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007390:	4628      	mov	r0, r5
}
 8007392:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007394:	6a02      	ldr	r2, [r0, #32]
 8007396:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8007398:	428a      	cmp	r2, r1
 800739a:	d81b      	bhi.n	80073d4 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800739c:	69c2      	ldr	r2, [r0, #28]
 800739e:	fbb2 f3f1 	udiv	r3, r2, r1
 80073a2:	fb01 2313 	mls	r3, r1, r3, r2
 80073a6:	b92b      	cbnz	r3, 80073b4 <USBD_LL_DataInStage+0x4e>
 80073a8:	4291      	cmp	r1, r2
 80073aa:	d803      	bhi.n	80073b4 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 80073ac:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d31c      	bcc.n	80073ee <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073b4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	b11b      	cbz	r3, 80073c4 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073bc:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073c0:	2a03      	cmp	r2, #3
 80073c2:	d021      	beq.n	8007408 <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 80073c4:	2180      	movs	r1, #128	@ 0x80
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7ff fed9 	bl	800717e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fc84 	bl	8007cda <USBD_CtlReceiveStatus>
 80073d2:	e7d9      	b.n	8007388 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 80073d4:	1a52      	subs	r2, r2, r1
 80073d6:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073d8:	b292      	uxth	r2, r2
 80073da:	4619      	mov	r1, r3
 80073dc:	f000 fc53 	bl	8007c86 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073e0:	2300      	movs	r3, #0
 80073e2:	461a      	mov	r2, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7ff feff 	bl	80071ea <USBD_LL_PrepareReceive>
 80073ec:	e7cc      	b.n	8007388 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073ee:	2200      	movs	r2, #0
 80073f0:	4611      	mov	r1, r2
 80073f2:	f000 fc48 	bl	8007c86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073f6:	2100      	movs	r1, #0
 80073f8:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073fc:	460b      	mov	r3, r1
 80073fe:	460a      	mov	r2, r1
 8007400:	4620      	mov	r0, r4
 8007402:	f7ff fef2 	bl	80071ea <USBD_LL_PrepareReceive>
 8007406:	e7bf      	b.n	8007388 <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 8007408:	4620      	mov	r0, r4
 800740a:	4798      	blx	r3
 800740c:	e7da      	b.n	80073c4 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8007414:	4628      	mov	r0, r5
 8007416:	e7bc      	b.n	8007392 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8007418:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	b133      	cbz	r3, 800742e <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007420:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007424:	2a03      	cmp	r2, #3
 8007426:	d104      	bne.n	8007432 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8007428:	4798      	blx	r3
  return USBD_OK;
 800742a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800742c:	e7b1      	b.n	8007392 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 800742e:	2002      	movs	r0, #2
 8007430:	e7af      	b.n	8007392 <USBD_LL_DataInStage+0x2c>
 8007432:	2002      	movs	r0, #2
 8007434:	e7ad      	b.n	8007392 <USBD_LL_DataInStage+0x2c>

08007436 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007436:	b570      	push	{r4, r5, r6, lr}
 8007438:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800743a:	2340      	movs	r3, #64	@ 0x40
 800743c:	2200      	movs	r2, #0
 800743e:	4611      	mov	r1, r2
 8007440:	f7ff fe8a 	bl	8007158 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007444:	2501      	movs	r5, #1
 8007446:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800744a:	2640      	movs	r6, #64	@ 0x40
 800744c:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007450:	4633      	mov	r3, r6
 8007452:	2200      	movs	r2, #0
 8007454:	2180      	movs	r1, #128	@ 0x80
 8007456:	4620      	mov	r0, r4
 8007458:	f7ff fe7e 	bl	8007158 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800745c:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800745e:	6266      	str	r6, [r4, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007460:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007464:	2300      	movs	r3, #0
 8007466:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800746a:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800746c:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007470:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8007474:	b12b      	cbz	r3, 8007482 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007476:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2100      	movs	r1, #0
 800747e:	4620      	mov	r0, r4
 8007480:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007482:	2000      	movs	r0, #0
 8007484:	bd70      	pop	{r4, r5, r6, pc}

08007486 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007486:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007488:	2000      	movs	r0, #0
 800748a:	4770      	bx	lr

0800748c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800748c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007490:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007494:	2304      	movs	r3, #4
 8007496:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800749a:	2000      	movs	r0, #0
 800749c:	4770      	bx	lr

0800749e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800749e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d001      	beq.n	80074aa <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80074a6:	2000      	movs	r0, #0
 80074a8:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80074aa:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80074ae:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 80074b2:	e7f8      	b.n	80074a6 <USBD_LL_Resume+0x8>

080074b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074b4:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d001      	beq.n	80074c2 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80074be:	2000      	movs	r0, #0
 80074c0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80074c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0f8      	beq.n	80074be <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80074cc:	4798      	blx	r3
 80074ce:	e7f6      	b.n	80074be <USBD_LL_SOF+0xa>

080074d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074d0:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80074d2:	2000      	movs	r0, #0

  while (*buf != '\0')
 80074d4:	e002      	b.n	80074dc <USBD_GetLen+0xc>
  {
    len++;
 80074d6:	3001      	adds	r0, #1
 80074d8:	b2c0      	uxtb	r0, r0
    buf++;
 80074da:	3301      	adds	r3, #1
  while (*buf != '\0')
 80074dc:	781a      	ldrb	r2, [r3, #0]
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d1f9      	bne.n	80074d6 <USBD_GetLen+0x6>
  }

  return len;
}
 80074e2:	4770      	bx	lr

080074e4 <USBD_SetFeature>:
{
 80074e4:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074e6:	884b      	ldrh	r3, [r1, #2]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d000      	beq.n	80074ee <USBD_SetFeature+0xa>
}
 80074ec:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80074ee:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80074f2:	f000 fbe7 	bl	8007cc4 <USBD_CtlSendStatus>
}
 80074f6:	e7f9      	b.n	80074ec <USBD_SetFeature+0x8>

080074f8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80074f8:	780b      	ldrb	r3, [r1, #0]
 80074fa:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80074fc:	784b      	ldrb	r3, [r1, #1]
 80074fe:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007500:	788b      	ldrb	r3, [r1, #2]
 8007502:	78ca      	ldrb	r2, [r1, #3]
 8007504:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007508:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800750a:	790b      	ldrb	r3, [r1, #4]
 800750c:	794a      	ldrb	r2, [r1, #5]
 800750e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007512:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007514:	798b      	ldrb	r3, [r1, #6]
 8007516:	79ca      	ldrb	r2, [r1, #7]
 8007518:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800751c:	80c3      	strh	r3, [r0, #6]
}
 800751e:	4770      	bx	lr

08007520 <USBD_CtlError>:
{
 8007520:	b510      	push	{r4, lr}
 8007522:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8007524:	2180      	movs	r1, #128	@ 0x80
 8007526:	f7ff fe2a 	bl	800717e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800752a:	2100      	movs	r1, #0
 800752c:	4620      	mov	r0, r4
 800752e:	f7ff fe26 	bl	800717e <USBD_LL_StallEP>
}
 8007532:	bd10      	pop	{r4, pc}

08007534 <USBD_GetDescriptor>:
{
 8007534:	b530      	push	{r4, r5, lr}
 8007536:	b083      	sub	sp, #12
 8007538:	4605      	mov	r5, r0
 800753a:	460c      	mov	r4, r1
  uint16_t len = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007542:	884a      	ldrh	r2, [r1, #2]
 8007544:	0a13      	lsrs	r3, r2, #8
 8007546:	3b01      	subs	r3, #1
 8007548:	2b06      	cmp	r3, #6
 800754a:	f200 80a4 	bhi.w	8007696 <USBD_GetDescriptor+0x162>
 800754e:	e8df f003 	tbb	[pc, r3]
 8007552:	1804      	.short	0x1804
 8007554:	86a2a22c 	.word	0x86a2a22c
 8007558:	93          	.byte	0x93
 8007559:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800755a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f10d 0106 	add.w	r1, sp, #6
 8007564:	7c00      	ldrb	r0, [r0, #16]
 8007566:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8007568:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800756c:	b11a      	cbz	r2, 8007576 <USBD_GetDescriptor+0x42>
 800756e:	88e3      	ldrh	r3, [r4, #6]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f040 8094 	bne.w	800769e <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8007576:	88e3      	ldrh	r3, [r4, #6]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 809a 	beq.w	80076b2 <USBD_GetDescriptor+0x17e>
}
 800757e:	b003      	add	sp, #12
 8007580:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007582:	7c03      	ldrb	r3, [r0, #16]
 8007584:	b943      	cbnz	r3, 8007598 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007586:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	f10d 0006 	add.w	r0, sp, #6
 8007590:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007592:	2302      	movs	r3, #2
 8007594:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007596:	e7e7      	b.n	8007568 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007598:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	f10d 0006 	add.w	r0, sp, #6
 80075a2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075a4:	2302      	movs	r3, #2
 80075a6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80075a8:	e7de      	b.n	8007568 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	2a05      	cmp	r2, #5
 80075ae:	d852      	bhi.n	8007656 <USBD_GetDescriptor+0x122>
 80075b0:	e8df f002 	tbb	[pc, r2]
 80075b4:	2a1d1003 	.word	0x2a1d1003
 80075b8:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075ba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	b123      	cbz	r3, 80075cc <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075c2:	f10d 0106 	add.w	r1, sp, #6
 80075c6:	7c00      	ldrb	r0, [r0, #16]
 80075c8:	4798      	blx	r3
  if (err != 0U)
 80075ca:	e7cd      	b.n	8007568 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80075cc:	4621      	mov	r1, r4
 80075ce:	f7ff ffa7 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 80075d2:	e7d4      	b.n	800757e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	b123      	cbz	r3, 80075e6 <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075dc:	f10d 0106 	add.w	r1, sp, #6
 80075e0:	7c00      	ldrb	r0, [r0, #16]
 80075e2:	4798      	blx	r3
  if (err != 0U)
 80075e4:	e7c0      	b.n	8007568 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80075e6:	4621      	mov	r1, r4
 80075e8:	f7ff ff9a 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 80075ec:	e7c7      	b.n	800757e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075ee:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	b123      	cbz	r3, 8007600 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075f6:	f10d 0106 	add.w	r1, sp, #6
 80075fa:	7c00      	ldrb	r0, [r0, #16]
 80075fc:	4798      	blx	r3
  if (err != 0U)
 80075fe:	e7b3      	b.n	8007568 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007600:	4621      	mov	r1, r4
 8007602:	f7ff ff8d 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 8007606:	e7ba      	b.n	800757e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007608:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	b123      	cbz	r3, 800761a <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007610:	f10d 0106 	add.w	r1, sp, #6
 8007614:	7c00      	ldrb	r0, [r0, #16]
 8007616:	4798      	blx	r3
  if (err != 0U)
 8007618:	e7a6      	b.n	8007568 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800761a:	4621      	mov	r1, r4
 800761c:	f7ff ff80 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 8007620:	e7ad      	b.n	800757e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007622:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	b123      	cbz	r3, 8007634 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800762a:	f10d 0106 	add.w	r1, sp, #6
 800762e:	7c00      	ldrb	r0, [r0, #16]
 8007630:	4798      	blx	r3
  if (err != 0U)
 8007632:	e799      	b.n	8007568 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007634:	4621      	mov	r1, r4
 8007636:	f7ff ff73 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 800763a:	e7a0      	b.n	800757e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800763c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	b123      	cbz	r3, 800764e <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007644:	f10d 0106 	add.w	r1, sp, #6
 8007648:	7c00      	ldrb	r0, [r0, #16]
 800764a:	4798      	blx	r3
  if (err != 0U)
 800764c:	e78c      	b.n	8007568 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800764e:	4621      	mov	r1, r4
 8007650:	f7ff ff66 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 8007654:	e793      	b.n	800757e <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 8007656:	4621      	mov	r1, r4
 8007658:	f7ff ff62 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 800765c:	e78f      	b.n	800757e <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765e:	7c03      	ldrb	r3, [r0, #16]
 8007660:	b933      	cbnz	r3, 8007670 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007662:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007668:	f10d 0006 	add.w	r0, sp, #6
 800766c:	4798      	blx	r3
  if (err != 0U)
 800766e:	e77b      	b.n	8007568 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8007670:	4621      	mov	r1, r4
 8007672:	f7ff ff55 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 8007676:	e782      	b.n	800757e <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007678:	7c03      	ldrb	r3, [r0, #16]
 800767a:	b943      	cbnz	r3, 800768e <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800767c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	f10d 0006 	add.w	r0, sp, #6
 8007686:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007688:	2307      	movs	r3, #7
 800768a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800768c:	e76c      	b.n	8007568 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800768e:	4621      	mov	r1, r4
 8007690:	f7ff ff46 	bl	8007520 <USBD_CtlError>
  if (err != 0U)
 8007694:	e773      	b.n	800757e <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8007696:	4621      	mov	r1, r4
 8007698:	f7ff ff42 	bl	8007520 <USBD_CtlError>
    return;
 800769c:	e76f      	b.n	800757e <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 800769e:	429a      	cmp	r2, r3
 80076a0:	bf28      	it	cs
 80076a2:	461a      	movcs	r2, r3
 80076a4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076a8:	4601      	mov	r1, r0
 80076aa:	4628      	mov	r0, r5
 80076ac:	f000 fade 	bl	8007c6c <USBD_CtlSendData>
 80076b0:	e761      	b.n	8007576 <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 fb06 	bl	8007cc4 <USBD_CtlSendStatus>
 80076b8:	e761      	b.n	800757e <USBD_GetDescriptor+0x4a>

080076ba <USBD_SetAddress>:
{
 80076ba:	b538      	push	{r3, r4, r5, lr}
 80076bc:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076be:	888b      	ldrh	r3, [r1, #4]
 80076c0:	b9f3      	cbnz	r3, 8007700 <USBD_SetAddress+0x46>
 80076c2:	88cb      	ldrh	r3, [r1, #6]
 80076c4:	b9e3      	cbnz	r3, 8007700 <USBD_SetAddress+0x46>
 80076c6:	884b      	ldrh	r3, [r1, #2]
 80076c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80076ca:	d819      	bhi.n	8007700 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076cc:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d00c      	beq.n	80076f2 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80076d8:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076dc:	4629      	mov	r1, r5
 80076de:	f7ff fd74 	bl	80071ca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 faee 	bl	8007cc4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80076e8:	b135      	cbz	r5, 80076f8 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ea:	2302      	movs	r3, #2
 80076ec:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80076f0:	e009      	b.n	8007706 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80076f2:	f7ff ff15 	bl	8007520 <USBD_CtlError>
 80076f6:	e006      	b.n	8007706 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80076fe:	e002      	b.n	8007706 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8007700:	4620      	mov	r0, r4
 8007702:	f7ff ff0d 	bl	8007520 <USBD_CtlError>
}
 8007706:	bd38      	pop	{r3, r4, r5, pc}

08007708 <USBD_SetConfig>:
{
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4604      	mov	r4, r0
 800770c:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800770e:	7889      	ldrb	r1, [r1, #2]
 8007710:	4b28      	ldr	r3, [pc, #160]	@ (80077b4 <USBD_SetConfig+0xac>)
 8007712:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007714:	2901      	cmp	r1, #1
 8007716:	d80e      	bhi.n	8007736 <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8007718:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800771c:	2b02      	cmp	r3, #2
 800771e:	d00e      	beq.n	800773e <USBD_SetConfig+0x36>
 8007720:	2b03      	cmp	r3, #3
 8007722:	d021      	beq.n	8007768 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007724:	4629      	mov	r1, r5
 8007726:	f7ff fefb 	bl	8007520 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800772a:	4b22      	ldr	r3, [pc, #136]	@ (80077b4 <USBD_SetConfig+0xac>)
 800772c:	7819      	ldrb	r1, [r3, #0]
 800772e:	4620      	mov	r0, r4
 8007730:	f7ff fd9f 	bl	8007272 <USBD_ClrClassConfig>
        break;
 8007734:	e002      	b.n	800773c <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 8007736:	4629      	mov	r1, r5
 8007738:	f7ff fef2 	bl	8007520 <USBD_CtlError>
}
 800773c:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 800773e:	b181      	cbz	r1, 8007762 <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 8007740:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007742:	2303      	movs	r3, #3
 8007744:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007748:	f7ff fd87 	bl	800725a <USBD_SetClassConfig>
 800774c:	2802      	cmp	r0, #2
 800774e:	d003      	beq.n	8007758 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fab7 	bl	8007cc4 <USBD_CtlSendStatus>
 8007756:	e7f1      	b.n	800773c <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8007758:	4629      	mov	r1, r5
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff fee0 	bl	8007520 <USBD_CtlError>
            return;
 8007760:	e7ec      	b.n	800773c <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8007762:	f000 faaf 	bl	8007cc4 <USBD_CtlSendStatus>
 8007766:	e7e9      	b.n	800773c <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 8007768:	b189      	cbz	r1, 800778e <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 800776a:	6843      	ldr	r3, [r0, #4]
 800776c:	4299      	cmp	r1, r3
 800776e:	d01d      	beq.n	80077ac <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007770:	b2d9      	uxtb	r1, r3
 8007772:	f7ff fd7e 	bl	8007272 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007776:	4b0f      	ldr	r3, [pc, #60]	@ (80077b4 <USBD_SetConfig+0xac>)
 8007778:	7819      	ldrb	r1, [r3, #0]
 800777a:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800777c:	4620      	mov	r0, r4
 800777e:	f7ff fd6c 	bl	800725a <USBD_SetClassConfig>
 8007782:	2802      	cmp	r0, #2
 8007784:	d00d      	beq.n	80077a2 <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 8007786:	4620      	mov	r0, r4
 8007788:	f000 fa9c 	bl	8007cc4 <USBD_CtlSendStatus>
 800778c:	e7d6      	b.n	800773c <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800778e:	2302      	movs	r3, #2
 8007790:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007794:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007796:	f7ff fd6c 	bl	8007272 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800779a:	4620      	mov	r0, r4
 800779c:	f000 fa92 	bl	8007cc4 <USBD_CtlSendStatus>
 80077a0:	e7cc      	b.n	800773c <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 80077a2:	4629      	mov	r1, r5
 80077a4:	4620      	mov	r0, r4
 80077a6:	f7ff febb 	bl	8007520 <USBD_CtlError>
            return;
 80077aa:	e7c7      	b.n	800773c <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80077ac:	f000 fa8a 	bl	8007cc4 <USBD_CtlSendStatus>
 80077b0:	e7c4      	b.n	800773c <USBD_SetConfig+0x34>
 80077b2:	bf00      	nop
 80077b4:	20001778 	.word	0x20001778

080077b8 <USBD_GetConfig>:
{
 80077b8:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80077ba:	88cb      	ldrh	r3, [r1, #6]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d10a      	bne.n	80077d6 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80077c0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d909      	bls.n	80077dc <USBD_GetConfig+0x24>
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d111      	bne.n	80077f0 <USBD_GetConfig+0x38>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077cc:	2201      	movs	r2, #1
 80077ce:	1d01      	adds	r1, r0, #4
 80077d0:	f000 fa4c 	bl	8007c6c <USBD_CtlSendData>
        break;
 80077d4:	e001      	b.n	80077da <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80077d6:	f7ff fea3 	bl	8007520 <USBD_CtlError>
}
 80077da:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80077dc:	b25b      	sxtb	r3, r3
 80077de:	b13b      	cbz	r3, 80077f0 <USBD_GetConfig+0x38>
        pdev->dev_default_config = 0U;
 80077e0:	4601      	mov	r1, r0
 80077e2:	2300      	movs	r3, #0
 80077e4:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80077e8:	2201      	movs	r2, #1
 80077ea:	f000 fa3f 	bl	8007c6c <USBD_CtlSendData>
        break;
 80077ee:	e7f4      	b.n	80077da <USBD_GetConfig+0x22>
        USBD_CtlError(pdev, req);
 80077f0:	f7ff fe96 	bl	8007520 <USBD_CtlError>
}
 80077f4:	e7f1      	b.n	80077da <USBD_GetConfig+0x22>

080077f6 <USBD_GetStatus>:
{
 80077f6:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80077f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80077fc:	3b01      	subs	r3, #1
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d812      	bhi.n	8007828 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8007802:	88cb      	ldrh	r3, [r1, #6]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d10c      	bne.n	8007822 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800780c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8007810:	b10b      	cbz	r3, 8007816 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007812:	2302      	movs	r3, #2
 8007814:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007816:	2202      	movs	r2, #2
 8007818:	f100 010c 	add.w	r1, r0, #12
 800781c:	f000 fa26 	bl	8007c6c <USBD_CtlSendData>
}
 8007820:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8007822:	f7ff fe7d 	bl	8007520 <USBD_CtlError>
        break;
 8007826:	e7fb      	b.n	8007820 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8007828:	f7ff fe7a 	bl	8007520 <USBD_CtlError>
}
 800782c:	e7f8      	b.n	8007820 <USBD_GetStatus+0x2a>

0800782e <USBD_ClrFeature>:
{
 800782e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8007830:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007834:	3b01      	subs	r3, #1
 8007836:	2b02      	cmp	r3, #2
 8007838:	d809      	bhi.n	800784e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800783a:	884b      	ldrh	r3, [r1, #2]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d000      	beq.n	8007842 <USBD_ClrFeature+0x14>
}
 8007840:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007848:	f000 fa3c 	bl	8007cc4 <USBD_CtlSendStatus>
 800784c:	e7f8      	b.n	8007840 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800784e:	f7ff fe67 	bl	8007520 <USBD_CtlError>
}
 8007852:	e7f5      	b.n	8007840 <USBD_ClrFeature+0x12>

08007854 <USBD_StdDevReq>:
{
 8007854:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007856:	780b      	ldrb	r3, [r1, #0]
 8007858:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800785c:	2b20      	cmp	r3, #32
 800785e:	d005      	beq.n	800786c <USBD_StdDevReq+0x18>
 8007860:	2b40      	cmp	r3, #64	@ 0x40
 8007862:	d003      	beq.n	800786c <USBD_StdDevReq+0x18>
 8007864:	b143      	cbz	r3, 8007878 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8007866:	f7ff fe5b 	bl	8007520 <USBD_CtlError>
      break;
 800786a:	e003      	b.n	8007874 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 800786c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4798      	blx	r3
}
 8007874:	2000      	movs	r0, #0
 8007876:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8007878:	784b      	ldrb	r3, [r1, #1]
 800787a:	2b09      	cmp	r3, #9
 800787c:	d81b      	bhi.n	80078b6 <USBD_StdDevReq+0x62>
 800787e:	e8df f003 	tbb	[pc, r3]
 8007882:	1711      	.short	0x1711
 8007884:	081a141a 	.word	0x081a141a
 8007888:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 800788c:	f7ff fe52 	bl	8007534 <USBD_GetDescriptor>
          break;
 8007890:	e7f0      	b.n	8007874 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8007892:	f7ff ff12 	bl	80076ba <USBD_SetAddress>
          break;
 8007896:	e7ed      	b.n	8007874 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8007898:	f7ff ff36 	bl	8007708 <USBD_SetConfig>
          break;
 800789c:	e7ea      	b.n	8007874 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 800789e:	f7ff ff8b 	bl	80077b8 <USBD_GetConfig>
          break;
 80078a2:	e7e7      	b.n	8007874 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 80078a4:	f7ff ffa7 	bl	80077f6 <USBD_GetStatus>
          break;
 80078a8:	e7e4      	b.n	8007874 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 80078aa:	f7ff fe1b 	bl	80074e4 <USBD_SetFeature>
          break;
 80078ae:	e7e1      	b.n	8007874 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 80078b0:	f7ff ffbd 	bl	800782e <USBD_ClrFeature>
          break;
 80078b4:	e7de      	b.n	8007874 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 80078b6:	f7ff fe33 	bl	8007520 <USBD_CtlError>
          break;
 80078ba:	e7db      	b.n	8007874 <USBD_StdDevReq+0x20>

080078bc <USBD_StdItfReq>:
{
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4605      	mov	r5, r0
 80078c0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c2:	780b      	ldrb	r3, [r1, #0]
 80078c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d006      	beq.n	80078da <USBD_StdItfReq+0x1e>
 80078cc:	2b40      	cmp	r3, #64	@ 0x40
 80078ce:	d004      	beq.n	80078da <USBD_StdItfReq+0x1e>
 80078d0:	b11b      	cbz	r3, 80078da <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80078d2:	f7ff fe25 	bl	8007520 <USBD_CtlError>
}
 80078d6:	2000      	movs	r0, #0
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80078da:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80078de:	3b01      	subs	r3, #1
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d816      	bhi.n	8007912 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078e4:	7923      	ldrb	r3, [r4, #4]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d80e      	bhi.n	8007908 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078ea:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	4621      	mov	r1, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078f6:	88e3      	ldrh	r3, [r4, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1ec      	bne.n	80078d6 <USBD_StdItfReq+0x1a>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d1ea      	bne.n	80078d6 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8007900:	4628      	mov	r0, r5
 8007902:	f000 f9df 	bl	8007cc4 <USBD_CtlSendStatus>
 8007906:	e7e6      	b.n	80078d6 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8007908:	4621      	mov	r1, r4
 800790a:	4628      	mov	r0, r5
 800790c:	f7ff fe08 	bl	8007520 <USBD_CtlError>
 8007910:	e7e1      	b.n	80078d6 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f7ff fe03 	bl	8007520 <USBD_CtlError>
          break;
 800791a:	e7dc      	b.n	80078d6 <USBD_StdItfReq+0x1a>

0800791c <USBD_StdEPReq>:
{
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8007920:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007922:	780c      	ldrb	r4, [r1, #0]
 8007924:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8007928:	2c20      	cmp	r4, #32
 800792a:	d007      	beq.n	800793c <USBD_StdEPReq+0x20>
 800792c:	b2da      	uxtb	r2, r3
 800792e:	2c40      	cmp	r4, #64	@ 0x40
 8007930:	d004      	beq.n	800793c <USBD_StdEPReq+0x20>
 8007932:	b15c      	cbz	r4, 800794c <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8007934:	f7ff fdf4 	bl	8007520 <USBD_CtlError>
  return ret;
 8007938:	2400      	movs	r4, #0
      break;
 800793a:	e005      	b.n	8007948 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 800793c:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	4628      	mov	r0, r5
 8007944:	4798      	blx	r3
  return ret;
 8007946:	2400      	movs	r4, #0
}
 8007948:	4620      	mov	r0, r4
 800794a:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 800794c:	2c20      	cmp	r4, #32
 800794e:	d009      	beq.n	8007964 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 8007950:	784e      	ldrb	r6, [r1, #1]
 8007952:	2e01      	cmp	r6, #1
 8007954:	d033      	beq.n	80079be <USBD_StdEPReq+0xa2>
 8007956:	2e03      	cmp	r6, #3
 8007958:	d00a      	beq.n	8007970 <USBD_StdEPReq+0x54>
 800795a:	2e00      	cmp	r6, #0
 800795c:	d055      	beq.n	8007a0a <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 800795e:	f7ff fddf 	bl	8007520 <USBD_CtlError>
          break;
 8007962:	e7f1      	b.n	8007948 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007964:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	4798      	blx	r3
 800796c:	4604      	mov	r4, r0
        return ret;
 800796e:	e7eb      	b.n	8007948 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8007970:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007974:	2b02      	cmp	r3, #2
 8007976:	d004      	beq.n	8007982 <USBD_StdEPReq+0x66>
 8007978:	2b03      	cmp	r3, #3
 800797a:	d011      	beq.n	80079a0 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800797c:	f7ff fdd0 	bl	8007520 <USBD_CtlError>
              break;
 8007980:	e7e2      	b.n	8007948 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007982:	b10a      	cbz	r2, 8007988 <USBD_StdEPReq+0x6c>
 8007984:	2a80      	cmp	r2, #128	@ 0x80
 8007986:	d103      	bne.n	8007990 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 8007988:	4628      	mov	r0, r5
 800798a:	f7ff fdc9 	bl	8007520 <USBD_CtlError>
 800798e:	e7db      	b.n	8007948 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8007990:	4611      	mov	r1, r2
 8007992:	f7ff fbf4 	bl	800717e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007996:	2180      	movs	r1, #128	@ 0x80
 8007998:	4628      	mov	r0, r5
 800799a:	f7ff fbf0 	bl	800717e <USBD_LL_StallEP>
 800799e:	e7d3      	b.n	8007948 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079a0:	884b      	ldrh	r3, [r1, #2]
 80079a2:	b923      	cbnz	r3, 80079ae <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 80079a4:	b11a      	cbz	r2, 80079ae <USBD_StdEPReq+0x92>
 80079a6:	2a80      	cmp	r2, #128	@ 0x80
 80079a8:	d001      	beq.n	80079ae <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079aa:	88cb      	ldrh	r3, [r1, #6]
 80079ac:	b11b      	cbz	r3, 80079b6 <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f988 	bl	8007cc4 <USBD_CtlSendStatus>
              break;
 80079b4:	e7c8      	b.n	8007948 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 80079b6:	4611      	mov	r1, r2
 80079b8:	f7ff fbe1 	bl	800717e <USBD_LL_StallEP>
 80079bc:	e7f7      	b.n	80079ae <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 80079be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d004      	beq.n	80079d0 <USBD_StdEPReq+0xb4>
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d011      	beq.n	80079ee <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 80079ca:	f7ff fda9 	bl	8007520 <USBD_CtlError>
              break;
 80079ce:	e7bb      	b.n	8007948 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079d0:	b10a      	cbz	r2, 80079d6 <USBD_StdEPReq+0xba>
 80079d2:	2a80      	cmp	r2, #128	@ 0x80
 80079d4:	d103      	bne.n	80079de <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 80079d6:	4628      	mov	r0, r5
 80079d8:	f7ff fda2 	bl	8007520 <USBD_CtlError>
 80079dc:	e7b4      	b.n	8007948 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 80079de:	4611      	mov	r1, r2
 80079e0:	f7ff fbcd 	bl	800717e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079e4:	2180      	movs	r1, #128	@ 0x80
 80079e6:	4628      	mov	r0, r5
 80079e8:	f7ff fbc9 	bl	800717e <USBD_LL_StallEP>
 80079ec:	e7ac      	b.n	8007948 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079ee:	884b      	ldrh	r3, [r1, #2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1a9      	bne.n	8007948 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80079f4:	f012 0f7f 	tst.w	r2, #127	@ 0x7f
 80079f8:	d103      	bne.n	8007a02 <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f962 	bl	8007cc4 <USBD_CtlSendStatus>
 8007a00:	e7a2      	b.n	8007948 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a02:	4611      	mov	r1, r2
 8007a04:	f7ff fbc3 	bl	800718e <USBD_LL_ClearStallEP>
 8007a08:	e7f7      	b.n	80079fa <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 8007a0a:	f890 029c 	ldrb.w	r0, [r0, #668]	@ 0x29c
 8007a0e:	2802      	cmp	r0, #2
 8007a10:	d006      	beq.n	8007a20 <USBD_StdEPReq+0x104>
 8007a12:	2803      	cmp	r0, #3
 8007a14:	d029      	beq.n	8007a6a <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8007a16:	4628      	mov	r0, r5
 8007a18:	f7ff fd82 	bl	8007520 <USBD_CtlError>
  return ret;
 8007a1c:	4634      	mov	r4, r6
              break;
 8007a1e:	e793      	b.n	8007948 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a20:	b10a      	cbz	r2, 8007a26 <USBD_StdEPReq+0x10a>
 8007a22:	2a80      	cmp	r2, #128	@ 0x80
 8007a24:	d113      	bne.n	8007a4e <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a2a:	d115      	bne.n	8007a58 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007a34:	0091      	lsls	r1, r2, #2
 8007a36:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8007a3a:	4429      	add	r1, r5
 8007a3c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a42:	2202      	movs	r2, #2
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f911 	bl	8007c6c <USBD_CtlSendData>
  return ret;
 8007a4a:	4634      	mov	r4, r6
              break;
 8007a4c:	e77c      	b.n	8007948 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f7ff fd66 	bl	8007520 <USBD_CtlError>
  return ret;
 8007a54:	4634      	mov	r4, r6
                break;
 8007a56:	e777      	b.n	8007948 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007a60:	0091      	lsls	r1, r2, #2
 8007a62:	3110      	adds	r1, #16
 8007a64:	4429      	add	r1, r5
 8007a66:	3104      	adds	r1, #4
 8007a68:	e7e9      	b.n	8007a3e <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	db1f      	blt.n	8007ab0 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a70:	f002 000f 	and.w	r0, r2, #15
 8007a74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007a78:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8007a7c:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8007a80:	b320      	cbz	r0, 8007acc <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	db27      	blt.n	8007ad6 <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a86:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007a8e:	009c      	lsls	r4, r3, #2
 8007a90:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8007a94:	442c      	add	r4, r5
 8007a96:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a98:	b10a      	cbz	r2, 8007a9e <USBD_StdEPReq+0x182>
 8007a9a:	2a80      	cmp	r2, #128	@ 0x80
 8007a9c:	d124      	bne.n	8007ae8 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 f8e0 	bl	8007c6c <USBD_CtlSendData>
  return ret;
 8007aac:	4634      	mov	r4, r6
              break;
 8007aae:	e74b      	b.n	8007948 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ab0:	f002 000f 	and.w	r0, r2, #15
 8007ab4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007ab8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8007abc:	6980      	ldr	r0, [r0, #24]
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d1df      	bne.n	8007a82 <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f7ff fd2c 	bl	8007520 <USBD_CtlError>
  return ret;
 8007ac8:	4634      	mov	r4, r6
                  break;
 8007aca:	e73d      	b.n	8007948 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 8007acc:	4628      	mov	r0, r5
 8007ace:	f7ff fd27 	bl	8007520 <USBD_CtlError>
  return ret;
 8007ad2:	4634      	mov	r4, r6
                  break;
 8007ad4:	e738      	b.n	8007948 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad6:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8007ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ade:	009c      	lsls	r4, r3, #2
 8007ae0:	3410      	adds	r4, #16
 8007ae2:	442c      	add	r4, r5
 8007ae4:	3404      	adds	r4, #4
 8007ae6:	e7d7      	b.n	8007a98 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7ff fb57 	bl	800719e <USBD_LL_IsStallEP>
 8007af0:	b110      	cbz	r0, 8007af8 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 8007af2:	2301      	movs	r3, #1
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	e7d4      	b.n	8007aa2 <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	e7d1      	b.n	8007aa2 <USBD_StdEPReq+0x186>

08007afe <USBD_GetString>:
  if (desc != NULL)
 8007afe:	b1d0      	cbz	r0, 8007b36 <USBD_GetString+0x38>
{
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	460d      	mov	r5, r1
 8007b04:	4616      	mov	r6, r2
 8007b06:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b08:	f7ff fce2 	bl	80074d0 <USBD_GetLen>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b14:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b16:	2303      	movs	r3, #3
 8007b18:	706b      	strb	r3, [r5, #1]
 8007b1a:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007b1c:	e007      	b.n	8007b2e <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8007b1e:	3401      	adds	r4, #1
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8007b26:	3302      	adds	r3, #2
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8007b2e:	7820      	ldrb	r0, [r4, #0]
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d1f4      	bne.n	8007b1e <USBD_GetString+0x20>
}
 8007b34:	bd70      	pop	{r4, r5, r6, pc}
 8007b36:	4770      	bx	lr

08007b38 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b38:	2312      	movs	r3, #18
 8007b3a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007b3c:	4800      	ldr	r0, [pc, #0]	@ (8007b40 <USBD_FS_DeviceDescriptor+0x8>)
 8007b3e:	4770      	bx	lr
 8007b40:	200001ac 	.word	0x200001ac

08007b44 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b44:	2304      	movs	r3, #4
 8007b46:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007b48:	4800      	ldr	r0, [pc, #0]	@ (8007b4c <USBD_FS_LangIDStrDescriptor+0x8>)
 8007b4a:	4770      	bx	lr
 8007b4c:	200001a8 	.word	0x200001a8

08007b50 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d21e      	bcs.n	8007b94 <IntToUnicode+0x44>
{
 8007b56:	b500      	push	{lr}
 8007b58:	e010      	b.n	8007b7c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b5a:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8007b5e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8007b62:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007b68:	f10c 0c01 	add.w	ip, ip, #1
 8007b6c:	f04f 0e00 	mov.w	lr, #0
 8007b70:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8007b74:	3301      	adds	r3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d209      	bcs.n	8007b90 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8007b7c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8007b80:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8007b84:	d2e9      	bcs.n	8007b5a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b86:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8007b8a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8007b8e:	e7e8      	b.n	8007b62 <IntToUnicode+0x12>
  }
}
 8007b90:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b94:	4770      	bx	lr
	...

08007b98 <Get_SerialNum>:
{
 8007b98:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc8 <Get_SerialNum+0x30>)
 8007b9c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ba0:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ba4:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8007ba8:	18c0      	adds	r0, r0, r3
 8007baa:	d100      	bne.n	8007bae <Get_SerialNum+0x16>
}
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bae:	4d07      	ldr	r5, [pc, #28]	@ (8007bcc <Get_SerialNum+0x34>)
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7ff ffcc 	bl	8007b50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bb8:	2204      	movs	r2, #4
 8007bba:	f105 0110 	add.w	r1, r5, #16
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff ffc6 	bl	8007b50 <IntToUnicode>
}
 8007bc4:	e7f2      	b.n	8007bac <Get_SerialNum+0x14>
 8007bc6:	bf00      	nop
 8007bc8:	1ffff000 	.word	0x1ffff000
 8007bcc:	2000018e 	.word	0x2000018e

08007bd0 <USBD_FS_SerialStrDescriptor>:
{
 8007bd0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007bd2:	231a      	movs	r3, #26
 8007bd4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8007bd6:	f7ff ffdf 	bl	8007b98 <Get_SerialNum>
}
 8007bda:	4801      	ldr	r0, [pc, #4]	@ (8007be0 <USBD_FS_SerialStrDescriptor+0x10>)
 8007bdc:	bd08      	pop	{r3, pc}
 8007bde:	bf00      	nop
 8007be0:	2000018c 	.word	0x2000018c

08007be4 <USBD_FS_ProductStrDescriptor>:
{
 8007be4:	b508      	push	{r3, lr}
 8007be6:	460a      	mov	r2, r1
  if(speed == 0)
 8007be8:	b928      	cbnz	r0, 8007bf6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bea:	4905      	ldr	r1, [pc, #20]	@ (8007c00 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007bec:	4805      	ldr	r0, [pc, #20]	@ (8007c04 <USBD_FS_ProductStrDescriptor+0x20>)
 8007bee:	f7ff ff86 	bl	8007afe <USBD_GetString>
}
 8007bf2:	4803      	ldr	r0, [pc, #12]	@ (8007c00 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007bf4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bf6:	4902      	ldr	r1, [pc, #8]	@ (8007c00 <USBD_FS_ProductStrDescriptor+0x1c>)
 8007bf8:	4802      	ldr	r0, [pc, #8]	@ (8007c04 <USBD_FS_ProductStrDescriptor+0x20>)
 8007bfa:	f7ff ff80 	bl	8007afe <USBD_GetString>
 8007bfe:	e7f8      	b.n	8007bf2 <USBD_FS_ProductStrDescriptor+0xe>
 8007c00:	2000177c 	.word	0x2000177c
 8007c04:	08007d6c 	.word	0x08007d6c

08007c08 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c0c:	4c03      	ldr	r4, [pc, #12]	@ (8007c1c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4803      	ldr	r0, [pc, #12]	@ (8007c20 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007c12:	f7ff ff74 	bl	8007afe <USBD_GetString>
}
 8007c16:	4620      	mov	r0, r4
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	bf00      	nop
 8007c1c:	2000177c 	.word	0x2000177c
 8007c20:	08007d7c 	.word	0x08007d7c

08007c24 <USBD_FS_ConfigStrDescriptor>:
{
 8007c24:	b508      	push	{r3, lr}
 8007c26:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007c28:	b928      	cbnz	r0, 8007c36 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c2a:	4905      	ldr	r1, [pc, #20]	@ (8007c40 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007c2c:	4805      	ldr	r0, [pc, #20]	@ (8007c44 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007c2e:	f7ff ff66 	bl	8007afe <USBD_GetString>
}
 8007c32:	4803      	ldr	r0, [pc, #12]	@ (8007c40 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007c34:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c36:	4902      	ldr	r1, [pc, #8]	@ (8007c40 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007c38:	4802      	ldr	r0, [pc, #8]	@ (8007c44 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007c3a:	f7ff ff60 	bl	8007afe <USBD_GetString>
 8007c3e:	e7f8      	b.n	8007c32 <USBD_FS_ConfigStrDescriptor+0xe>
 8007c40:	2000177c 	.word	0x2000177c
 8007c44:	08007d84 	.word	0x08007d84

08007c48 <USBD_FS_InterfaceStrDescriptor>:
{
 8007c48:	b508      	push	{r3, lr}
 8007c4a:	460a      	mov	r2, r1
  if(speed == 0)
 8007c4c:	b928      	cbnz	r0, 8007c5a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c4e:	4905      	ldr	r1, [pc, #20]	@ (8007c64 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007c50:	4805      	ldr	r0, [pc, #20]	@ (8007c68 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007c52:	f7ff ff54 	bl	8007afe <USBD_GetString>
}
 8007c56:	4803      	ldr	r0, [pc, #12]	@ (8007c64 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007c58:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c5a:	4902      	ldr	r1, [pc, #8]	@ (8007c64 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007c5c:	4802      	ldr	r0, [pc, #8]	@ (8007c68 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007c5e:	f7ff ff4e 	bl	8007afe <USBD_GetString>
 8007c62:	e7f8      	b.n	8007c56 <USBD_FS_InterfaceStrDescriptor+0xe>
 8007c64:	2000177c 	.word	0x2000177c
 8007c68:	08007d90 	.word	0x08007d90

08007c6c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c6c:	b508      	push	{r3, lr}
 8007c6e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c70:	2202      	movs	r2, #2
 8007c72:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c76:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c78:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c7a:	460a      	mov	r2, r1
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	f7ff faac 	bl	80071da <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c82:	2000      	movs	r0, #0
 8007c84:	bd08      	pop	{r3, pc}

08007c86 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c86:	b508      	push	{r3, lr}
 8007c88:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c8a:	460a      	mov	r2, r1
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f7ff faa4 	bl	80071da <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c92:	2000      	movs	r0, #0
 8007c94:	bd08      	pop	{r3, pc}

08007c96 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007c96:	b508      	push	{r3, lr}
 8007c98:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007ca0:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ca4:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ca8:	460a      	mov	r2, r1
 8007caa:	2100      	movs	r1, #0
 8007cac:	f7ff fa9d 	bl	80071ea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	bd08      	pop	{r3, pc}

08007cb4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007cb4:	b508      	push	{r3, lr}
 8007cb6:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cb8:	460a      	mov	r2, r1
 8007cba:	2100      	movs	r1, #0
 8007cbc:	f7ff fa95 	bl	80071ea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	bd08      	pop	{r3, pc}

08007cc4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cc4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cc6:	2304      	movs	r3, #4
 8007cc8:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ccc:	2300      	movs	r3, #0
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f7ff fa82 	bl	80071da <USBD_LL_Transmit>

  return USBD_OK;
}
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	bd08      	pop	{r3, pc}

08007cda <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cda:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cdc:	2305      	movs	r3, #5
 8007cde:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f7ff fa7f 	bl	80071ea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007cec:	2000      	movs	r0, #0
 8007cee:	bd08      	pop	{r3, pc}

08007cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007cf0:	f7fe fd92 	bl	8006818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007cf4:	480b      	ldr	r0, [pc, #44]	@ (8007d24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007cf6:	490c      	ldr	r1, [pc, #48]	@ (8007d28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8007d2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8007cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007cfc:	e002      	b.n	8007d04 <LoopCopyDataInit>

08007cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d02:	3304      	adds	r3, #4

08007d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d08:	d3f9      	bcc.n	8007cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d0a:	4a09      	ldr	r2, [pc, #36]	@ (8007d30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007d0c:	4c09      	ldr	r4, [pc, #36]	@ (8007d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d10:	e001      	b.n	8007d16 <LoopFillZerobss>

08007d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d14:	3204      	adds	r2, #4

08007d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d18:	d3fb      	bcc.n	8007d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007d1a:	f7f8 fa43 	bl	80001a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007d1e:	f7fa fa9f 	bl	8002260 <main>
  bx lr
 8007d22:	4770      	bx	lr
  ldr r0, =_sdata
 8007d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8007d2c:	08007e10 	.word	0x08007e10
  ldr r2, =_sbss
 8007d30:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8007d34:	2000197c 	.word	0x2000197c

08007d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007d38:	e7fe      	b.n	8007d38 <ADC1_2_IRQHandler>
	...

08007d3c <_init>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

08007d48 <_fini>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr
